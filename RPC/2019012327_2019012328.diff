diff --git a/.gitignore b/.gitignore
index d0d70ae..016606b 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,2 +1,3 @@
 bazel-*
-.vscode
\ No newline at end of file
+.vscode
+.idea
diff --git a/Memory/.gitignore b/Memory/.gitignore
new file mode 100644
index 0000000..ac4ba05
--- /dev/null
+++ b/Memory/.gitignore
@@ -0,0 +1,4 @@
+bazel-*
+.idea
+.vscode
+*.txt
\ No newline at end of file
diff --git a/Memory/2019012327_2019012328.diff b/Memory/2019012327_2019012328.diff
new file mode 100644
index 0000000..e168605
--- /dev/null
+++ b/Memory/2019012327_2019012328.diff
@@ -0,0 +1,12455 @@
+diff --git a/.gitignore b/.gitignore
+index d0d70ae..016606b 100644
+--- a/.gitignore
++++ b/.gitignore
+@@ -1,2 +1,3 @@
+ bazel-*
+-.vscode
+\ No newline at end of file
++.vscode
++.idea
+diff --git a/Memory/.gitignore b/Memory/.gitignore
+new file mode 100644
+index 0000000..ac4ba05
+--- /dev/null
++++ b/Memory/.gitignore
+@@ -0,0 +1,4 @@
++bazel-*
++.idea
++.vscode
++*.txt
+\ No newline at end of file
+diff --git a/Memory/Memory Management.pdf b/Memory/Memory Management.pdf
+new file mode 100644
+index 0000000..d648342
+--- /dev/null
++++ b/Memory/Memory Management.pdf	
+@@ -0,0 +1,118 @@
++Memory Management
++
++In this experiment, you will emulate a simple memory management system in the OS. Your
++memory manager will handle memory allocation, access, and release from user applications. It
++will also support page replacement policies so that applications have access to a much larger
++array list than the available memory. You will need to consider thread safety as your memory
++manager is shared among many threads.
++
++In a nutshell, the memory manager emulation works like the following (see the next section for a
++detailed discussion of the sample code):
++
++   1. On initialization, the MemoryManager allocates a fixed number of PageFrames. The number
++      will not change throughout the entire process. The MemoryManager will manage these
++      pages, including tracking empty pages, and allocations, etc.
++
++   2. The MemoryManager allocates memory to applications through the creation of ArrayList
++      objects. All subsequent access to the memory from the MemoryManager should go
++      through the ArrayList interfaces. That is, you should not access the underlying memory
++      arrays directly. Each ArrayList has an ID assigned by the MemoryManager. You can choose
++      to use or not to use that ID, but you should not remove it.
++
++   3. The mma should support PageIn s and PageOut s once its PageFrames runs low. To do so,
++      the MemoryManager can choose to track memory accesses. For emulation, you can track all
++      memory accesses in software, but please keep the tracking overhead as low as you can.
++
++   4. The MemoryManager and all single accesses to the memory should be thread-safe.
++
++Codebase Introduction
++
++The test cases in mma_test.cc serve as documentation for the MemoryManager interface usage.
++
++We encapsulate such a memory segment in the class of ArrayList (see lib/array_list.h ).
++ArrayList provides basic Read and Write functions for workloads to access memory. Note
++that ArrayList only registers the memory segment in the memory_manager ( mma for short) with
++a unique identification array_id instead of holding the memory directly. You can allocate
++ArrayLists using the mma .
++
++We provide interface definition of mma in lib/memory_manager.h . See the file for places you can
++modify and places you cannot modify.
++
++Specifically, you should implement the following functionalities in the mma :
++       PageFrame : mma organizes its memory space as an array of pages. The page size is 4KB. In
++      this experiment, we implement page data structure as PageFrame . PageFrame should
++      support random access and serialization/deserialization (i.e., save the content of pages in
++      disks using WriteDisk() method and recover a page from disk files using ReadDisk()
++      method)
++
++       PageInfo : mma records necessary information for each page (e.g., the current virtual page
++      it holds on). You can put additional states of each page in this structure for other
++      functionalities if you see necessary.
++
++       ReadPage/WritePage : when applications read/write a new value to the ArrayList (using the
++      ArrayList interface), the value should eventually find its correct memory location in the pre-
++      allocated memory in MemoryManager. It is your call whether to do the address translation
++      in the ArrayList object or in the mma . Note that ArrayList accesses 4 bytes of memory at a
++      time in this experiment.
++
++       PageReplacement : when the number of page frames allocated in ArrayLists exceeds the
++      available number of page frames in the mma , mma should page out some pages to disk
++      files. Implement your mma 's page replacement algorithms with PageOut method to store a
++      page into a file and PageIn method to load a page from the file. You should use a
++      reasonable algorithm to minimize the number of page-ins and outs. For simplicity, you can
++      use array_id and virtual_page_id to identify disk files of each page.
++
++       Allocate/Release : when mma allocates an ArrayList , it should assign a unique ID to the
++      ArrayList, and allocate PageFrames to the ArrayList. Note that you are no need to allocate
++      physical pages to some ArrayList as soon as it is created. When as soon as an ArrayList
++      is destroyed, mma should reclaim the PageFrames (both in memory and on disk),
++      synchronously. Note that a PageFrame is the smallest allocation unit in this experiment, so
++      allocating slightly larger memory than required to applications is acceptable.
++
++      If your replacement policy requires, you can track the memory accesses (read or write or
++      both) in the mma .
++
++mma_test.cc provides basic tests for memory manager validation and observation experiments,
++the first three tasks for single-thread scenarios, and the fourth task for multi-thread scenarios.
++
++You can utilize basic tools in utils.h to write tests for your mma functions.
++
++TODO
++
++Q1
++Implement your mma and ArrayList to support single-thread scenarios. The page replacement
++algorithm should be FIFO. Observe and record the time it costs to pass the first three tests.
++
++Q2
++
++Implement a clock algorithm (approximate LRU) for page replacement instead of your FIFO in
++Q1. Observe and record the time it costs to pass the three tests. Compare two parts of
++experiment results, analyze the difference.
++
++Q3
++
++Change the mma memory allocation from 1 to 10 and re-run test 2 for both algorithms. Observe
++and record the time it costs to pass the tests. Analyze the reason for the result variation and the
++differences between the two algorithms.
++
++Q4
++
++Implement your mma to support multi-thread scenarios while guaranteeing thread safety. The
++page replacement algorithm should be the clock algorithm. Vary the thread number from 10 to
++20 to pass the 4th test. What can you observe? Try to analyze the results.
++
++Grading
++
++We will use extra workloads to test your mma , so your implementation should not rely on
++mma_test.cc . We grade with the following three requirements:
++
++   1. Correctness: pass all tests in mma_test.cc and extra tests;
++   2. Performance: we will consider the time it takes to pass the tests. For concurrent tests, it
++
++      should be significantly faster than running all tasks sequentially - so you should not let mma
++      process requests one by one.
++   3. Observation and analysis: submit a PDF to display your experiment results in Q1 - Q4 and
++      try to explain the rationales behind the results.
++
++Submit the diff file that can be correctly applied to ec3155c3 .
++
+\ No newline at end of file
+diff --git a/Memory/README.md b/Memory/README.md
+index e94b1af..11dc6dd 100644
+--- a/Memory/README.md
++++ b/Memory/README.md
+@@ -64,3 +64,5 @@ We will use extra workloads to test your `mma`, so your implementation should no
+ 2. Performance: we will consider the time it takes to pass the tests. For concurrent tests, it should
+     be significantly faster than running all tasks sequentially - so you should not let `mma` process requests one by one. 
+ 3. Observation and analysis: submit a PDF to display your experiment results in Q1 - Q4 and try to explain the rationales behind the results.
++
++Submit the diff file that can be correctly applied to `ec3155c3`.
+diff --git a/Memory/Report.md b/Memory/Report.md
+new file mode 100644
+index 0000000..06a333d
+--- /dev/null
++++ b/Memory/Report.md
+@@ -0,0 +1,57 @@
++# OS Project : Memory Report
++
++陈泰杰 2019012328 & 段昌宇 2019012327
++
++### Q1
++
++| Task ID | Replacement Policy | Result (ms) |
++| :-----: | :----------------: | :---------: |
++|    1    |        FIFO        |      5      |
++|    2    |        FIFO        |     425     |
++|    3    |        FIFO        |     979     |
++
++### Q2
++
++| Task ID | Replacement Policy | Result (ms) |
++| :-----: | :----------------: | :---------: |
++|    1    |       CLOCK        |      5      |
++|    2    |       CLOCK        |     420     |
++|    3    |       CLOCK        |     735     |
++
++- We see that FIFO and CLOCK Replacement Policy has almost the same result. One probably reason is that, the number of virtual pages is much larger than the number of physical page, thus the miss rate is rather high no matter replacement policy.
++- CLOCL Policy is slightly better than FIFO Policy in Task 3, which implies that the LRU-liked CLOCL Policy can provide a better data reuse in some cases, such as matrix multiplication.
++
++### Q3
++
++| Task ID | # of Physical Page | FIFO Result (ms) | CLOCK Result (ms) |
++| :-----: | :----------------: | :--------------: | :---------------: |
++|    2    |         1          |       400        |        396        |
++|    2    |         2          |       386        |        401        |
++|    2    |         3          |       459        |        396        |
++|    2    |         4          |       404        |        412        |
++|    2    |         5          |       410        |        402        |
++|    2    |         6          |       469        |        410        |
++|    2    |         7          |       407        |        404        |
++|    2    |         8          |       402        |        412        |
++|    2    |         9          |       438        |        406        |
++|    2    |         10         |       406        |        407        |
++
++- Either 1 or 10 physical pages is too small for Task 2. Thus, we find little change in the results
++
++### Q4
++
++| Task ID | # of Thread | CLOCK Result (ms) |
++| :-----: | :---------: | :---------------: |
++|    4    |     10      |        100        |
++|    4    |     11      |        102        |
++|    4    |     12      |        112        |
++|    4    |     13      |        182        |
++|    4    |     14      |        254        |
++|    4    |     15      |        492        |
++|    4    |     16      |        711        |
++|    4    |     17      |        645        |
++|    4    |     18      |       1467        |
++|    4    |     19      |       1300        |
++|    4    |     20      |       1332        |
++
++- As the number of threads increases, so does the time required. This is due not only to the increased total workload, but also to the system spending more time switching between threads.
+\ No newline at end of file
+diff --git a/Memory/Report.pdf b/Memory/Report.pdf
+new file mode 100644
+index 0000000..6c4759f
+--- /dev/null
++++ b/Memory/Report.pdf
+@@ -0,0 +1,57 @@
++OS Project : Memory Report
++
++陈泰杰 2019012328 & 段昌宇 2019012327
++
++Q1
++
++    Task ID  Replacement Policy  Result (ms)
++       1              FIFO             5
++       2              FIFO            425
++       3              FIFO            979
++
++Q2
++
++    Task ID  Replacement Policy  Result (ms)
++       1             CLOCK             5
++       2             CLOCK            420
++       3             CLOCK            735
++
++We see that FIFO and CLOCK Replacement Policy has almost the same result. One probably reason is
++that, the number of virtual pages is much larger than the number of physical page, thus the miss rate is
++rather high no matter replacement policy.
++CLOCL Policy is slightly better than FIFO Policy in Task 3, which implies that the LRU-liked CLOCL Policy
++can provide a better data reuse in some cases, such as matrix multiplication.
++
++Q3
++Task ID      # of Physical Page  FIFO Result (ms)  CLOCK Result (ms)
++   2                   1                 400                396
++   2                   2                 386                401
++   2                   3                 459                396
++   2                   4                 404                412
++   2                   5                 410                402
++   2                   6                 469                410
++   2                   7                 407                404
++   2                   8                 402                412
++   2                   9                 438                406
++   2                   10                406                407
++
++Either 1 or 10 physical pages is too small for Task 2. Thus, we find little change in the results
++
++Q4
++
++    Task ID  # of Thread                           CLOCK Result (ms)
++       4          10                                        100
++       4          11                                        102
++       4          12                                        112
++       4          13                                        182
++       4          14                                        254
++       4          15                                        492
++       4          16                                        711
++       4          17                                        645
++       4          18                                       1467
++       4          19                                       1300
++       4          20                                       1332
++
++As the number of threads increases, so does the time required. This is due not only to the increased total
++workload, but also to the system spending more time switching between threads.
++
+\ No newline at end of file
+diff --git a/Memory/lib/array_list.cc b/Memory/lib/array_list.cc
+index a9abedb..4f2fbd1 100644
+--- a/Memory/lib/array_list.cc
++++ b/Memory/lib/array_list.cc
+@@ -4,12 +4,21 @@
+ 
+ namespace proj3 {
+     ArrayList::ArrayList(size_t sz, MemoryManager* cur_mma, int id){
++        mma = cur_mma;
++        size = sz;
++        array_id = id;
+     }
+     int ArrayList::Read (unsigned long idx){
+         //read the value in the virtual index of 'idx' from mma's memory space
++        size_t virtual_page_id = idx/PageSize;
++        size_t offset = idx%PageSize;
++        return mma->ReadPage(array_id, virtual_page_id, offset);
+     }
+     void ArrayList::Write (unsigned long idx, int value){
+         //write 'value' in the virtual index of 'idx' into mma's memory space
++        size_t virtual_page_id = idx/PageSize;
++        size_t offset = idx%PageSize;
++        mma->WritePage(array_id, virtual_page_id, offset, value);
+     }
+     ArrayList::~ArrayList(){
+     }
+diff --git a/Memory/lib/memory_manager.cc b/Memory/lib/memory_manager.cc
+index 9b29245..90c5fbf 100644
+--- a/Memory/lib/memory_manager.cc
++++ b/Memory/lib/memory_manager.cc
+@@ -1,61 +1,298 @@
+ #include "memory_manager.h"
+ 
+ #include "array_list.h"
++#include <iostream>
++#include <fstream>
+ 
+ namespace proj3 {
+     PageFrame::PageFrame(){
+     }
+     int& PageFrame::operator[] (unsigned long idx){
+         //each page should provide random access like an array
++        return mem[idx];
+     }
+     void PageFrame::WriteDisk(std::string filename) {
+         // write page content into disk files
++        // printf("disk write : %s, mem[1] = %d\n", filename, mem[1]);
++        std::string path = ".\\disk\\";
++        auto fin = fopen((path + filename + ".txt").c_str(), "w");
++        for (int i = 0; i < PageSize; i++) {
++            fprintf(fin, "%d\n", mem[i]);
++        }
++        fclose(fin);
+     }
+     void PageFrame::ReadDisk(std::string filename) {
+         // read page content from disk files
++        // printf("disk read : %s\n", filename);
++        std::string path = ".\\disk\\";
++        auto fin = fopen((path + filename + ".txt").c_str(), "r");
++        if (fin==NULL) {
++            // printf("page not find. clear.\n");
++            Clear();
++        } else {
++            for (int i = 0; i < PageSize; i++) {
++                fscanf(fin, "%d", &mem[i]);
++            }
++            fclose(fin);
++        }
++    }
++    void PageFrame::Clear(){
++        for (int i = 0; i < PageSize; i++) mem[i] = 0;
+     }
+ 
+     PageInfo::PageInfo(){
++        holder = -1;
++        virtual_page_id = -1;
++        used = 0;
+     }
+     void PageInfo::SetInfo(int cur_holder, int cur_vid){
+         //modify the page states
+         //you can add extra parameters if needed
++        holder = cur_holder;
++        virtual_page_id = cur_vid;
+     }
+     void PageInfo::ClearInfo(){
+         //clear the page states
+         //you can add extra parameters if needed
++        holder = -1;
++        virtual_page_id = -1;
+     }
+ 
+-    int PageInfo::GetHolder(){}
+-    int PageInfo::GetVid(){}
++    int PageInfo::GetHolder(){ return holder; }
++    int PageInfo::GetVid(){ return virtual_page_id; }
+     
+ 
+     MemoryManager::MemoryManager(size_t sz){
+         //mma should build its memory space with given space size
+         //you should not allocate larger space than 'sz' (the number of physical pages) 
++        next_array_id = 0;
++        mma_sz = sz;
++        free_list = 0;
++        mem = new PageFrame*[sz];
++        page_info = new PageInfo*[sz];
++        for (int i = 0; i < sz; i++){
++            auto *a_page = new PageFrame();
++            auto *a_pageinfo = new PageInfo();
++            mem[i] = a_page;
++            page_info[i] = a_pageinfo;
++            // M_CLOCK[i] = 0;
++            CLOCK_HAND = 0;
++        }
+     }
+     MemoryManager::~MemoryManager(){
++        for (int i = 0; i < mma_sz; i++){
++            delete mem[i];
++            delete page_info[i];
++        }
++        delete[] mem;
++        delete[] page_info;
+     }
+-    void MemoryManager::PageOut(int physical_page_id){
++    void MemoryManager::PageOut(int physical_page_id, int holder = -2, int virtual_page_id = -2){
+         //swap out the physical page with the indx of 'physical_page_id out' into a disk file
++        auto a_page = mem[physical_page_id];
++        auto a_info = page_info[physical_page_id];
++        int a_holder = (holder != -2) ? holder : a_info->GetHolder();
++        int a_vid = (virtual_page_id != -2) ? virtual_page_id : a_info->GetVid();
++        if(a_holder == -1) return;
++        // page_map[a_info->GetHolder()][a_info->GetVid()] = -1;
++        auto filename = std::to_string(a_holder) + "-" + std::to_string(a_vid);
++        // printf("page out   : id %d, vid %d, phy %d\n", a_holder, a_vid, physical_page_id);
++        a_page->WriteDisk(filename);
++        // a_info->ClearInfo();
+     }
+     void MemoryManager::PageIn(int array_id, int virtual_page_id, int physical_page_id){
+         //swap the target page from the disk file into a physical page with the index of 'physical_page_id out'
++        // printf("page in    : id %d, vid %d, phy %d\n", array_id, virtual_page_id, physical_page_id);
++        auto filename = std::to_string(array_id) + "-" + std::to_string(virtual_page_id);
++        auto phy_Page = mem[physical_page_id];
++        phy_Page->ReadDisk(filename);
++        // page_info[physical_page_id]->SetInfo(array_id, virtual_page_id);
+     }
+-    void MemoryManager::PageReplace(int array_id, int virtual_page_id){
++    int MemoryManager::PageReplace(int array_id, int virtual_page_id){
+         //implement your page replacement policy here
++        // int phy_page_id = ReplacementPolicyClock();
++        return ReplacementPolicyClock();
++        // PageOut(phy_page_id);
++        // PageIn(array_id, virtual_page_id, phy_page_id);
++
++        // page_map[page_info[phy_page_id]->GetHolder()][page_info[phy_page_id]->GetVid()] = -1;
++        // page_map[array_id][virtual_page_id] = phy_page_id;
++        // page_info[phy_page_id]->SetInfo(array_id, virtual_page_id);
+     }
+     int MemoryManager::ReadPage(int array_id, int virtual_page_id, int offset){
+         // for arrayList of 'array_id', return the target value on its virtual space
++        // if(offset==0) printf("read page  : id %d, vid %d, offset %d\n", array_id, virtual_page_id, offset);
++        mma_lock.lock();
++        bool need_replace = false;
++        int old_holder, old_virtual_page_id;
++        int phy_page_id = page_map[array_id][virtual_page_id];
++        if (phy_page_id == -1) {
++            need_replace = true;
++            phy_page_id = PageReplace(array_id, virtual_page_id);
++            old_holder = page_info[phy_page_id]->GetHolder();
++            old_virtual_page_id = page_info[phy_page_id]->GetVid();
++            page_map[old_holder][old_virtual_page_id] = -1;
++            page_map[array_id][virtual_page_id] = phy_page_id;
++            page_info[phy_page_id]->SetInfo(array_id, virtual_page_id);
++            // PageOut(phy_page_id, old_holder, old_virtual_page_id);
++            // PageIn(array_id, virtual_page_id, phy_page_id);
++        }
++        phy_page_id = page_map[array_id][virtual_page_id];
++        page_info[phy_page_id]->used = 1;
++        page_info[phy_page_id]->lock();
++        mma_lock.unlock();
++        if (need_replace){
++            // printf("page out lock %d-%d\n", old_holder, old_virtual_page_id);
++            if (old_holder != -1) {
++                page_mutex[old_holder][old_virtual_page_id]->lock();
++                PageOut(phy_page_id, old_holder, old_virtual_page_id);
++                page_mutex[old_holder][old_virtual_page_id]->unlock();
++            }
++            // printf("page in  lock %d-%d\n", array_id, virtual_page_id);
++            page_mutex[array_id][virtual_page_id]->lock();
++            PageIn(array_id, virtual_page_id, phy_page_id);
++            page_mutex[array_id][virtual_page_id]->unlock();
++        }
++        PageFrame* page = mem[phy_page_id];
++        int result = (*page)[offset];
++        page_info[phy_page_id]->unlock();
++        return result;
+     }
+     void MemoryManager::WritePage(int array_id, int virtual_page_id, int offset, int value){
+         // for arrayList of 'array_id', write 'value' into the target position on its virtual space
++        // if(offset==0) printf("write page : id %d, vid %d, offset %d, value %d\n", array_id, virtual_page_id, offset, value);
++        mma_lock.lock();
++        bool need_replace = false;
++        int old_holder, old_virtual_page_id;
++        int phy_page_id = page_map[array_id][virtual_page_id];
++        if (phy_page_id == -1) {
++            need_replace = true;
++            // printf("write page need replace\n");
++            phy_page_id = PageReplace(array_id, virtual_page_id);
++            old_holder = page_info[phy_page_id]->GetHolder();
++            old_virtual_page_id = page_info[phy_page_id]->GetVid();
++            page_map[old_holder][old_virtual_page_id] = -1;
++            page_map[array_id][virtual_page_id] = phy_page_id;
++            page_info[phy_page_id]->SetInfo(array_id, virtual_page_id);
++            // PageOut(phy_page_id, old_holder, old_virtual_page_id);
++            // PageIn(array_id, virtual_page_id, phy_page_id);
++        }
++        // phy_page_id = page_map[array_id][virtual_page_id];
++        page_info[phy_page_id]->used = 1;
++        page_info[phy_page_id]->lock();
++        mma_lock.unlock();
++        if (need_replace){
++            // printf("page out lock %d-%d\n", old_holder, old_virtual_page_id);
++            if (old_holder != -1) {
++                page_mutex[old_holder][old_virtual_page_id]->lock();
++                PageOut(phy_page_id, old_holder, old_virtual_page_id);
++                page_mutex[old_holder][old_virtual_page_id]->unlock();
++            }
++            // printf("page in  lock %d-%d\n", array_id, virtual_page_id);
++            page_mutex[array_id][virtual_page_id]->lock();
++            PageIn(array_id, virtual_page_id, phy_page_id);
++            page_mutex[array_id][virtual_page_id]->unlock();
++        }
++        PageFrame* page = mem[phy_page_id];
++        (*page)[offset] = value;
++        page_info[phy_page_id]->unlock();
++    }
++    void MemoryManager::ClearPage(int array_id, int virtual_page_id){
++        int phy_Page_idx = page_map[array_id][virtual_page_id];
++        auto filename = std::to_string(array_id) + "-" + std::to_string(virtual_page_id);
++        std::string path = ".\\disk\\";
++        auto fin = fopen((path + filename + ".txt").c_str(), "w");
++        if (fin != NULL) {
++            for (int i = 0; i < PageSize; i++) {
++                fprintf(fin, "%d\n", 0);
++            }
++        }
++        fclose(fin);
++        if (phy_Page_idx != -1) {
++            page_info[phy_Page_idx]->lock();
++            mem[phy_Page_idx]->Clear();
++            page_info[phy_Page_idx]->unlock();
++        }
+     }
+     ArrayList* MemoryManager::Allocate(size_t sz){
+         // when an application requires for memory, create an ArrayList and record mappings from its virtual memory space to the physical memory space
++        mma_lock.lock();
++        int num_page = sz / PageSize;
++        if (sz % PageSize != 0) num_page ++;
++        ArrayList *a_ArrayList = new ArrayList(sz, this, next_array_id);
++        std::map<int, int> a_trans_map;
++        std::map<int, std::mutex*> a_page_mutex;
++        for (int i = 0; i < num_page; i++) {
++            a_trans_map[i] = -1;
++            a_page_mutex[i] = new std::mutex;
++        }
++        page_map[next_array_id] = a_trans_map;
++        page_mutex[next_array_id] = a_page_mutex;
++        // printf("allocate : id %d : size %d\n", next_array_id, sz);
++        next_array_id++;
++        mma_lock.unlock();
++        return a_ArrayList;
++
+     }
+     void MemoryManager::Release(ArrayList* arr){
+         // an application will call release() function when destroying its arrayList
+         // release the virtual space of the arrayList and erase the corresponding mappings
++        mma_lock.lock();
++        int array_id = arr->array_id;
++        // printf("release : %d\n", arr->array_id);
++        for (int i = 0; i < page_map[array_id].size(); i++) {
++            ClearPage(array_id, i);
++        }
++        mma_lock.unlock();
++    }
++
++    int MemoryManager::get_empty_page(){
++        int dict = free_list;
++        for (int i = 0; i < mma_sz; i++){
++            if(dict % 2 == 0) {
++                free_list += 1<<i;
++                return i;
++            }
++            dict >>= 1;
++        }
++        return -1;
++    }
++
++    int MemoryManager::ReplacementPolicyFIFO(){
++        int empty_id = get_empty_page();
++        int phy_page_id = 0;
++        if(empty_id != -1){
++            phy_page_id = empty_id;
++            Q_FIFO.push(empty_id);
++        } else {
++            phy_page_id = Q_FIFO.front();
++            // PageOut(phy_page_id);
++            Q_FIFO.pop();
++            Q_FIFO.push(phy_page_id);
++        }
++        return phy_page_id;
++    }
++
++    int MemoryManager::ReplacementPolicyClock(){
++        int empty_id = get_empty_page();
++        int phy_page_id = 0;
++        if(empty_id != -1){
++            phy_page_id = empty_id;
++        } else {
++            while(true){
++                CLOCK_HAND++;
++                if(CLOCK_HAND == mma_sz) CLOCK_HAND = 0;
++
++
++                if(page_info[CLOCK_HAND]->used == 0){
++                    phy_page_id = CLOCK_HAND;
++                    // PageOut(phy_page_id);
++                    break;
++                } else {
++                    page_info[CLOCK_HAND]->used = 0;
++                }
++            }
++        }
++        return phy_page_id;
+     }
+ } // namespce: proj3
+\ No newline at end of file
+diff --git a/Memory/lib/memory_manager.h b/Memory/lib/memory_manager.h
+index 59fcd35..f05c881 100644
+--- a/Memory/lib/memory_manager.h
++++ b/Memory/lib/memory_manager.h
+@@ -3,6 +3,8 @@
+ 
+ #include <assert.h>
+ #include <map>
++#include <mutex>
++#include <queue>
+ #include <string>
+ #include <cstdlib>
+ #include<cstdio>
+@@ -17,6 +19,7 @@ public:
+     int& operator[] (unsigned long);
+     void WriteDisk(std::string);
+     void ReadDisk(std::string);
++    void Clear();
+ private:
+     int mem[PageSize];
+ };
+@@ -28,9 +31,14 @@ public:
+     void ClearInfo();
+     int GetHolder();
+     int GetVid();
++    void lock() { page_lock.lock(); }
++    void unlock() { page_lock.unlock(); }
++    int used;
++
+ private:
+     int holder; //page holder id (array_id)
+     int virtual_page_id; // page virtual #
++    mutable std::mutex page_lock;
+     /*add your extra states here freely for implementation*/
+ 
+ };
+@@ -43,21 +51,31 @@ public:
+     MemoryManager(size_t);
+     int ReadPage(int array_id, int virtual_page_id, int offset);
+     void WritePage(int array_id, int virtual_page_id, int offset, int value);
++    void ClearPage(int array_id, int virtual_page_id);
+     ArrayList* Allocate(size_t);
+     void Release(ArrayList*);
+     ~MemoryManager();
+ private:
+     std::map<int, std::map<int, int>> page_map; // // mapping from ArrayList's virtual page # to physical page #
++    std::map<int, std::map<int, std::mutex*>> page_mutex;
+     PageFrame** mem; // physical pages, using 'PageFrame* mem' is also acceptable 
+-    PageInfo* page_info; // physical page info
+-    unsigned int* free_list;  // use bitmap implementation to identify and search for free pages
++    PageInfo** page_info; // physical page info
++    unsigned int free_list;  // use bitmap implementation to identify and search for free pages
+     int next_array_id;
+     size_t mma_sz;
+     /*add your extra states here freely for implementation*/
+ 
+     void PageIn(int array_id, int virtual_page_id, int physical_page_id);
+-    void PageOut(int physical_page_id);
+-    void PageReplace(int array_id, int virtual_page_id);
++    void PageOut(int physical_page_id, int holder, int virtual_page_id);
++    int PageReplace(int array_id, int virtual_page_id);
++
++    int get_empty_page();
++    int ReplacementPolicyFIFO();
++    int ReplacementPolicyClock();
++    std::queue<int> Q_FIFO;
++    int CLOCK_HAND;
++
++    std::mutex mma_lock;
+ };
+ 
+ }  // namespce: proj3
+diff --git a/README.md b/README.md
+index 858054e..b3acba7 100644
+--- a/README.md
++++ b/README.md
+@@ -1,12 +1,12 @@
+-# Operating System 2021 Fall
+-
+-This public repository holds the projects of this semester. See the `README`
+-in each project for details.
+-
+-## Note
+-
+-1. submit方法调整：每组提交一个diff文件到网络学堂，diff文件命名方式为学号1_学号2.diff，diff的生成方式见文档
+-2. 答疑文档：关于project 1的相关问题请大家更新到[共享文档](https://docs.qq.com/doc/DQkpGelpuTlZJaWRB)，我们会定期解答文档上的问题
+-3. 关于slow_function：在最终版本的提交中请大家打开utils中的slow_function，以保证通过所有的library test。（IMPORTANT：在library test中因为没有打开slow_function导致测试fail将被扣除50%的项目分数）
+-4. 关于item更新：为了简单我们在之前的实现中省略了对item的更新（实际系统中item和user的更新频率和方式都有差异），然而这样隐式地移除了大部分数据间依赖，因此我们要求在更新时同时更新user和item的embedding，最后输出两个EmbeddingHolder，先user后item（注意输出也需要thread-safety）。
++# Operating System 2021 Fall
++
++This public repository holds the projects of this semester. See the `README`
++in each project for details.
++
++## Note
++
++1. submit方法调整：每组提交一个diff文件到网络学堂，diff文件命名方式为学号1_学号2.diff，diff的生成方式见文档
++2. 答疑文档：关于project 1的相关问题请大家更新到[共享文档](https://docs.qq.com/doc/DQkpGelpuTlZJaWRB)，我们会定期解答文档上的问题
++3. 关于slow_function：在最终版本的提交中请大家打开utils中的slow_function，以保证通过所有的library test。（IMPORTANT：在library test中因为没有打开slow_function导致测试fail将被扣除50%的项目分数）
++4. 关于item更新：为了简单我们在之前的实现中省略了对item的更新（实际系统中item和user的更新频率和方式都有差异），然而这样隐式地移除了大部分数据间依赖，因此我们要求在更新时同时更新user和item的embedding，最后输出两个EmbeddingHolder，先user后item（注意输出也需要thread-safety）。
+ 5. 关于大家在project 1中问的比较多的问题，我们这里统一回复一下：一是前两题的正确性，由于q1 q2指令之间没有执行依赖，因此最后的答案可能有多种，大家只要在保证thread safty的前提下得出任意一种答案即可通过测试；二是关于efficiency，我们会统计所有人的完成时间，排名后30%且慢于我们的参考实现（基础的并行实现，运行时间不公开）的提交我们会酌情扣分；三是关于test case，我们在这个project中不会提供auto test和benchmark，请大家自行设计case来验证代码的正确性
+\ No newline at end of file
+diff --git a/Thread-1/.bazeliskrc b/Thread-1/.bazeliskrc
+index f81d3f7..2159662 100644
+--- a/Thread-1/.bazeliskrc
++++ b/Thread-1/.bazeliskrc
+@@ -1 +1 @@
+-USE_BAZEL_VERSION=4.2.1
++USE_BAZEL_VERSION=4.2.1
+diff --git a/Thread-1/.gitignore b/Thread-1/.gitignore
+new file mode 100644
+index 0000000..772258b
+--- /dev/null
++++ b/Thread-1/.gitignore
+@@ -0,0 +1,6 @@
++bazel-bin
++bazel-out
++bazel-testlogs
++bazel-Thread-1
++
++*.txt
+diff --git a/Thread-1/.vscode/settings.json b/Thread-1/.vscode/settings.json
+new file mode 100644
+index 0000000..431dd9e
+--- /dev/null
++++ b/Thread-1/.vscode/settings.json
+@@ -0,0 +1,78 @@
++{
++    "files.associations": {
++        "array": "cpp",
++        "vector": "cpp",
++        "xstring": "cpp",
++        "xutility": "cpp",
++        "cmath": "cpp",
++        "algorithm": "cpp",
++        "atomic": "cpp",
++        "bit": "cpp",
++        "cctype": "cpp",
++        "charconv": "cpp",
++        "chrono": "cpp",
++        "clocale": "cpp",
++        "compare": "cpp",
++        "concepts": "cpp",
++        "cstddef": "cpp",
++        "cstdint": "cpp",
++        "cstdio": "cpp",
++        "cstdlib": "cpp",
++        "cstring": "cpp",
++        "ctime": "cpp",
++        "cwchar": "cpp",
++        "exception": "cpp",
++        "format": "cpp",
++        "forward_list": "cpp",
++        "fstream": "cpp",
++        "initializer_list": "cpp",
++        "iomanip": "cpp",
++        "ios": "cpp",
++        "iosfwd": "cpp",
++        "iostream": "cpp",
++        "istream": "cpp",
++        "iterator": "cpp",
++        "limits": "cpp",
++        "locale": "cpp",
++        "map": "cpp",
++        "memory": "cpp",
++        "mutex": "cpp",
++        "new": "cpp",
++        "optional": "cpp",
++        "ostream": "cpp",
++        "ratio": "cpp",
++        "sstream": "cpp",
++        "stdexcept": "cpp",
++        "stop_token": "cpp",
++        "streambuf": "cpp",
++        "string": "cpp",
++        "system_error": "cpp",
++        "thread": "cpp",
++        "tuple": "cpp",
++        "type_traits": "cpp",
++        "typeinfo": "cpp",
++        "utility": "cpp",
++        "xfacet": "cpp",
++        "xiosbase": "cpp",
++        "xlocale": "cpp",
++        "xlocbuf": "cpp",
++        "xlocinfo": "cpp",
++        "xlocmes": "cpp",
++        "xlocmon": "cpp",
++        "xlocnum": "cpp",
++        "xloctime": "cpp",
++        "xmemory": "cpp",
++        "xstddef": "cpp",
++        "xtr1common": "cpp",
++        "xtree": "cpp",
++        "cinttypes": "cpp",
++        "condition_variable": "cpp",
++        "functional": "cpp",
++        "list": "cpp",
++        "regex": "cpp",
++        "set": "cpp",
++        "unordered_map": "cpp",
++        "unordered_set": "cpp",
++        "xhash": "cpp"
++    }
++}
+\ No newline at end of file
+diff --git a/Thread-1/2019012327_2019012328.diff b/Thread-1/2019012327_2019012328.diff
+new file mode 100644
+index 0000000..1ebc4ec
+--- /dev/null
++++ b/Thread-1/2019012327_2019012328.diff
+@@ -0,0 +1,1403 @@
++diff --git a/Thread-1/.gitignore b/Thread-1/.gitignore
++new file mode 100644
++index 0000000..772258b
++--- /dev/null
+++++ b/Thread-1/.gitignore
++@@ -0,0 +1,6 @@
+++bazel-bin
+++bazel-out
+++bazel-testlogs
+++bazel-Thread-1
+++
+++*.txt
++diff --git a/Thread-1/.vscode/settings.json b/Thread-1/.vscode/settings.json
++new file mode 100644
++index 0000000..431dd9e
++--- /dev/null
+++++ b/Thread-1/.vscode/settings.json
++@@ -0,0 +1,78 @@
+++{
+++    "files.associations": {
+++        "array": "cpp",
+++        "vector": "cpp",
+++        "xstring": "cpp",
+++        "xutility": "cpp",
+++        "cmath": "cpp",
+++        "algorithm": "cpp",
+++        "atomic": "cpp",
+++        "bit": "cpp",
+++        "cctype": "cpp",
+++        "charconv": "cpp",
+++        "chrono": "cpp",
+++        "clocale": "cpp",
+++        "compare": "cpp",
+++        "concepts": "cpp",
+++        "cstddef": "cpp",
+++        "cstdint": "cpp",
+++        "cstdio": "cpp",
+++        "cstdlib": "cpp",
+++        "cstring": "cpp",
+++        "ctime": "cpp",
+++        "cwchar": "cpp",
+++        "exception": "cpp",
+++        "format": "cpp",
+++        "forward_list": "cpp",
+++        "fstream": "cpp",
+++        "initializer_list": "cpp",
+++        "iomanip": "cpp",
+++        "ios": "cpp",
+++        "iosfwd": "cpp",
+++        "iostream": "cpp",
+++        "istream": "cpp",
+++        "iterator": "cpp",
+++        "limits": "cpp",
+++        "locale": "cpp",
+++        "map": "cpp",
+++        "memory": "cpp",
+++        "mutex": "cpp",
+++        "new": "cpp",
+++        "optional": "cpp",
+++        "ostream": "cpp",
+++        "ratio": "cpp",
+++        "sstream": "cpp",
+++        "stdexcept": "cpp",
+++        "stop_token": "cpp",
+++        "streambuf": "cpp",
+++        "string": "cpp",
+++        "system_error": "cpp",
+++        "thread": "cpp",
+++        "tuple": "cpp",
+++        "type_traits": "cpp",
+++        "typeinfo": "cpp",
+++        "utility": "cpp",
+++        "xfacet": "cpp",
+++        "xiosbase": "cpp",
+++        "xlocale": "cpp",
+++        "xlocbuf": "cpp",
+++        "xlocinfo": "cpp",
+++        "xlocmes": "cpp",
+++        "xlocmon": "cpp",
+++        "xlocnum": "cpp",
+++        "xloctime": "cpp",
+++        "xmemory": "cpp",
+++        "xstddef": "cpp",
+++        "xtr1common": "cpp",
+++        "xtree": "cpp",
+++        "cinttypes": "cpp",
+++        "condition_variable": "cpp",
+++        "functional": "cpp",
+++        "list": "cpp",
+++        "regex": "cpp",
+++        "set": "cpp",
+++        "unordered_map": "cpp",
+++        "unordered_set": "cpp",
+++        "xhash": "cpp"
+++    }
+++}
++\ No newline at end of file
++diff --git a/Thread-1/BUILD b/Thread-1/BUILD
++index 28f4114..94be188 100644
++--- a/Thread-1/BUILD
+++++ b/Thread-1/BUILD
++@@ -1,5 +1,21 @@
++ ##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
++ 
+++cc_binary(
+++    name = "q0_my",
+++    srcs = [
+++        "q0_my.cc"
+++            ],
+++    deps = [
+++        "//lib:instruction_lib",
+++        "//lib:utils_lib",
+++        "//lib:server_lib"
+++    ],
+++    copts = [
+++        "-std=c++11",
+++    ],
+++    data = glob(["data/q0*"]),
+++)
+++
++ cc_binary(
++     name = "q0",
++     srcs = [
++@@ -29,6 +45,16 @@ cc_binary(
++     srcs = [
++         "q1.cc"
++             ],
+++    deps = [
+++        "//lib:instruction_lib",
+++        "//lib:utils_lib",
+++        "//lib:server_lib"
+++    ],
+++    copts = [
+++        "-std=c++11",
+++    ],
+++    linkopts = ["-lpthread"],
+++    data = glob(["data/q1*"]),
++ )
++ 
++ cc_binary(
++@@ -36,6 +62,16 @@ cc_binary(
++     srcs = [
++         "q2.cc"
++             ],
+++    deps = [
+++        "//lib:instruction_lib",
+++        "//lib:utils_lib",
+++        "//lib:server_lib"
+++    ],
+++    copts = [
+++        "-std=c++11",
+++    ],
+++    linkopts = ["-lpthread"],
+++    data = glob(["data/q2*"]),
++ )
++ 
++ cc_binary(
++@@ -43,6 +79,33 @@ cc_binary(
++     srcs = [
++         "q3.cc"
++             ],
+++    deps = [
+++        "//lib:instruction_lib",
+++        "//lib:utils_lib",
+++        "//lib:server_lib"
+++    ],
+++    copts = [
+++        "-std=c++11",
+++    ],
+++    linkopts = ["-lpthread"],
+++    data = glob(["data/q3*"]),
+++)
+++
+++cc_binary(
+++    name = "q4",
+++    srcs = [
+++        "q4.cc"
+++            ],
+++    deps = [
+++        "//lib:instruction_lib",
+++        "//lib:utils_lib",
+++        "//lib:server_lib"
+++    ],
+++    copts = [
+++        "-std=c++11",
+++    ],
+++    linkopts = ["-lpthread"],
+++    data = glob(["data/q4*"]),
++ )
++ 
++ cc_test(
++diff --git a/Thread-1/README.md b/Thread-1/README.md
++index 52f2b01..8fd28b4 100644
++--- a/Thread-1/README.md
+++++ b/Thread-1/README.md
++@@ -1,28 +1,16 @@
++ # Project 1: Multi-thread Programming
++ 
++-This project uses a (oversimplified) machine learning inference system to allow
++-you to put some basic OS concepts into practice and learn how system-level
++-optimizations help improve performance. 
++-
++-Suppose you are hired by a company to improve the efficiency of the optimization
++-process of a recommender system. This recommender system represents the users
++-and items (i.e. goods offered by the E-commerce platform) as vectors, and uses
++-these embedding vectors to calculate the semantic similarities between
++-user-user, user-item and item-item pairs. Since you are a system expert, the
++-company hopes you can improve the efficiency of the embedding maintenance of
++-the recommender system.
+++This project uses a (oversimplified) machine learning inference system to allow you to put some basic OS concepts into practice and learn how system-level optimizations help improve performance.
+++
+++Suppose you are hired by a company to improve the efficiency of the optimization  process of a recommender system. This recommender system represents the users and items (i.e. goods offered by the E-commerce platform) as vectors, and uses these embedding vectors to calculate the semantic similarities between user-user, user-item and item-item pairs. Since you are a system expert, the company hopes you can improve the efficiency of the embedding maintenance of the recommender system.
++ 
++ ## Introduction
++ 
++-The AI algorithm engineers of the company explain the basics of the setup to
++-you, as follows.
+++The AI algorithm engineers of the company explain the basics of the setup to you, as follows.
++ 
++ ### Embedding Vectors
++ 
++-Embedding vectors represent the entities (either a user or an item). These
++-vectors are stored as rows in an embedding matrix. These embedding vectors have
++-a property that the product of two embedding vectors (maybe after some
++-processing) indicates the similarity of the two corresponding entities.
+++Embedding vectors represent the entities (either a user or an item). These vectors are stored as rows in an embedding matrix. These embedding vectors have a property that the product of two embedding vectors (maybe after some processing) indicates the similarity of the two corresponding entities.
++ 
++ ```bash
++ ...
++@@ -39,23 +27,13 @@ Three important operations on the embedding vectors are
++ 2. Updating the vectors after observing user activities (`update`).
++ 3. Recommend an item to a user from a list of items.
++ 
++-The embedding initialization is difficult, as there is few information about a
++-new entity. For a new user, a simple method is to randomly initialize the
++-embedding and run some cold start procedure (e.g. recommending some popular
++-item) to probe the user's interest. For a new item, we may expose them to highly
++-active users.
+++The embedding initialization is difficult, as there is few information about a new entity. For a new user, a simple method is to randomly initialize the embedding and run some cold start procedure (e.g. recommending some popular item) to probe the user's interest. For a new item, we may expose them to highly active users.
++ 
++-After observing some user activities, we gather information about the users'
++-interest and items' popularity. To encode this information into the embeddings,
++-we need to update the embedding vectors with some optimization method (e.g.
++-gradient descent) where we pull in the distance between similar entities and
++-push away those dissimilar entities.
+++After observing some user activities, we gather information about the users' interest and items' popularity. To encode this information into the embeddings, we need to update the embedding vectors with some optimization method (e.g. gradient descent) where we pull in the distance between similar entities and push away those dissimilar entities.
++ 
++ ## Embedding Holder
++ 
++-In this project, we utilize `EmbeddingHolder` (a collection of embeddings) as the database to store 
++-and update the company's data. Initially, we read data from `*.in` to create two basic `EmbeddingHolder` for **users**
++-and **items** respectively; our task is to update this database according to the incoming `Instruction`s.
+++In this project, we utilize `EmbeddingHolder` (a collection of embeddings) as the database to store and update the company's data. Initially, we read data from `*.in` to create two basic `EmbeddingHolder` for **users** and **items** respectively; our task is to update this database according to the incoming `Instruction`s.
++ 
++ ### Codebase
++ 
++@@ -88,35 +66,21 @@ The project directory looks like this:
++ 
++ ```
++ 
++-The source files in `lib/` implements the basic interfaces of the system. The
++-`lib/embedding.h` contains the main interface of the embedding matrix data
++-holder. The mentioned operations on the embedding matrix are implemented in
++-`lib/model.h`. `Instruction` is in `lib/instruction.h`. The utilities are in `lib/utils.h`.
++-You find these files belongs to the AI team and you should not 
++-modify them, and do your optimization all from the system level. 
+++The source files in `lib/` implements the basic interfaces of the system. The `lib/embedding.h` contains the main interface of the embedding matrix data holder. The mentioned operations on the embedding matrix are implemented in `lib/model.h`. `Instruction` is in `lib/instruction.h`. The utilities are in `lib/utils.h`. You find these files belongs to the AI team and you should not modify them, and do your optimization all from the system level.
++ 
++-The entrance of the program is in `q*.cc`.
++-You can modify everything in this project, except those tests in `lib`.
++-You should ensure that after your modification, it still passes the tests in `lib`.
+++The entrance of the program is in `q*.cc`. You can modify everything in this project, except those tests in `lib`. You should ensure that after your modification, it still passes the tests in `lib`.
++ 
++-The project builds with the bazel build system, as we discussed in the
++-discussion session. You should install bazel following the online documents and
++-read the BUILD and WORKSPACE files carefully to understand the dependencies and
++-code structure. 
+++The project builds with the bazel build system, as we discussed in the discussion session. You should install bazel following the online documents and read the BUILD and WORKSPACE files carefully to understand the dependencies and code structure.
++ 
++ ### Unit testing
++ 
++-Writing unit tests is an essential way to build and optimize system programs
++-and thus we would require that you include unit tests for all major functions
++-you write for your code. 
+++Writing unit tests is an essential way to build and optimize system programs and thus we would require that you include unit tests for all major functions you write for your code.
++ 
++-We have provided test cases in the libraries for you as examples. Please do not
++-modify these unit tests.  You can modify library code, and add your own test cases
++-to the library test, but make sure that after your modification, our provided test cases still pass.
+++We have provided test cases in the libraries for you as examples. Please do not modify these unit tests.  You can modify library code, and add your own test cases to the library test, but make sure that after your modification, our provided test cases still pass.
++ 
++ ### Format Checking
++ 
++- In this project we test the standard output stream for final grading, so make sure that you output the correct answer as you expect. We provide a format checking script in `format.cc`. You can modify it to test all output results of your submission. Run the format checking script after building it like this:
+++In this project we test the standard output stream for final grading, so make sure that you output the correct answer as you expect. We provide a format checking script in `format.cc`. You can modify it to test all output results of your submission. Run the format checking script after building it like this:
++ 
++ ```bash
++ bazel-bin/q0 |grep [OUTPUT] > format.out && bazel-bin/format
++@@ -124,25 +88,13 @@ bazel-bin/q0 |grep [OUTPUT] > format.out && bazel-bin/format
++ 
++ ### Instruction Files
++ 
++-The workload of the company comes as `Instruction`s with `order` and `payload`
++-fields. Both fields are integers. In this project, the `Instruction.order` is
++-either 0, 1 or 2, indicating the task of "init", "update" or "recommend". The workflow
++-of different task types are different as described bellow.
++-
++-- For **“init”**, you should first create a new embedding. The payload is a
++-  list of existing embedding indeces in the input matrix (`EmbeddingHolder`) that
++-  are used for cold  start (downstream applications may use them for interest
++-  probing). You should add this new  embedding into the `EmbeddingHolder` using
++-  `append`. Then you need to call `cold_start`  for each of the embedding
++-  indeces. Note that after `cold_start`, **only user embeddings are updated**
++-  (see `q0.cc` for example).
++-
++-- For **“update”**, the payload is `[user_idx, item_idx, label, (iter_idx)]`. You should invoke
++-  the `calc_gradient` on these two embedding vectors from `lib/model.h` and then
++-  call `update_embedding` from `lib/embedding.h` **on both the user and the items**
++-  (see`project/embedding.cc:run_q0` for example). The `iter_idx` indicates the
++-  epoch number of current update, see Task-3 for information.
++-- For **"recommend"**, the the payload is `[user_idx, iter_idx, item_idx1, item_idx2, item_idx3, item_idx4, ...]`. You should invoke the `recommend` on these embedding vectors from `lib/model.h` and then output the result. 
+++The workload of the company comes as `Instruction`s with `order` and `payload` fields. Both fields are integers. In this project, the `Instruction.order` is either 0, 1 or 2, indicating the task of "init", "update" or "recommend". The workflow of different task types are different as described bellow.
+++
+++- For **“init”**, you should first create a new embedding. The payload is a list of existing embedding indices in the input matrix (`EmbeddingHolder`) that are used for cold  start (downstream applications may use them for interest probing). You should add this new  embedding into the `EmbeddingHolder` using `append`. Then you need to call `cold_start`  for each of the embedding indices. Note that after `cold_start`, **only user embeddings are updated** (see `q0.cc` for example).
+++
+++- For **“update”**, the payload is `[user_idx, item_idx, label, (iter_idx)]`. You should invoke the `calc_gradient` on these two embedding vectors from `lib/model.h` and then call `update_embedding` from `lib/embedding.h` **on both the user and the items** (see`project/embedding.cc:run_q0` for example). The `iter_idx` indicates the epoch number of current update, see Task-3 for information.
+++
+++- For **"recommend"**, the the payload is `[user_idx, iter_idx, item_idx1, item_idx2, item_idx3, item_idx4, ...]`. You should invoke the `recommend` on these embedding vectors from `lib/model.h` and then output the result.
++ 
++ Note that NO provided functions are thread safe on their own.
++ 
++@@ -150,8 +102,7 @@ Note that NO provided functions are thread safe on their own.
++ 
++ For the following tasks, you should minimize duplicate code.  If there are code sharing among the following tasks, you should extract as much shared code as possible into separate `.h` and `.cc` library files, but not put everything into a single `.cc` file.  You should create your own `_test.cc` file for your library code.  20% of this project grade are reserved for good coding style (including the completeness of your own test cases).  
++ 
++-We recommend you to use the standard C++11 Threading to implement multi-threading.  However, please feel free to use any other
++-C++ threading library (such as `pthread`, or Intel's TBB to do the following task).  If you need external libraries, please include them in the `WORKSPACE` file and make them to install and build automatically.  The TAs are not obliged to manually install any libraries on the grading machine. 
+++We recommend you to use the standard C++11 Threading to implement multi-threading.  However, please feel free to use any other C++ threading library (such as `pthread`, or Intel's TBB to do the following task).  If you need external libraries, please include them in the `WORKSPACE` file and make them to install and build automatically.  The TAs are not obliged to manually install any libraries on the grading machine.
++ 
++ ## Submission instructions
++ 
++@@ -165,55 +116,37 @@ To test whether your `.diff` works, clone a new repo and call `git apply ${STUDE
++ 
++ ## Task-0: Play with bazel build, the code and sanity check
++ 
++-In this task, you need to understand the project structure, read the `q0.cc` code and 
++-the `project/BUILD` files, install bazel, build and run the provided sample program and tests. 
++-This task is not included for grading.  Just provided as an example for you to read.  If you need more information
++-on the Bazel build system, please refer to
++-https://docs.bazel.build/versions/main/tutorial/cpp.html
++-
+++In this task, you need to understand the project structure, read the `q0.cc` code and the `project/BUILD` files, install bazel, build and run the provided sample program and tests. This task is not included for grading.  Just provided as an example for you to read.  If you need more information on the Bazel build system, please refer to [https://docs.bazel.build/versions/main/tutorial/cpp.html]()
++ 
++-> **_NOTE:_** You can take this task's code as an example and benchmark for following tasks, 
++-but do not copy and paste this unoptimized code! Otherwise you will get penalized. Task-0 is not included in the final grading.
+++> **_NOTE:_** You can take this task's code as an example and benchmark for following tasks, but do not copy and paste this unoptimized code! Otherwise you will get penalized. Task-0 is not included in the final grading.
++ 
++ > **_NOTE:_** Your code is not required to output exactly the same answer as `q0.cc`. You just need to guarantee your code is thread-safe.
++ 
++ ## Task-1: Supporting concurrent users
++ 
++-At the beginning, the recommender system is new and has very few items or users.
++-Fortunately, the company attracts more and more users.  Thus, we need to modify the system
++-so that when multiple users come in at the same time, and send `Instruction`s concurrently
++-the system could behave correctly and efficiently. 
+++At the beginning, the recommender system is new and has very few items or users. Fortunately, the company attracts more and more users.  Thus, we need to modify the system so that when multiple users come in at the same time, and send `Instruction`s concurrently the system could behave correctly and efficiently.
++ 
++ **ToDo:**
++ 
++-In this task, your job is to process an `Instruction` set of "init" and "update". Considering that 
++-`cal_gradient`  is time-consuming (10s of seconds running time, mostly waiting for I/O), 
++-you should think of handling multiple `Instruction`s concurrently. Design 
++-a synchronization mechanism using locks to guarantee that your codes are thread-safe.  Output your final 
++-`EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()`.
+++In this task, your job is to process an `Instruction` set of "init" and "update". Considering that `cal_gradient`  is time-consuming (10s of seconds running time, mostly waiting for I/O), you should think of handling multiple `Instruction`s concurrently. Design a synchronization mechanism using locks to guarantee that your codes are thread-safe.  Output your final `EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()`.
++ 
++-Again, note that NO provided functions are thread safe on their own. Feel free to modify these functions
++-in the `lib/` directory, but do not modify existing test cases there (you can add your own test cases).
+++Again, note that NO provided functions are thread safe on their own. Feel free to modify these functions in the `lib/` directory, but do not modify existing test cases there (you can add your own test cases).
++ 
++ **Grading:**
++ 
++-You will be graded by both the correctness and efficiency of your calculation 
++-under heavy and arbitrary mixtures of incoming `Instruction`s.
+++You will be graded by both the correctness and efficiency of your calculation under heavy and arbitrary mixtures of incoming `Instruction`s.
++ 
++-> **_NOTE:_** In this task, a single `Instruction` only runs in a single thread (i.e. no internal parallelism within an `Instruction`). 
+++> **_NOTE:_** In this task, a single `Instruction` only runs in a single thread (i.e. no internal parallelism within an `Instruction`).
++ 
++ > **_NOTE:_** The correctness means thread-safety. We allow any order of updates, as long as it is thread-safe.
++ 
++ ## Task-2: Accelerate "Init" task through concurrency
++ 
++-Now the engineers find that it is still too slow to conduct each "init" task, as each of the task need to read multiple 
++-embeddings to perform the init.  
++-They hope to read and use these embeddings concurrently so shorten the time required to call a single "init".
++-We can further speed up the process by building an internally-concurrent "init" function.
+++Now the engineers find that it is still too slow to conduct each "init" task, as each of the task need to read multiple embeddings to perform the init. They hope to read and use these embeddings concurrently so shorten the time required to call a single "init". We can further speed up the process by building an internally-concurrent "init" function.
++ 
++ **ToDo:**
++ 
++-In this task, your job is to process an `Instruction` set of "init" and "update". You can start with your codes in Task-1. Try to conduct multiple `cold_start`  in parallel and update the newly initialized embedding collectively without violating **thread-safety**.  Output your final `EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()` function.  Note that you still need to support multiple concurrent users. 
+++In this task, your job is to process an `Instruction` set of "init" and "update". You can start with your codes in Task-1. Try to conduct multiple `cold_start`  in parallel and update the newly initialized embedding collectively without violating **thread-safety**.  Output your final `EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()` function.  Note that you still need to support multiple concurrent users.
++ 
++ **Grading:**
++ 
++@@ -221,11 +154,7 @@ You will be graded by the correctness and efficiency of your calculation.
++ 
++ ## Task-3: Supporting incremental embedding updates
++ 
++-Now the recommender system has many users and items. Everyday, the system
++-observes user activities and use them to update the embedding matrix for better
++-recommendation performance. In this task, you will need to implement the
++-updating process of the embedding matrix. The algorithm engineers of the company come up with a "genius" optimization
++-algorithm. This algorithm requires the optimizer to update the embeddings iteratively, and they call each iteration an *epoch*. This innovative epoch-based optimization differs from existing methods in that the calculation of later epochs depends on the results of earlier epochs. In this task, your job is to support this epoch-based update.
+++Now the recommender system has many users and items. Everyday, the system observes user activities and use them to update the embedding matrix for better recommendation performance. In this task, you will need to implement the updating process of the embedding matrix. The algorithm engineers of the company come up with a "genius" optimization algorithm. This algorithm requires the optimizer to update the embeddings iteratively, and they call each iteration an *epoch*. This innovative epoch-based optimization differs from existing methods in that the calculation of later epochs depends on the results of earlier epochs. In this task, your job is to support this epoch-based update.
++ 
++ **ToDo:**
++ 
++@@ -237,12 +166,7 @@ You will be graded by the correctness and efficiency of your calculation.
++ 
++ ## Task-4: Doing recommendation while updating the embedding
++ 
++-Except the maintenance of the recommender system, the company also needs  to generate recommendations for each user using the 
++-existing database. The recommendation should depend on the current version of data and not disturb the maintenance of the 
++-recommender system.  Note that when an embedding update is going on, you can not at the same time read the embedding, as the 
++-embedding update is not an atomic operation.  As the embedding update can take a long time, and can be quite frequent, 
++-you need to figure out a way to allow recommendation to execute without getting blocked by the updates, and at the same time
++-allowing the update to happen, and being able to use some quite recent updated embedding values for recommendation.  
+++Except the maintenance of the recommender system, the company also needs  to generate recommendations for each user using the existing database. The recommendation should depend on the current version of data and not disturb the maintenance of the recommender system.  Note that when an embedding update is going on, you can not at the same time read the embedding, as the embedding update is not an atomic operation.  As the embedding update can take a long time, and can be quite frequent, you need to figure out a way to allow recommendation to execute without getting blocked by the updates, and at the same time allowing the update to happen, and being able to use some quite recent updated embedding values for recommendation.  
++ 
++ **ToDo:**
++ 
++diff --git a/Thread-1/README.pdf b/Thread-1/README.pdf
++new file mode 100644
++index 0000000..35cb1d9
++diff --git a/Thread-1/lib/BUILD b/Thread-1/lib/BUILD
++index 07eb930..7fca563 100644
++--- a/Thread-1/lib/BUILD
+++++ b/Thread-1/lib/BUILD
++@@ -1,5 +1,35 @@
++ ##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
++ 
+++cc_library(
+++    name = "server_lib",
+++    srcs = [
+++        "server.cc",
+++        ],
+++    hdrs = [
+++        "server.h",
+++        ],
+++    deps = [
+++        ":embedding_lib",
+++		":instruction_lib",
+++        ":model_lib",
+++        ":utils_lib",
+++    ],
+++	visibility = [
+++		"//visibility:public",
+++	],
+++)
+++
+++cc_test(
+++  name = "server_lib_test",
+++  size = "small",
+++  srcs = ["server_test.cc"],
+++  deps = [
+++      "@gtest//:gtest_main",
+++	  ":server_lib",
+++      ":embedding_lib",
+++      ],
+++)
+++
++ cc_library(
++     name = "utils_lib",
++     srcs = [
++diff --git a/Thread-1/lib/embedding.cc b/Thread-1/lib/embedding.cc
++index 966a76d..892c77c 100644
++--- a/Thread-1/lib/embedding.cc
+++++ b/Thread-1/lib/embedding.cc
++@@ -1,7 +1,9 @@
+++
++ #include <fstream>
++ #include <iostream>
++ #include <sstream>
++ #include <cmath>
+++#include <mutex>
++ 
++ #include "utils.h"
++ #include "embedding.h"
++@@ -23,11 +25,22 @@ Embedding::Embedding(int length, double* data) {
++ }
++ 
++ Embedding::Embedding(Embedding* origin) {
+++    std::lock_guard<std::mutex> lock(origin->mux);
++ 	int length = origin->get_length();
++     embbedingAssert(length > 0, "Non-positive length encountered!", NON_POSITIVE_LEN);
++     double* oldData = origin->get_data();
++     double* newData = new double[length];
++-    for(int i = 0; i<length; i++)newData[i] = oldData[i];
+++    for(int i = 0; i<length; i++) newData[i] = oldData[i];
+++    this->length = length;
+++    this->data = newData;
+++}
+++
+++Embedding::Embedding(Embedding const& origin) {
+++	int length = origin.length;
+++    embbedingAssert(length > 0, "Non-positive length encountered!", NON_POSITIVE_LEN);
+++    double* oldData = origin.data;
+++    double* newData = new double[length];
+++    for(int i = 0; i<length; i++) newData[i] = oldData[i];
++     this->length = length;
++     this->data = newData;
++ }
++@@ -58,6 +71,8 @@ void Embedding::update(Embedding* gradient, double stepsize) {
++ }
++ 
++ std::string Embedding::to_string() {
+++    std::lock_guard<std::mutex> lock(this->mux);
+++
++     std::string res;
++     for (int i = 0; i < this->length; ++i) {
++         if (i > 0) res += ',';
++@@ -71,7 +86,7 @@ void Embedding::write_to_stdout() {
++     std::cout << prefix << this->to_string() << '\n';
++ }
++ 
++-Embedding Embedding::operator+(const Embedding &another) {
+++Embedding Embedding::operator+(Embedding &another) {
++     double* data = new double[this->length];
++     for (int i = 0; i < this->length; ++i) {
++         data[i] = this->data[i] + another.data[i];
++@@ -87,7 +102,7 @@ Embedding Embedding::operator+(const double value) {
++     return Embedding(this->length, data);
++ }
++ 
++-Embedding Embedding::operator-(const Embedding &another) {
+++Embedding Embedding::operator-(Embedding &another) {
++     double* data = new double[this->length];
++     for (int i = 0; i < this->length; ++i) {
++         data[i] = this->data[i] - another.data[i];
++@@ -103,7 +118,7 @@ Embedding Embedding::operator-(const double value) {
++     return Embedding(this->length, data);
++ }
++ 
++-Embedding Embedding::operator*(const Embedding &another) {
+++Embedding Embedding::operator*(Embedding &another) {
++     double* data = new double[this->length];
++     for (int i = 0; i < this->length; ++i) {
++         data[i] = this->data[i] * another.data[i];
++@@ -119,7 +134,7 @@ Embedding Embedding::operator*(const double value) {
++     return Embedding(this->length, data);
++ }
++ 
++-Embedding Embedding::operator/(const Embedding &another) {
+++Embedding Embedding::operator/(Embedding &another) {
++     double* data = new double[this->length];
++     for (int i = 0; i < this->length; ++i) {
++         data[i] = this->data[i] / another.data[i];
++@@ -135,7 +150,7 @@ Embedding Embedding::operator/(const double value) {
++     return Embedding(this->length, data);
++ }
++ 
++-bool Embedding::operator==(const Embedding &another) {
+++bool Embedding::operator==(Embedding &another) {
++     for (int i = 0; i < this->length; ++i) {
++         if(fabs(this->data[i]-another.data[i])>1.0e-6)return false;
++     }
++@@ -174,20 +189,26 @@ EmbeddingMatrix EmbeddingHolder::read(std::string filename) {
++ }
++ 
++ int EmbeddingHolder::append(Embedding* data) {
+++    std::lock_guard<std::mutex> lock(this->mux);
+++
++     int indx = this->emb_matx.size();
++     embbedingAssert(
++-        data->get_length() == this->emb_matx[0]->get_length(),
+++        indx == 0 | data->get_length() == this->emb_matx[0]->get_length(),
++         "Embedding to append has a different length!", LEN_MISMATCH
++     );
++     this->emb_matx.push_back(data);
+++
+++    this->cv.notify_all();
++     return indx;
++ }
++ 
++ void EmbeddingHolder::write(std::string filename) {
+++    std::lock_guard<std::mutex> lock(this->mux);
+++
++     std::ofstream ofs(filename);
++     if (ofs.is_open()) {
++         for (Embedding* emb: this->emb_matx) {
++-            ofs << emb->to_string() << '\n';
+++            ofs << emb->to_string() + '\n';
++         }
++         ofs.close();
++     } else {
++@@ -196,9 +217,11 @@ void EmbeddingHolder::write(std::string filename) {
++ }
++ 
++ void EmbeddingHolder::write_to_stdout() {
+++    std::lock_guard<std::mutex> lock(this->mux);
+++
++     std::string prefix("[OUTPUT]");
++     for (Embedding* emb: this->emb_matx) {
++-        std::cout << prefix << emb->to_string() << '\n';
+++        std::cout << prefix + emb->to_string() + '\n';
++     }
++ }
++ 
++@@ -208,16 +231,45 @@ EmbeddingHolder::~EmbeddingHolder() {
++     }
++ }
++ 
++-void EmbeddingHolder::update_embedding(
++-        int idx, EmbeddingGradient* gradient, double stepsize) {
++-    this->emb_matx[idx]->update(gradient, stepsize);
+++void EmbeddingHolder::update_embedding(int idx, EmbeddingGradient* gradient, double stepsize) {
+++    Embedding* emb = this->get_embedding(idx);
+++    emb->lock();
+++    emb->update(gradient, stepsize);
+++    emb->unlock();
++ }
++ 
++-bool EmbeddingHolder::operator==(const EmbeddingHolder &another) {
++-    if (this->get_n_embeddings() != another.emb_matx.size())
+++Embedding* EmbeddingHolder::get_embedding(int idx) {
+++    std::unique_lock<std::mutex> lock(this->mux);
+++
+++    while (idx >= this->emb_matx.size()) {
+++        this->cv.wait(lock);
+++    }
+++    return this->emb_matx[idx];
+++}
+++
+++unsigned int EmbeddingHolder::get_n_embeddings() {
+++    std::lock_guard<std::mutex> lock(this->mux);
+++
+++    return this->emb_matx.size();
+++}
+++
+++int EmbeddingHolder::get_emb_length() {
+++    std::lock_guard<std::mutex> lock(this->mux);
+++
+++    return this->emb_matx.empty()? 0: this->emb_matx[0]->get_length();
+++}
+++
+++bool EmbeddingHolder::operator==(EmbeddingHolder &another) {
+++    std::lock_guard<std::mutex> lock(this->mux);
+++    std::lock_guard<std::mutex> lock1(another.mux);
+++
+++    if (this->emb_matx.size() != another.emb_matx.size())
++         return false;
+++
++     for (int i = 0; i < (int)this->emb_matx.size(); ++i) {
++-        if(!(*(this->emb_matx[i]) == *(another.get_embedding(i)))){
+++        std::lock_guard<std::mutex> lock2(this->emb_matx[i]->mux);
+++        std::lock_guard<std::mutex> lock3(another.emb_matx[i]->mux);
+++        if(!(*(this->emb_matx[i]) == *(another.emb_matx[i]))){
++         	return false;
++ 		}
++     }
++diff --git a/Thread-1/lib/embedding.h b/Thread-1/lib/embedding.h
++index 6e13d14..0be6f15 100644
++--- a/Thread-1/lib/embedding.h
+++++ b/Thread-1/lib/embedding.h
++@@ -1,8 +1,16 @@
++ #ifndef THREAD_LIB_EMBEDDING_H_
++ #define THREAD_LIB_EMBEDDING_H_
++ 
+++// Embedding:
+++// Constructor and output method get lock automatically
+++// get data, operaters will not get lock
+++
+++// EmbeddingHolder: all methods are safe
+++
++ #include <string>
++ #include <vector>
+++#include <mutex>
+++#include <condition_variable>
++ 
++ namespace proj1 {
++ 
++@@ -18,6 +26,7 @@ public:
++     Embedding(int, double*);
++     Embedding(int, std::string);
++     Embedding(Embedding*);
+++    Embedding(Embedding const&);
++     ~Embedding() { delete []this->data; }
++     double* get_data() { return this->data; }
++     int get_length() { return this->length; }
++@@ -25,15 +34,20 @@ public:
++     std::string to_string();
++     void write_to_stdout();
++     // Operators
++-    Embedding operator+(const Embedding&);
+++    Embedding operator+(Embedding&);
++     Embedding operator+(const double);
++-    Embedding operator-(const Embedding&);
+++    Embedding operator-(Embedding&);
++     Embedding operator-(const double);
++-    Embedding operator*(const Embedding&);
+++    Embedding operator*(Embedding&);
++     Embedding operator*(const double);
++-    Embedding operator/(const Embedding&);
+++    Embedding operator/(Embedding&);
++     Embedding operator/(const double);
++-    bool operator==(const Embedding&);
+++    bool operator==(Embedding&);
+++    //lock&unlock
+++    std::mutex mux;
+++    void lock() {this->mux.lock();}
+++    void unlock() {this->mux.unlock();}
+++
++ private:
++     int length;
++     double* data;
++@@ -52,14 +66,18 @@ public:
++     void write(std::string filename);
++     int append(Embedding *data);
++     void update_embedding(int, EmbeddingGradient*, double);
++-    Embedding* get_embedding(int idx) const { return this->emb_matx[idx]; } 
++-    unsigned int get_n_embeddings() { return this->emb_matx.size(); }
++-    int get_emb_length() {
++-        return this->emb_matx.empty()? 0: this->get_embedding(0)->get_length();
++-    }
++-    bool operator==(const EmbeddingHolder&);
+++    Embedding* get_embedding(int idx);
+++    unsigned int get_n_embeddings();
+++    int get_emb_length();
+++    bool operator==(EmbeddingHolder&);
+++
++ private:
++     EmbeddingMatrix emb_matx;
+++    // lock&unlock
+++    std::mutex mux;
+++    // void lock() {this->mux.lock();}
+++    // void unlock() {this->mux.unlock();}
+++    std::condition_variable cv;
++ };
++ 
++ } // namespace proj1
++diff --git a/Thread-1/lib/server.cc b/Thread-1/lib/server.cc
++new file mode 100644
++index 0000000..3cb4c74
++--- /dev/null
+++++ b/Thread-1/lib/server.cc
++@@ -0,0 +1,281 @@
+++
+++#include <vector>
+++#include <thread>
+++#include <iostream>
+++#include <mutex>
+++
+++#include "server.h"
+++#include "model.h"
+++#include "utils.h"
+++
+++#define TIMER(s) // proj1::AutoTimer timer(s)
+++
+++namespace proj1 {
+++
+++void Server::write_to_stdout() {
+++    users.write_to_stdout();
+++    items.write_to_stdout();
+++}
+++
+++void Server::do_instruction(Instruction inst) {
+++    switch(inst.order) {
+++        case INIT_EMB: {
+++            if (!useLock) {
+++                do_init(inst);
+++            } else if (!initParall) {
+++                do_init_safe(inst);
+++            } else {
+++                do_init_parall(inst);
+++            }
+++            break;
+++        }
+++        case UPDATE_EMB: {
+++            if (!useLock) {
+++                do_update(inst);
+++            } else if (!useEpoch) {
+++                do_update_safe(inst);
+++            } else {
+++                do_update_epoch(inst);
+++            }
+++            break;
+++        }
+++        case RECOMMEND: {
+++            if (!useLock) {
+++                Embedding* emb = do_recommend(inst);
+++                emb->write_to_stdout();
+++            } else if (!useEpoch) {
+++                Embedding* emb = do_recommend_safe(inst);
+++                emb->write_to_stdout();
+++            } else {
+++                Embedding* emb = do_recommend_epoch(inst);
+++                emb->write_to_stdout();
+++            }
+++        }
+++    }
+++}
+++
+++void Server::do_init(Instruction inst) {
+++    TIMER("do_init");
+++
+++    int length = users.get_emb_length();
+++    Embedding* new_user = new Embedding(length);
+++    int user_idx = users.append(new_user);
+++
+++    for (int item_index: inst.payloads) {
+++        Embedding* item_emb = items.get_embedding(item_index);
+++
+++        EmbeddingGradient* gradient = cold_start(new_user, item_emb);
+++        users.update_embedding(user_idx, gradient, 0.01);
+++        delete gradient;
+++    }
+++}
+++
+++void Server::do_init_safe(Instruction inst) {
+++    TIMER("do_init_safe");
+++
+++    int length = users.get_emb_length();
+++    Embedding* new_user = new Embedding(length);
+++    int user_idx = users.append(new_user);
+++
+++    for (int item_index: inst.payloads) {
+++        Embedding* item_emb = items.get_embedding(item_index);
+++
+++        Embedding* user = new Embedding(new_user);
+++        Embedding* item = new Embedding(item_emb);
+++        EmbeddingGradient* gradient = cold_start(user, item);
+++        delete user, item;
+++
+++        users.update_embedding(user_idx, gradient, 0.01);
+++        delete gradient;
+++    }
+++}
+++
+++void Server::do_init_parall(Instruction inst) {
+++    TIMER("do_init_parall");
+++
+++    int length = users.get_emb_length();
+++    Embedding* new_user = new Embedding(length);
+++    int user_idx = users.append(new_user);
+++
+++    std::vector<std::thread*> threads;
+++    for (int item_index: inst.payloads) {
+++        std::thread* t = new std::thread(
+++            [&, item_index]() {
+++                Embedding* item_emb = items.get_embedding(item_index);
+++
+++                Embedding* user = new Embedding(new_user);
+++                Embedding* item = new Embedding(item_emb);
+++                EmbeddingGradient* gradient = cold_start(user, item);
+++                delete user, item;
+++
+++                users.update_embedding(user_idx, gradient, 0.01);
+++                delete gradient;
+++            }
+++        );
+++        threads.push_back(t);
+++    }
+++    for (std::thread* t: threads) {
+++        t->join();
+++        delete t;
+++    }
+++}
+++
+++void Server::do_update(Instruction inst) {
+++    TIMER("do_update");
+++
+++    std::cout << "do_update" << std::endl;
+++    int user_idx = inst.payloads[0];
+++    int item_idx = inst.payloads[1];
+++    int label = inst.payloads[2];
+++
+++    Embedding* user_emb = users.get_embedding(user_idx);
+++    Embedding* item_emb = items.get_embedding(item_idx);
+++
+++    EmbeddingGradient* gradient = calc_gradient(user_emb, item_emb, label);
+++    users.update_embedding(user_idx, gradient, 0.01);
+++    delete gradient;
+++
+++    gradient = calc_gradient(item_emb, user_emb, label);
+++    items.update_embedding(item_idx, gradient, 0.001);
+++    delete gradient;
+++}
+++
+++void Server::do_update_safe(Instruction inst) {
+++    TIMER("do_update_safe");
+++
+++    int user_idx = inst.payloads[0];
+++    int item_idx = inst.payloads[1];
+++    int label = inst.payloads[2];
+++
+++    Embedding* user_emb = users.get_embedding(user_idx);
+++    Embedding* item_emb = items.get_embedding(item_idx);
+++
+++    auto user = new Embedding(user_emb);
+++    auto item = new Embedding(item_emb);
+++    EmbeddingGradient* gradient = calc_gradient(user, item, label);
+++    delete user, item;
+++
+++    users.update_embedding(user_idx, gradient, 0.01);
+++    delete gradient;
+++
+++    user = new Embedding(user_emb);
+++    item = new Embedding(item_emb);
+++    gradient = calc_gradient(item, user, label);
+++    delete user, item;
+++
+++    items.update_embedding(item_idx, gradient, 0.001);
+++    delete gradient;
+++}
+++
+++void Server::do_update_epoch(Instruction inst) {
+++    int iter_idx = inst.payloads[3];
+++{
+++    std::unique_lock<std::mutex> lock(this->mux);
+++    while (!(this->epoch >= iter_idx || (this->epoch == iter_idx - 1 && this->num_threads == 0))) {
+++        this->cv.wait(lock);
+++    }
+++    if (this->epoch == iter_idx - 1 && this->num_threads == 0) {
+++        this->epoch = iter_idx;
+++    }
+++    this->num_threads++;
+++}
+++
+++    TIMER("do_update_inst");
+++
+++    int user_idx = inst.payloads[0];
+++    int item_idx = inst.payloads[1];
+++    int label = inst.payloads[2];
+++
+++    Embedding* user_emb = users.get_embedding(user_idx);
+++    Embedding* item_emb = items.get_embedding(item_idx);
+++
+++    auto user = new Embedding(user_emb);
+++    auto item = new Embedding(item_emb);
+++    EmbeddingGradient* gradient = calc_gradient(user, item, label);
+++    delete user, item;
+++
+++    users.update_embedding(user_idx, gradient, 0.01);
+++    delete gradient;
+++
+++    user = new Embedding(user_emb);
+++    item = new Embedding(item_emb);
+++    gradient = calc_gradient(item, user, label);
+++    delete user, item;
+++
+++    items.update_embedding(item_idx, gradient, 0.001);
+++    delete gradient;
+++
+++{
+++    std::unique_lock<std::mutex> lock(this->mux);
+++    this->num_threads--;
+++    this->cv.notify_all();
+++}
+++}
+++
+++Embedding* Server::do_recommend(Instruction inst) {
+++    TIMER("do_recommend");
+++
+++    int user_idx = inst.payloads[0];
+++    Embedding* user = users.get_embedding(user_idx);
+++
+++    std::vector<Embedding*> item_pool;
+++    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
+++        int item_idx = inst.payloads[i];
+++        item_pool.push_back(items.get_embedding(item_idx));
+++    }
+++
+++    Embedding* recommendation = recommend(user, item_pool);
+++    return recommendation;
+++}
+++
+++Embedding* Server::do_recommend_safe(Instruction inst) {
+++    TIMER("do_recommend_safe");
+++
+++    int user_idx = inst.payloads[0];
+++    Embedding* user = users.get_embedding(user_idx);
+++    std::lock_guard<std::mutex> lock(user->mux);
+++
+++    std::vector<Embedding*> item_pool;
+++    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
+++        int item_idx = inst.payloads[i];
+++        Embedding* item = items.get_embedding(item_idx);
+++        std::lock_guard<std::mutex> lock(item->mux);
+++        item_pool.push_back(item);
+++    }
+++
+++    Embedding* recommendation = recommend(user, item_pool);
+++    return recommendation;
+++}
+++
+++Embedding* Server::do_recommend_epoch(Instruction inst) {
+++    int iter_idx = inst.payloads[1];
+++{
+++    std::unique_lock<std::mutex> lock(this->mux);
+++    while (!(this->epoch > iter_idx | (this->epoch == iter_idx && this->num_threads == 0))) {
+++        this->cv.wait(lock);
+++    }
+++}
+++
+++    TIMER("do_recommend_epoch");
+++
+++    int user_idx = inst.payloads[0];
+++    Embedding* user = users.get_embedding(user_idx);
+++    std::lock_guard<std::mutex> lock(user->mux);
+++
+++    std::vector<Embedding*> item_pool;
+++    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
+++        int item_idx = inst.payloads[i];
+++        Embedding* item = items.get_embedding(item_idx);
+++        std::lock_guard<std::mutex> lock(item->mux);
+++        item_pool.push_back(item);
+++    }
+++
+++    Embedding* recommendation = recommend(user, item_pool);
+++    return recommendation;
+++}
+++
+++bool Server::operator==(Server& svr) {
+++    return this->users == svr.users && this->items == svr.items;
+++}
+++
+++} // namespace proj1
++diff --git a/Thread-1/lib/server.h b/Thread-1/lib/server.h
++new file mode 100644
++index 0000000..c893a40
++--- /dev/null
+++++ b/Thread-1/lib/server.h
++@@ -0,0 +1,48 @@
+++#ifndef THREAD_LIB_SERVER_H_
+++#define THREAD_LIB_SERVER_H_
+++
+++#include <mutex>
+++#include <condition_variable>
+++#include "instruction.h"
+++#include "embedding.h"
+++
+++namespace proj1 {
+++
+++class Server {
+++public:
+++    Server(std::string user_filename, std::string item_filename) : users(user_filename), items(item_filename) {}
+++    Server(std::string user_filename, std::string item_filename, bool initParall, bool useLock, bool useEpoch)
+++        : users(user_filename), items(item_filename), initParall(initParall), useLock(useLock), useEpoch(useEpoch) {}
+++    void do_instruction(Instruction);
+++    void write_to_stdout();
+++
+++    void do_init(Instruction);
+++    void do_init_safe(Instruction);
+++    void do_init_parall(Instruction);
+++
+++    void do_update(Instruction);
+++    void do_update_safe(Instruction);
+++    void do_update_epoch(Instruction);
+++
+++    Embedding* do_recommend(Instruction);
+++    Embedding* do_recommend_safe(Instruction);
+++    Embedding* do_recommend_epoch(Instruction);
+++
+++    bool operator==(Server&);
+++
+++private:
+++    bool initParall = false;
+++    bool useLock = false;
+++    bool useEpoch = false;
+++
+++    int epoch = -1;
+++    int num_threads = 0; // number of update threads running in this epoch
+++    std::mutex mux;
+++    std::condition_variable cv;
+++
+++    EmbeddingHolder users;
+++    EmbeddingHolder items;
+++};
+++
+++} // namespace proj1
+++#endif // THREAD_LIB_SERVER_H_
++diff --git a/Thread-1/lib/server_test.cc b/Thread-1/lib/server_test.cc
++new file mode 100644
++index 0000000..036212b
++--- /dev/null
+++++ b/Thread-1/lib/server_test.cc
++@@ -0,0 +1,53 @@
+++#include <gtest/gtest.h>
+++#include <vector>
+++
+++#include "server.h"
+++#include "embedding.h"
+++
+++namespace proj1 {
+++namespace testing {
+++
+++class ServerTest : public ::testing::Test {
+++protected:
+++    void SetUp() {
+++        server1 = new Server("data/q4.in", "data/q4.in");
+++        server2 = new Server("data/q4.in", "data/q4.in");
+++        server3 = new Server("data/q4.in", "data/q4.in");
+++
+++        inst_init = new Instruction("0 0 1 2 3 4 5 6 7 8");
+++        inst_update = new Instruction("1 7 5 0 0");
+++        inst_recommend = new Instruction("2 2 -1 4 5 6 3 7 9");
+++    }
+++    Server *server1, *server2, *server3;
+++    Instruction *inst_init, *inst_update, *inst_recommend;
+++};
+++
+++TEST_F(ServerTest, test_init) {
+++    server1->do_init(*inst_init);
+++    server2->do_init_safe(*inst_init);
+++    EXPECT_EQ((*server1) == (*server2), true);
+++}
+++
+++TEST_F(ServerTest, test_update) {
+++    server1->do_update(*inst_update);
+++    server2->do_update_safe(*inst_update);
+++    server3->do_update_epoch(*inst_update);
+++    EXPECT_EQ((*server1) == (*server2), true);
+++    EXPECT_EQ((*server2) == (*server3), true);
+++}
+++
+++TEST_F(ServerTest, test_recommend) {
+++    Embedding* emb1 = server1->do_recommend(*inst_recommend);
+++    Embedding* emb2 = server2->do_recommend_safe(*inst_recommend);
+++    Embedding* emb3 = server3->do_recommend_epoch(*inst_recommend);
+++    EXPECT_EQ((*emb1) == (*emb2), true);
+++    EXPECT_EQ((*emb2) == (*emb3), true);
+++}
+++    
+++} // namespace testing
+++} // namespace proj1
+++
+++int main(int argc, char** argv) {
+++    testing::InitGoogleTest(&argc, argv);
+++    return RUN_ALL_TESTS();
+++}
++diff --git a/Thread-1/lib/utils.cc b/Thread-1/lib/utils.cc
++index 3427314..a440602 100644
++--- a/Thread-1/lib/utils.cc
+++++ b/Thread-1/lib/utils.cc
++@@ -8,7 +8,9 @@
++ namespace proj1 {
++ 
++ void a_slow_function(int seconds) {
++-    //std::this_thread::sleep_for(std::chrono::seconds(seconds));
+++    if (slow_function) {
+++        std::this_thread::sleep_for(std::chrono::timescale(seconds));
+++    }
++ }
++ 
++ double sigmoid(double x) {
++@@ -39,7 +41,7 @@ AutoTimer::AutoTimer(std::string name) :
++ AutoTimer::~AutoTimer() {
++     auto end = std::chrono::high_resolution_clock::now();
++     auto dur = std::chrono::duration_cast<std::chrono::microseconds>(end - m_beg);
++-    std::cout << m_name << " : " << dur.count() << " usec\n";
+++    std::cout << m_name + " : " + std::to_string(dur.count()) + " usec\n";
++ }
++ 
++ } // namespace proj1
++diff --git a/Thread-1/lib/utils.h b/Thread-1/lib/utils.h
++index 9f85001..398acbe 100644
++--- a/Thread-1/lib/utils.h
+++++ b/Thread-1/lib/utils.h
++@@ -6,6 +6,10 @@
++ #include <iostream>
++ #include <chrono>  // for AutoTimer function
++ 
+++// slow_function
+++#define slow_function true
+++#define timescale seconds
+++
++ // For colored outputs in terminal
++ #define RST  "\x1B[0m"
++ #define KRED  "\x1B[31m"
++diff --git a/Thread-1/q0_my.cc b/Thread-1/q0_my.cc
++new file mode 100644
++index 0000000..f7f992a
++--- /dev/null
+++++ b/Thread-1/q0_my.cc
++@@ -0,0 +1,29 @@
+++#include <vector>
+++#include <tuple>
+++
+++#include <string>   // string
+++#include <chrono>   // timer
+++
+++#include "lib/utils.h"
+++#include "lib/server.h"
+++#include "lib/instruction.h"
+++
+++int main(int argc, char *argv[]) {
+++
+++    proj1::Server server("data/q0.in", "data/q0.in");
+++
+++    proj1::Instructions instructions = proj1::read_instructrions("data/q0_instruction.tsv");
+++
+++    {
+++        proj1::AutoTimer timer("q0");  // using this to print out timing of the block
+++        // Run all the instructions
+++        for (proj1::Instruction inst: instructions) {
+++            server.do_instruction(inst);
+++        }
+++    }
+++
+++    // Write the result
+++    server.write_to_stdout();
+++
+++    return 0;
+++}
++diff --git a/Thread-1/q1.cc b/Thread-1/q1.cc
++index 974ad23..395470a 100644
++--- a/Thread-1/q1.cc
+++++ b/Thread-1/q1.cc
++@@ -1,5 +1,39 @@
++-#include <iostream> // cout, endl
+++#include <vector>
+++#include <tuple>
+++
+++#include <string>   // string
+++#include <chrono>   // timer
+++#include <thread>
+++#include <vector>
+++
+++#include "lib/utils.h"
+++#include "lib/server.h"
+++#include "lib/instruction.h"
+++
++ int main(int argc, char *argv[]) {
++-    std::cout << "please implement this function\n";
++-    exit(1);
++-}
++\ No newline at end of file
+++
+++    proj1::Server server("data/q1.in", "data/q1.in", false, true, false);
+++
+++    proj1::Instructions instructions = proj1::read_instructrions("data/q1_instruction.tsv");
+++
+++    {
+++        proj1::AutoTimer timer("q1");  // using this to print out timing of the block
+++        // Run all the instructions
+++
+++        std::vector<std::thread*> threads;
+++
+++        for (proj1::Instruction inst: instructions) {
+++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
+++            threads.push_back(t);
+++        }
+++        for (auto t: threads) {
+++            t->join();
+++            delete t;
+++        }
+++    }
+++
+++    // Write the result
+++    server.write_to_stdout();
+++
+++    return 0;
+++}
++diff --git a/Thread-1/q2.cc b/Thread-1/q2.cc
++index c4b7413..bdc561f 100644
++--- a/Thread-1/q2.cc
+++++ b/Thread-1/q2.cc
++@@ -1,4 +1,39 @@
++-#include <iostream> // cout, endl
+++#include <vector>
+++#include <tuple>
+++
+++#include <string>   // string
+++#include <chrono>   // timer
+++#include <thread>
+++#include <vector>
+++
+++#include "lib/utils.h"
+++#include "lib/server.h"
+++#include "lib/instruction.h"
+++
++ int main(int argc, char *argv[]) {
++-    exit(1);
++-}
++\ No newline at end of file
+++
+++    proj1::Server server("data/q2.in", "data/q2.in", true, true, false);
+++
+++    proj1::Instructions instructions = proj1::read_instructrions("data/q2_instruction.tsv");
+++
+++    {
+++        proj1::AutoTimer timer("q2");  // using this to print out timing of the block
+++        // Run all the instructions
+++        
+++        std::vector<std::thread*> threads;
+++
+++        for (proj1::Instruction inst: instructions) {
+++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
+++            threads.push_back(t);
+++        }
+++        for (auto t: threads) {
+++            t->join();
+++            delete t;
+++        }
+++    }
+++
+++    // Write the result
+++    server.write_to_stdout();
+++
+++    return 0;
+++}
++diff --git a/Thread-1/q3.cc b/Thread-1/q3.cc
++index c4b7413..9a22363 100644
++--- a/Thread-1/q3.cc
+++++ b/Thread-1/q3.cc
++@@ -1,4 +1,39 @@
++-#include <iostream> // cout, endl
+++#include <vector>
+++#include <tuple>
+++
+++#include <string>   // string
+++#include <chrono>   // timer
+++#include <thread>
+++#include <vector>
+++
+++#include "lib/utils.h"
+++#include "lib/server.h"
+++#include "lib/instruction.h"
+++
++ int main(int argc, char *argv[]) {
++-    exit(1);
++-}
++\ No newline at end of file
+++
+++    proj1::Server server("data/q3.in", "data/q3.in", true, true, true);
+++
+++    proj1::Instructions instructions = proj1::read_instructrions("data/q3_instruction.tsv");
+++
+++    {
+++        proj1::AutoTimer timer("q3");  // using this to print out timing of the block
+++        // Run all the instructions
+++        
+++        std::vector<std::thread*> threads;
+++
+++        for (proj1::Instruction inst: instructions) {
+++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
+++            threads.push_back(t);
+++        }
+++        for (auto t: threads) {
+++            t->join();
+++            delete t;
+++        }
+++    }
+++
+++    // Write the result
+++    server.write_to_stdout();
+++
+++    return 0;
+++}
++diff --git a/Thread-1/q4.cc b/Thread-1/q4.cc
++new file mode 100644
++index 0000000..ab2ac15
++--- /dev/null
+++++ b/Thread-1/q4.cc
++@@ -0,0 +1,36 @@
+++#include <vector>
+++#include <tuple>
+++
+++#include <string>   // string
+++#include <chrono>   // timer
+++#include <thread>
+++#include <vector>
+++
+++#include "lib/utils.h"
+++#include "lib/server.h"
+++#include "lib/instruction.h"
+++
+++int main(int argc, char *argv[]) {
+++
+++    proj1::Server server("data/q4.in", "data/q4.in", true, true, true);
+++
+++    proj1::Instructions instructions = proj1::read_instructrions("data/q4_instruction.tsv");
+++
+++    {
+++        proj1::AutoTimer timer("q4");  // using this to print out timing of the block
+++        // Run all the instructions
+++        
+++        std::vector<std::thread*> threads;
+++
+++        for (proj1::Instruction inst: instructions) {
+++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
+++            threads.push_back(t);
+++        }
+++        for (auto t: threads) {
+++            t->join();
+++            delete t;
+++        }
+++    }
+++
+++    return 0;
+++}
+diff --git a/Thread-1/BUILD b/Thread-1/BUILD
+index 28f4114..02118cd 100644
+--- a/Thread-1/BUILD
++++ b/Thread-1/BUILD
+@@ -1,5 +1,21 @@
+ ##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
+ 
++cc_binary(
++    name = "q0_my",
++    srcs = [
++        "q0_my.cc"
++            ],
++    deps = [
++        "//lib:instruction_lib",
++        "//lib:utils_lib",
++        "//lib:server_lib"
++    ],
++    copts = [
++        "-std=c++11",
++    ],
++    data = glob(["data/q0*"]),
++)
++
+ cc_binary(
+     name = "q0",
+     srcs = [
+@@ -29,6 +45,16 @@ cc_binary(
+     srcs = [
+         "q1.cc"
+             ],
++    deps = [
++        "//lib:instruction_lib",
++        "//lib:utils_lib",
++        "//lib:server_lib"
++    ],
++    copts = [
++        "-std=c++11",
++    ],
++    linkopts = ["-lpthread"],
++    data = glob(["data/q1*"]),
+ )
+ 
+ cc_binary(
+@@ -36,6 +62,16 @@ cc_binary(
+     srcs = [
+         "q2.cc"
+             ],
++    deps = [
++        "//lib:instruction_lib",
++        "//lib:utils_lib",
++        "//lib:server_lib"
++    ],
++    copts = [
++        "-std=c++11",
++    ],
++    linkopts = ["-lpthread"],
++    data = glob(["data/q2*"]),
+ )
+ 
+ cc_binary(
+@@ -43,6 +79,50 @@ cc_binary(
+     srcs = [
+         "q3.cc"
+             ],
++    deps = [
++        "//lib:instruction_lib",
++        "//lib:utils_lib",
++        "//lib:server_lib"
++    ],
++    copts = [
++        "-std=c++11",
++    ],
++    linkopts = ["-lpthread"],
++    data = glob(["data/q3*"]),
++)
++
++cc_binary(
++    name = "q4",
++    srcs = [
++        "q4.cc"
++            ],
++    deps = [
++        "//lib:instruction_lib",
++        "//lib:utils_lib",
++        "//lib:server_lib"
++    ],
++    copts = [
++        "-std=c++11",
++    ],
++    linkopts = ["-lpthread"],
++    data = glob(["data/q4*"]),
++)
++
++cc_binary(
++    name = "q5",
++    srcs = [
++        "q5.cc"
++            ],
++    deps = [
++        "//lib:instruction_lib",
++        "//lib:utils_lib",
++        "//lib:server_lib"
++    ],
++    copts = [
++        "-std=c++11",
++    ],
++    linkopts = ["-lpthread"],
++    data = glob(["data/q4*"]),
+ )
+ 
+ cc_test(
+diff --git a/Thread-1/README.md b/Thread-1/README.md
+index a53ec7b..0fb82c9 100644
+--- a/Thread-1/README.md
++++ b/Thread-1/README.md
+@@ -1,28 +1,16 @@
+ # Project 1: Multi-thread Programming
+ 
+-This project uses a (oversimplified) machine learning inference system to allow
+-you to put some basic OS concepts into practice and learn how system-level
+-optimizations help improve performance. 
+-
+-Suppose you are hired by a company to improve the efficiency of the optimization
+-process of a recommender system. This recommender system represents the users
+-and items (i.e. goods offered by the E-commerce platform) as vectors, and uses
+-these embedding vectors to calculate the semantic similarities between
+-user-user, user-item and item-item pairs. Since you are a system expert, the
+-company hopes you can improve the efficiency of the embedding maintenance of
+-the recommender system.
++This project uses a (oversimplified) machine learning inference system to allow you to put some basic OS concepts into practice and learn how system-level optimizations help improve performance.
++
++Suppose you are hired by a company to improve the efficiency of the optimization  process of a recommender system. This recommender system represents the users and items (i.e. goods offered by the E-commerce platform) as vectors, and uses these embedding vectors to calculate the semantic similarities between user-user, user-item and item-item pairs. Since you are a system expert, the company hopes you can improve the efficiency of the embedding maintenance of the recommender system.
+ 
+ ## Introduction
+ 
+-The AI algorithm engineers of the company explain the basics of the setup to
+-you, as follows.
++The AI algorithm engineers of the company explain the basics of the setup to you, as follows.
+ 
+ ### Embedding Vectors
+ 
+-Embedding vectors represent the entities (either a user or an item). These
+-vectors are stored as rows in an embedding matrix. These embedding vectors have
+-a property that the product of two embedding vectors (maybe after some
+-processing) indicates the similarity of the two corresponding entities.
++Embedding vectors represent the entities (either a user or an item). These vectors are stored as rows in an embedding matrix. These embedding vectors have a property that the product of two embedding vectors (maybe after some processing) indicates the similarity of the two corresponding entities.
+ 
+ ```bash
+ ...
+@@ -39,23 +27,13 @@ Three important operations on the embedding vectors are
+ 2. Updating the vectors after observing user activities (`update`).
+ 3. Recommend an item to a user from a list of items.
+ 
+-The embedding initialization is difficult, as there is few information about a
+-new entity. For a new user, a simple method is to randomly initialize the
+-embedding and run some cold start procedure (e.g. recommending some popular
+-item) to probe the user's interest. For a new item, we may expose them to highly
+-active users.
++The embedding initialization is difficult, as there is few information about a new entity. For a new user, a simple method is to randomly initialize the embedding and run some cold start procedure (e.g. recommending some popular item) to probe the user's interest. For a new item, we may expose them to highly active users.
+ 
+-After observing some user activities, we gather information about the users'
+-interest and items' popularity. To encode this information into the embeddings,
+-we need to update the embedding vectors with some optimization method (e.g.
+-gradient descent) where we pull in the distance between similar entities and
+-push away those dissimilar entities.
++After observing some user activities, we gather information about the users' interest and items' popularity. To encode this information into the embeddings, we need to update the embedding vectors with some optimization method (e.g. gradient descent) where we pull in the distance between similar entities and push away those dissimilar entities.
+ 
+ ## Embedding Holder
+ 
+-In this project, we utilize `EmbeddingHolder` (a collection of embeddings) as the database to store 
+-and update the company's data. Initially, we read data from `*.in` to create two basic `EmbeddingHolder` for **users**
+-and **items** respectively; our task is to update this database according to the incoming `Instruction`s.
++In this project, we utilize `EmbeddingHolder` (a collection of embeddings) as the database to store and update the company's data. Initially, we read data from `*.in` to create two basic `EmbeddingHolder` for **users** and **items** respectively; our task is to update this database according to the incoming `Instruction`s.
+ 
+ ### Codebase
+ 
+@@ -88,35 +66,21 @@ The project directory looks like this:
+ 
+ ```
+ 
+-The source files in `lib/` implements the basic interfaces of the system. The
+-`lib/embedding.h` contains the main interface of the embedding matrix data
+-holder. The mentioned operations on the embedding matrix are implemented in
+-`lib/model.h`. `Instruction` is in `lib/instruction.h`. The utilities are in `lib/utils.h`.
+-You find these files belongs to the AI team and you should not 
+-modify them, and do your optimization all from the system level. 
++The source files in `lib/` implements the basic interfaces of the system. The `lib/embedding.h` contains the main interface of the embedding matrix data holder. The mentioned operations on the embedding matrix are implemented in `lib/model.h`. `Instruction` is in `lib/instruction.h`. The utilities are in `lib/utils.h`. You find these files belongs to the AI team and you should not modify them, and do your optimization all from the system level.
+ 
+-The entrance of the program is in `q*.cc`.
+-You can modify everything in this project, except those tests in `lib`.
+-You should ensure that after your modification, it still passes the tests in `lib`.
++The entrance of the program is in `q*.cc`. You can modify everything in this project, except those tests in `lib`. You should ensure that after your modification, it still passes the tests in `lib`.
+ 
+-The project builds with the bazel build system, as we discussed in the
+-discussion session. You should install bazel following the online documents and
+-read the BUILD and WORKSPACE files carefully to understand the dependencies and
+-code structure. 
++The project builds with the bazel build system, as we discussed in the discussion session. You should install bazel following the online documents and read the BUILD and WORKSPACE files carefully to understand the dependencies and code structure.
+ 
+ ### Unit testing
+ 
+-Writing unit tests is an essential way to build and optimize system programs
+-and thus we would require that you include unit tests for all major functions
+-you write for your code. 
++Writing unit tests is an essential way to build and optimize system programs and thus we would require that you include unit tests for all major functions you write for your code.
+ 
+-We have provided test cases in the libraries for you as examples. Please do not
+-modify these unit tests.  You can modify library code, and add your own test cases
+-to the library test, but make sure that after your modification, our provided test cases still pass.
++We have provided test cases in the libraries for you as examples. Please do not modify these unit tests.  You can modify library code, and add your own test cases to the library test, but make sure that after your modification, our provided test cases still pass.
+ 
+ ### Format Checking
+ 
+- In this project we test the standard output stream for final grading, so make sure that you output the correct answer as you expect. We provide a format checking script in `format.cc`. You can modify it to test all output results of your submission. Run the format checking script after building it like this:
++In this project we test the standard output stream for final grading, so make sure that you output the correct answer as you expect. We provide a format checking script in `format.cc`. You can modify it to test all output results of your submission. Run the format checking script after building it like this:
+ 
+ ```bash
+ bazel-bin/q0 |grep [OUTPUT] > format.out && bazel-bin/format
+@@ -124,25 +88,13 @@ bazel-bin/q0 |grep [OUTPUT] > format.out && bazel-bin/format
+ 
+ ### Instruction Files
+ 
+-The workload of the company comes as `Instruction`s with `order` and `payload`
+-fields. Both fields are integers. In this project, the `Instruction.order` is
+-either 0, 1 or 2, indicating the task of "init", "update" or "recommend". The workflow
+-of different task types are different as described bellow.
+-
+-- For **“init”**, you should first create a new embedding. The payload is a
+-  list of existing embedding indeces in the input matrix (`EmbeddingHolder`) that
+-  are used for cold  start (downstream applications may use them for interest
+-  probing). You should add this new  embedding into the `EmbeddingHolder` using
+-  `append`. Then you need to call `cold_start`  for each of the embedding
+-  indeces. Note that after `cold_start`, **only user embeddings are updated**
+-  (see `q0.cc` for example).
+-
+-- For **“update”**, the payload is `[user_idx, item_idx, label, (iter_idx)]`. You should invoke
+-  the `calc_gradient` on these two embedding vectors from `lib/model.h` and then
+-  call `update_embedding` from `lib/embedding.h` **on both the user and the items**
+-  (see`project/embedding.cc:run_q0` for example). The `iter_idx` indicates the
+-  epoch number of current update, see Task-3 for information.
+-- For **"recommend"**, the the payload is `[user_idx, iter_idx, item_idx1, item_idx2, item_idx3, item_idx4, ...]`. You should invoke the `recommend` on these embedding vectors from `lib/model.h` and then output the result. 
++The workload of the company comes as `Instruction`s with `order` and `payload` fields. Both fields are integers. In this project, the `Instruction.order` is either 0, 1 or 2, indicating the task of "init", "update" or "recommend". The workflow of different task types are different as described bellow.
++
++- For **“init”**, you should first create a new embedding. The payload is a list of existing embedding indices in the input matrix (`EmbeddingHolder`) that are used for cold  start (downstream applications may use them for interest probing). You should add this new  embedding into the `EmbeddingHolder` using `append`. Then you need to call `cold_start`  for each of the embedding indices. Note that after `cold_start`, **only user embeddings are updated** (see `q0.cc` for example).
++
++- For **“update”**, the payload is `[user_idx, item_idx, label, (iter_idx)]`. You should invoke the `calc_gradient` on these two embedding vectors from `lib/model.h` and then call `update_embedding` from `lib/embedding.h` **on both the user and the items** (see`project/embedding.cc:run_q0` for example). The `iter_idx` indicates the epoch number of current update, see Task-3 for information.
++
++- For **"recommend"**, the the payload is `[user_idx, iter_idx, item_idx1, item_idx2, item_idx3, item_idx4, ...]`. You should invoke the `recommend` on these embedding vectors from `lib/model.h` and then output the result.
+ 
+ Note that NO provided functions are thread safe on their own.
+ 
+@@ -150,70 +102,51 @@ Note that NO provided functions are thread safe on their own.
+ 
+ For the following tasks, you should minimize duplicate code.  If there are code sharing among the following tasks, you should extract as much shared code as possible into separate `.h` and `.cc` library files, but not put everything into a single `.cc` file.  You should create your own `_test.cc` file for your library code.  20% of this project grade are reserved for good coding style (including the completeness of your own test cases).  
+ 
+-We recommend you to use the standard C++11 Threading to implement multi-threading.  However, please feel free to use any other
+-C++ threading library (such as `pthread`, or Intel's TBB to do the following task).  If you need external libraries, please include them in the `WORKSPACE` file and make them to install and build automatically.  The TAs are not obliged to manually install any libraries on the grading machine. 
++We recommend you to use the standard C++11 Threading to implement multi-threading.  However, please feel free to use any other C++ threading library (such as `pthread`, or Intel's TBB to do the following task).  If you need external libraries, please include them in the `WORKSPACE` file and make them to install and build automatically.  The TAs are not obliged to manually install any libraries on the grading machine.
+ 
+ ## Submission instructions
+ 
+ You should create a `.diff` file of your latest commit from the latest commit of the main project on learn.tsinghua, as follows:
+ 
+ ```bash
+-git diff MAIN_REPO_COMMIT_SHA 1YOUR_COMMIT_SHA1 > ${STUDENT_ID_1}_${STUDENT_ID_2}.diff
++git diff MAIN_REPO_COMMIT_SHA1 YOUR_COMMIT_SHA1 > ${STUDENT_ID_1}_${STUDENT_ID_2}.diff
+ ```
+ 
+ To test whether your `.diff` works, clone a new repo and call `git apply ${STUDENT_ID_1}_${STUDENT_ID_2}.diff` and see if your code still works.
+ 
+ ## Task-0: Play with bazel build, the code and sanity check
+ 
+-In this task, you need to understand the project structure, read the `q0.cc` code and 
+-the `project/BUILD` files, install bazel, build and run the provided sample program and tests. 
+-This task is not included for grading.  Just provided as an example for you to read.  If you need more information
+-on the Bazel build system, please refer to
+-https://docs.bazel.build/versions/main/tutorial/cpp.html
++In this task, you need to understand the project structure, read the `q0.cc` code and the `project/BUILD` files, install bazel, build and run the provided sample program and tests. This task is not included for grading.  Just provided as an example for you to read.  If you need more information on the Bazel build system, please refer to [https://docs.bazel.build/versions/main/tutorial/cpp.html]()
+ 
+-
+-> **_NOTE:_** You can take this task's code as an example and benchmark for following tasks, 
+-but do not copy and paste this unoptimized code! Otherwise you will get penalized. Task-0 is not included in the final grading.
++> **_NOTE:_** You can take this task's code as an example and benchmark for following tasks, but do not copy and paste this unoptimized code! Otherwise you will get penalized. Task-0 is not included in the final grading.
+ 
+ > **_NOTE:_** Your code is not required to output exactly the same answer as `q0.cc`. You just need to guarantee your code is thread-safe.
+ 
+ ## Task-1: Supporting concurrent users
+ 
+-At the beginning, the recommender system is new and has very few items or users.
+-Fortunately, the company attracts more and more users.  Thus, we need to modify the system
+-so that when multiple users come in at the same time, and send `Instruction`s concurrently
+-the system could behave correctly and efficiently. 
++At the beginning, the recommender system is new and has very few items or users. Fortunately, the company attracts more and more users.  Thus, we need to modify the system so that when multiple users come in at the same time, and send `Instruction`s concurrently the system could behave correctly and efficiently.
+ 
+ **ToDo:**
+ 
+-In this task, your job is to process an `Instruction` set of "init" and "update". Considering that 
+-`cal_gradient`  is time-consuming (10s of seconds running time, mostly waiting for I/O), 
+-you should think of handling multiple `Instruction`s concurrently. Design 
+-a synchronization mechanism using locks to guarantee that your codes are thread-safe.  Output your final 
+-`EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()`.
++In this task, your job is to process an `Instruction` set of "init" and "update". Considering that `cal_gradient`  is time-consuming (10s of seconds running time, mostly waiting for I/O), you should think of handling multiple `Instruction`s concurrently. Design a synchronization mechanism using locks to guarantee that your codes are thread-safe.  Output your final `EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()`.
+ 
+-Again, note that NO provided functions are thread safe on their own. Feel free to modify these functions
+-in the `lib/` directory, but do not modify existing test cases there (you can add your own test cases).
++Again, note that NO provided functions are thread safe on their own. Feel free to modify these functions in the `lib/` directory, but do not modify existing test cases there (you can add your own test cases).
+ 
+ **Grading:**
+ 
+-You will be graded by both the correctness and efficiency of your calculation 
+-under heavy and arbitrary mixtures of incoming `Instruction`s.
++You will be graded by both the correctness and efficiency of your calculation under heavy and arbitrary mixtures of incoming `Instruction`s.
+ 
+-> **_NOTE:_** In this task, a single `Instruction` only runs in a single thread (i.e. no internal parallelism within an `Instruction`). 
++> **_NOTE:_** In this task, a single `Instruction` only runs in a single thread (i.e. no internal parallelism within an `Instruction`).
+ 
+ > **_NOTE:_** The correctness means thread-safety. We allow any order of updates, as long as it is thread-safe.
+ 
+ ## Task-2: Accelerate "Init" task through concurrency
+ 
+-Now the engineers find that it is still too slow to conduct each "init" task, as each of the task need to read multiple 
+-embeddings to perform the init.  
+-They hope to read and use these embeddings concurrently so shorten the time required to call a single "init".
+-We can further speed up the process by building an internally-concurrent "init" function.
++Now the engineers find that it is still too slow to conduct each "init" task, as each of the task need to read multiple embeddings to perform the init. They hope to read and use these embeddings concurrently so shorten the time required to call a single "init". We can further speed up the process by building an internally-concurrent "init" function.
+ 
+ **ToDo:**
+ 
+-In this task, your job is to process an `Instruction` set of "init" and "update". You can start with your codes in Task-1. Try to conduct multiple `cold_start`  in parallel and update the newly initialized embedding collectively without violating **thread-safety**.  Output your final `EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()` function.  Note that you still need to support multiple concurrent users. 
++In this task, your job is to process an `Instruction` set of "init" and "update". You can start with your codes in Task-1. Try to conduct multiple `cold_start`  in parallel and update the newly initialized embedding collectively without violating **thread-safety**.  Output your final `EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()` function.  Note that you still need to support multiple concurrent users.
+ 
+ **Grading:**
+ 
+@@ -221,11 +154,7 @@ You will be graded by the correctness and efficiency of your calculation.
+ 
+ ## Task-3: Supporting incremental embedding updates
+ 
+-Now the recommender system has many users and items. Everyday, the system
+-observes user activities and use them to update the embedding matrix for better
+-recommendation performance. In this task, you will need to implement the
+-updating process of the embedding matrix. The algorithm engineers of the company come up with a "genius" optimization
+-algorithm. This algorithm requires the optimizer to update the embeddings iteratively, and they call each iteration an *epoch*. This innovative epoch-based optimization differs from existing methods in that the calculation of later epochs depends on the results of earlier epochs. In this task, your job is to support this epoch-based update.
++Now the recommender system has many users and items. Everyday, the system observes user activities and use them to update the embedding matrix for better recommendation performance. In this task, you will need to implement the updating process of the embedding matrix. The algorithm engineers of the company come up with a "genius" optimization algorithm. This algorithm requires the optimizer to update the embeddings iteratively, and they call each iteration an *epoch*. This innovative epoch-based optimization differs from existing methods in that the calculation of later epochs depends on the results of earlier epochs. In this task, your job is to support this epoch-based update.
+ 
+ **ToDo:**
+ 
+@@ -237,12 +166,7 @@ You will be graded by the correctness and efficiency of your calculation.
+ 
+ ## Task-4: Doing recommendation while updating the embedding
+ 
+-Except the maintenance of the recommender system, the company also needs  to generate recommendations for each user using the 
+-existing database. The recommendation should depend on the current version of data and not disturb the maintenance of the 
+-recommender system.  Note that when an embedding update is going on, you can not at the same time read the embedding, as the 
+-embedding update is not an atomic operation.  As the embedding update can take a long time, and can be quite frequent, 
+-you need to figure out a way to allow recommendation to execute without getting blocked by the updates, and at the same time
+-allowing the update to happen, and being able to use some quite recent updated embedding values for recommendation.  
++Except the maintenance of the recommender system, the company also needs  to generate recommendations for each user using the existing database. The recommendation should depend on the current version of data and not disturb the maintenance of the recommender system.  Note that when an embedding update is going on, you can not at the same time read the embedding, as the embedding update is not an atomic operation.  As the embedding update can take a long time, and can be quite frequent, you need to figure out a way to allow recommendation to execute without getting blocked by the updates, and at the same time allowing the update to happen, and being able to use some quite recent updated embedding values for recommendation.  
+ 
+ **ToDo:**
+ 
+@@ -255,19 +179,3 @@ In this task, the input `Instruction`  set contains all three types of tasks: "i
+ **Grading:**
+ 
+ You will be graded by the correctness and delay of your recommendation (from the programs' start to recommend result output), as well as being able to read the updated embedding after a relatively short period of time.
+-
+-## Task-5: Inplace recommendation and update
+-
+-The goal of this task is the same as Task-4, except that you need to implement in-place updates and recommendations.
+-That is, you should not copy embeddings and then do the calculation on the copies.
+-Other instructions stay the same as Task-4. If your implementations are already an in-place version in Task-4,
+-you should implement a version that copies the embeddings from the embedding holder (this
+-one should be faster, as it trades space for time).
+-
+-**ToDo:**
+-
+-Similar with Task-4, you should output the recommend result as soon as you get it by calling the provided `Embedding::write_to_stdout()` (we accept all possible order of correct outputs). The delay of recommender response will impact your final score.  There is no need to output the final `EmbeddingHolder` in this tasks.
+-
+-**Grading:**
+-
+-You will be graded by the correctness and delay of your recommendation (from the programs' start to recommend result output), as well as being able to read the updated embedding after a relatively short period of time.
+diff --git a/Thread-1/README.pdf b/Thread-1/README.pdf
+new file mode 100644
+index 0000000..f66b59f
+--- /dev/null
++++ b/Thread-1/README.pdf
+@@ -0,0 +1,284 @@
++Project 1: Multi-thread Programming
++
++This project uses a (oversimplified) machine learning inference system to allow you to put some
++basic OS concepts into practice and learn how system-level optimizations help improve
++performance.
++
++Suppose you are hired by a company to improve the efficiency of the optimization process of a
++recommender system. This recommender system represents the users and items (i.e. goods
++offered by the E-commerce platform) as vectors, and uses these embedding vectors to calculate
++the semantic similarities between user-user, user-item and item-item pairs. Since you are a
++system expert, the company hopes you can improve the efficiency of the embedding
++maintenance of the recommender system.
++
++Introduction
++
++The AI algorithm engineers of the company explain the basics of the setup to you, as follows.
++
++Embedding Vectors
++
++Embedding vectors represent the entities (either a user or an item). These vectors are stored as
++rows in an embedding matrix. These embedding vectors have a property that the product of two
++embedding vectors (maybe after some processing) indicates the similarity of the two
++corresponding entities.
++
++   1 ...
++   2 # The following line illustrates the i-th row of the embedding matrix
++   3 -0.6365,-0.1280,-0.7883,0.9397,0.2103,0.3158,0.9385,-0.0953,-0.4800,-0.7988
++   4 ...
++
++Operations on Embedding Vectors
++
++Three important operations on the embedding vectors are
++
++   1. Initializing ( init_embedding ) the vectors on cold start ( cold_start ) ;
++   2. Updating the vectors after observing user activities ( update ).
++   3. Recommend an item to a user from a list of items.
++
++The embedding initialization is difficult, as there is few information about a new entity. For a new
++user, a simple method is to randomly initialize the embedding and run some cold start procedure
++(e.g. recommending some popular item) to probe the user's interest. For a new item, we may
++expose them to highly active users.
++
++After observing some user activities, we gather information about the users' interest and items'
++popularity. To encode this information into the embeddings, we need to update the embedding
++vectors with some optimization method (e.g. gradient descent) where we pull in the distance
++between similar entities and push away those dissimilar entities.
++
++Embedding Holder
++In this project, we utilize EmbeddingHolder (a collection of embeddings) as the database to store
++and update the company's data. Initially, we read data from *.in to create two basic
++EmbeddingHolder for users and items respectively; our task is to update this database according
++to the incoming Instruction s.
++
++Codebase
++
++The project directory looks like this:
++
++     1.
++     2 ├── benchmark.cc
++     3 ├── BUILD
++     4 ├── format.cc
++     5 ├── lib
++     6 │ ├── BUILD
++     7 │ ├── embedding.cc
++     8 │ ├── embedding.h
++     9 │ ├── embedding_test.cc
++   10 │ ├── instruction.cc
++   11 │ ├── instruction.h
++   12 │ ├── model.cc
++   13 │ ├── model.h
++   14 │ ├── model_test.cc
++   15 │ ├── utils.cc
++   16 │ ├── utils.h
++   17 │ └── util_test.cc
++   18 ├── q0.cc
++   19 ├── q1.cc
++   20 ├── q2.cc
++   21 ├── q3.cc
++   22 ├── README.md
++   23 └── WORKSPACE
++   24
++
++The source files in lib/ implements the basic interfaces of the system. The lib/embedding.h
++contains the main interface of the embedding matrix data holder. The mentioned operations on
++the embedding matrix are implemented in lib/model.h . Instruction is in
++lib/instruction.h . The utilities are in lib/utils.h . You find these files belongs to the AI team
++and you should not modify them, and do your optimization all from the system level.
++
++The entrance of the program is in q*.cc . You can modify everything in this project, except those
++tests in lib . You should ensure that after your modification, it still passes the tests in lib .
++
++The project builds with the bazel build system, as we discussed in the discussion session. You
++should install bazel following the online documents and read the BUILD and WORKSPACE files
++carefully to understand the dependencies and code structure.
++
++Unit testing
++
++Writing unit tests is an essential way to build and optimize system programs and thus we would
++require that you include unit tests for all major functions you write for your code.
++
++We have provided test cases in the libraries for you as examples. Please do not modify these unit
++tests. You can modify library code, and add your own test cases to the library test, but make sure
++that after your modification, our provided test cases still pass.
++Format Checking
++
++In this project we test the standard output stream for final grading, so make sure that you output
++the correct answer as you expect. We provide a format checking script in format.cc . You can
++modify it to test all output results of your submission. Run the format checking script after
++building it like this:
++
++   1 bazel-bin/q0 |grep [OUTPUT] > format.out && bazel-bin/format
++
++Instruction Files
++
++The workload of the company comes as Instruction s with order and payload fields. Both
++fields are integers. In this project, the Instruction.order is either 0, 1 or 2, indicating the task of
++"init", "update" or "recommend". The workflow of different task types are different as described
++bellow.
++
++      For “init”, you should first create a new embedding. The payload is a list of existing
++      embedding indices in the input matrix ( EmbeddingHolder ) that are used for cold start
++      (downstream applications may use them for interest probing). You should add this new
++      embedding into the EmbeddingHolder using append . Then you need to call cold_start for
++      each of the embedding indices. Note that after cold_start , only user embeddings are
++      updated (see q0.cc for example).
++      For “update”, the payload is [user_idx, item_idx, label, (iter_idx)] . You should
++      invoke the calc_gradient on these two embedding vectors from lib/model.h and then
++      call update_embedding from lib/embedding.h on both the user and the items
++      (see project/embedding.cc:run_q0 for example). The iter_idx indicates the epoch
++      number of current update, see Task-3 for information.
++      For "recommend", the the payload is [user_idx, iter_idx, item_idx1, item_idx2,
++      item_idx3, item_idx4, ...] . You should invoke the recommend on these embedding
++      vectors from lib/model.h and then output the result.
++
++Note that NO provided functions are thread safe on their own.
++
++Other coding instructions
++
++For the following tasks, you should minimize duplicate code. If there are code sharing among the
++following tasks, you should extract as much shared code as possible into separate .h and .cc
++library files, but not put everything into a single .cc file. You should create your own _test.cc
++file for your library code. 20% of this project grade are reserved for good coding style (including
++the completeness of your own test cases).
++
++We recommend you to use the standard C++11 Threading to implement multi-threading.
++However, please feel free to use any other C++ threading library (such as pthread , or Intel's TBB
++to do the following task). If you need external libraries, please include them in the WORKSPACE file
++and make them to install and build automatically. The TAs are not obliged to manually install any
++libraries on the grading machine.
++
++Submission instructions
++
++You should create a .diff file of your latest commit from the latest commit of the main project
++on learn.tsinghua, as follows:
++   1 git diff YOUR_COMMIT_SHA1 MAIN_REPO_COMMIT_SHA1 >
++         ${STUDENT_ID_1}_${STUDENT_ID_2}.diff
++
++To test whether your .diff works, clone a new repo and call git apply
++${STUDENT_ID_1}_${STUDENT_ID_2}.diff and see if your code still works.
++
++Task-0: Play with bazel build, the code and sanity
++check
++
++In this task, you need to understand the project structure, read the q0.cc code and the
++project/BUILD files, install bazel, build and run the provided sample program and tests. This
++task is not included for grading. Just provided as an example for you to read. If you need more
++information on the Bazel build system, please refer to
++
++    NOTE: You can take this task's code as an example and benchmark for following tasks, but
++    do not copy and paste this unoptimized code! Otherwise you will get penalized. Task-0 is not
++    included in the final grading.
++
++    NOTE: Your code is not required to output exactly the same answer as q0.cc . You just need
++    to guarantee your code is thread-safe.
++
++Task-1: Supporting concurrent users
++
++At the beginning, the recommender system is new and has very few items or users. Fortunately,
++the company attracts more and more users. Thus, we need to modify the system so that when
++multiple users come in at the same time, and send Instruction s concurrently the system could
++behave correctly and efficiently.
++
++ToDo:
++
++In this task, your job is to process an Instruction set of "init" and "update". Considering that
++cal_gradient is time-consuming (10s of seconds running time, mostly waiting for I/O), you
++should think of handling multiple Instruction s concurrently. Design a synchronization
++mechanism using locks to guarantee that your codes are thread-safe. Output your final
++EmbeddingHolder of 1) users and 2) items using the provided
++EmbeddingHolder::write_to_stdout() .
++
++Again, note that NO provided functions are thread safe on their own. Feel free to modify these
++functions in the lib/ directory, but do not modify existing test cases there (you can add your
++own test cases).
++
++Grading:
++
++You will be graded by both the correctness and efficiency of your calculation under heavy and
++arbitrary mixtures of incoming Instruction s.
++
++    NOTE: In this task, a single Instruction only runs in a single thread (i.e. no internal
++    parallelism within an Instruction ).
++
++    NOTE: The correctness means thread-safety. We allow any order of updates, as long as it is
++    thread-safe.
++
++Task-2: Accelerate "Init" task through concurrency
++Now the engineers find that it is still too slow to conduct each "init" task, as each of the task need
++to read multiple embeddings to perform the init. They hope to read and use these embeddings
++concurrently so shorten the time required to call a single "init". We can further speed up the
++process by building an internally-concurrent "init" function.
++
++ToDo:
++
++In this task, your job is to process an Instruction set of "init" and "update". You can start with
++your codes in Task-1. Try to conduct multiple cold_start in parallel and update the newly
++initialized embedding collectively without violating thread-safety. Output your final
++EmbeddingHolder of 1) users and 2) items using the provided
++EmbeddingHolder::write_to_stdout() function. Note that you still need to support multiple
++concurrent users.
++
++Grading:
++
++You will be graded by the correctness and efficiency of your calculation.
++
++Task-3: Supporting incremental embedding updates
++
++Now the recommender system has many users and items. Everyday, the system observes user
++activities and use them to update the embedding matrix for better recommendation
++performance. In this task, you will need to implement the updating process of the embedding
++matrix. The algorithm engineers of the company come up with a "genius" optimization algorithm.
++This algorithm requires the optimizer to update the embeddings iteratively, and they call each
++iteration an epoch. This innovative epoch-based optimization differs from existing methods in that
++the calculation of later epochs depends on the results of earlier epochs. In this task, your job is to
++support this epoch-based update.
++
++ToDo:
++
++In this task, you should deal with the data dependency among Instruction s. The input
++Instruction set contains both "init" and "update" tasks. The iter_idx s are in ascending order,
++and takes nonnegative integer values starting from 0. One update instruction should be
++executed only after all update instructions with smaller iter_idx s are completed to guarantee
++the dependency correctness (using data from the last iteration as input). You can start with your
++codes in Task-2 and try to make all update execution parallel and thread-safety. Output your final
++EmbeddingHolder of 1) users and 2) items using EmbeddingHolder::write_to_stdout() .
++
++Grading:
++
++You will be graded by the correctness and efficiency of your calculation.
++
++Task-4: Doing recommendation while updating the
++embedding
++
++Except the maintenance of the recommender system, the company also needs to generate
++recommendations for each user using the existing database. The recommendation should
++depend on the current version of data and not disturb the maintenance of the recommender
++system. Note that when an embedding update is going on, you can not at the same time read the
++embedding, as the embedding update is not an atomic operation. As the embedding update can
++take a long time, and can be quite frequent, you need to figure out a way to allow
++recommendation to execute without getting blocked by the updates, and at the same time
++allowing the update to happen, and being able to use some quite recent updated embedding
++values for recommendation.
++ToDo:
++
++In this task, the input Instruction set contains all three types of tasks: "init", "update", and
++"recommend". Note that the "recommend" instruction contains an iter_idx , and you should use
++the embeddings after the updates with index iter_idx finish. A recommend instruction with
++iter_idx=-1 can be scheduled before any updates. You can start with your codes in Task-3. You
++should output the recommend result as soon as you get it by calling the provided
++Embedding::write_to_stdout() (we accept all possible order of correct outputs). The delay of
++recommender response will impact your final score. There is no need to output the final
++EmbeddingHolder in this tasks.
++
++    NOTE: You should output your recommend results in a thread-safe manner, too.
++
++    NOTE: In this task, update instructions still have iter_idx constraints. Recommend
++    instructions can be executed after update instructions with larger iter_idx .
++
++Grading:
++
++You will be graded by the correctness and delay of your recommendation (from the programs'
++start to recommend result output), as well as being able to read the updated embedding after a
++relatively short period of time.
++
+\ No newline at end of file
+diff --git a/Thread-1/WORKSPACE b/Thread-1/WORKSPACE
+index 6760453..6d24ab2 100644
+--- a/Thread-1/WORKSPACE
++++ b/Thread-1/WORKSPACE
+@@ -1,15 +1,15 @@
+-load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
+-
+-## google test dependency
+-http_archive(
+-  name = "gtest",
+-  urls = ["https://github.com.cnpmjs.org/google/googletest/archive/refs/tags/release-1.11.0.zip"],
+-  strip_prefix = "googletest-release-1.11.0",
+-)
+-## google benchmark dependency
+-http_archive(
+-  name = "gbench",
+-  urls = ["https://github.com.cnpmjs.org/google/benchmark/archive/refs/tags/v1.6.0.zip"],
+-  strip_prefix = "benchmark-1.6.0",
+-  sha256 = "3da225763533aa179af8438e994842be5ca72e4a7fed4d7976dc66c8c4502f58"
+-)
++load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
++
++## google test dependency
++http_archive(
++  name = "gtest",
++  urls = ["https://github.com.cnpmjs.org/google/googletest/archive/refs/tags/release-1.11.0.zip"],
++  strip_prefix = "googletest-release-1.11.0",
++)
++## google benchmark dependency
++http_archive(
++  name = "gbench",
++  urls = ["https://github.com.cnpmjs.org/google/benchmark/archive/refs/tags/v1.6.0.zip"],
++  strip_prefix = "benchmark-1.6.0",
++  sha256 = "3da225763533aa179af8438e994842be5ca72e4a7fed4d7976dc66c8c4502f58"
++)
+diff --git a/Thread-1/benchmark.cc b/Thread-1/benchmark.cc
+index 43b1f43..2c5fc84 100644
+--- a/Thread-1/benchmark.cc
++++ b/Thread-1/benchmark.cc
+@@ -1,23 +1,23 @@
+-/*
+- * This file provides an example of how to do automatic benchmark.  Feel free
+- * to modify and use this tool.
+- */
+-
+-#include <benchmark/benchmark.h>
+-
+-static void BM_StringCreation(benchmark::State& state) {
+-  for (auto _ : state)
+-    std::string empty_string;
+-}
+-// Register the function as a benchmark
+-BENCHMARK(BM_StringCreation);
+-
+-// Define another benchmark
+-static void BM_StringCopy(benchmark::State& state) {
+-  std::string x = "hello";
+-  for (auto _ : state)
+-    std::string copy(x);
+-}
+-BENCHMARK(BM_StringCopy);
+-
++/*
++ * This file provides an example of how to do automatic benchmark.  Feel free
++ * to modify and use this tool.
++ */
++
++#include <benchmark/benchmark.h>
++
++static void BM_StringCreation(benchmark::State& state) {
++  for (auto _ : state)
++    std::string empty_string;
++}
++// Register the function as a benchmark
++BENCHMARK(BM_StringCreation);
++
++// Define another benchmark
++static void BM_StringCopy(benchmark::State& state) {
++  std::string x = "hello";
++  for (auto _ : state)
++    std::string copy(x);
++}
++BENCHMARK(BM_StringCopy);
++
+ BENCHMARK_MAIN();
+\ No newline at end of file
+diff --git a/Thread-1/data/q0.in b/Thread-1/data/q0.in
+index a7e4563..f9a8604 100644
+--- a/Thread-1/data/q0.in
++++ b/Thread-1/data/q0.in
+@@ -1,20 +1,20 @@
+--0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
+-0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
+--0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
+-0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
+--0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
+-0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
+--0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
+--0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
+-0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
+-0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
+-0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
+-0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
+-0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
+-0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
+-0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
+-0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
+--0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
+-0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
+-0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
+--0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
++-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
++0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
++-0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
++0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
++-0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
++0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
++-0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
++-0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
++0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
++0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
++0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
++0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
++0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
++0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
++0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
++0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
++-0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
++0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
++0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
++-0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
+diff --git a/Thread-1/data/q0_instruction.tsv b/Thread-1/data/q0_instruction.tsv
+index 7447456..65e950a 100644
+--- a/Thread-1/data/q0_instruction.tsv
++++ b/Thread-1/data/q0_instruction.tsv
+@@ -1,20 +1,20 @@
+-1 3 5 1
+-1 1 2 0
+-1 7 5 0
+-1 2 9 1
+-0 0 1 2 3 4 5 6 7 8
+-0 7 3 5 9
+-1 1 2 0
+-1 0 6 1
+-2 7 -1 1 5 6
+-1 4 5 0
+-1 3 8 1
+-0 5 6 2 9
+-0 1 2 3 5 7 8 9
+-1 3 7 1
+-1 8 9 0
+-2 8 -1 3 2 4 6
+-2 3 -1 1 7 8 9
+-1 1 3 1
+-1 2 4 0
++1 3 5 1
++1 1 2 0
++1 7 5 0
++1 2 9 1
++0 0 1 2 3 4 5 6 7 8
++0 7 3 5 9
++1 1 2 0
++1 0 6 1
++2 7 -1 1 5 6
++1 4 5 0
++1 3 8 1
++0 5 6 2 9
++0 1 2 3 5 7 8 9
++1 3 7 1
++1 8 9 0
++2 8 -1 3 2 4 6
++2 3 -1 1 7 8 9
++1 1 3 1
++1 2 4 0
+ 2 2 -1 4 5 6 3 7 9
+\ No newline at end of file
+diff --git a/Thread-1/data/q1.in b/Thread-1/data/q1.in
+index a7e4563..f9a8604 100644
+--- a/Thread-1/data/q1.in
++++ b/Thread-1/data/q1.in
+@@ -1,20 +1,20 @@
+--0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
+-0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
+--0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
+-0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
+--0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
+-0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
+--0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
+--0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
+-0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
+-0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
+-0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
+-0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
+-0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
+-0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
+-0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
+-0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
+--0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
+-0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
+-0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
+--0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
++-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
++0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
++-0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
++0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
++-0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
++0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
++-0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
++-0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
++0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
++0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
++0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
++0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
++0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
++0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
++0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
++0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
++-0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
++0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
++0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
++-0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
+diff --git a/Thread-1/data/q1_instruction.tsv b/Thread-1/data/q1_instruction.tsv
+index c1f5312..8caae94 100644
+--- a/Thread-1/data/q1_instruction.tsv
++++ b/Thread-1/data/q1_instruction.tsv
+@@ -1,11 +1,11 @@
+-0 0 1 2 3 4 5 6 7 8
+-0 7 3 5 9
+-1 1 3 0
+-0 8 4 2 0
+-1 7 3 1
+-1 4 5 1
+-1 3 6 0
+-1 9 7 0
+-0 5 6 2 9
+-0 1 2 3 5 7 8 9
++0 0 1 2 3 4 5 6 7 8
++0 7 3 5 9
++1 1 3 0
++0 8 4 2 0
++1 7 3 1
++1 4 5 1
++1 3 6 0
++1 9 7 0
++0 5 6 2 9
++0 1 2 3 5 7 8 9
+ 1 7 8 1
+\ No newline at end of file
+diff --git a/Thread-1/data/q2.in b/Thread-1/data/q2.in
+index a7e4563..f9a8604 100644
+--- a/Thread-1/data/q2.in
++++ b/Thread-1/data/q2.in
+@@ -1,20 +1,20 @@
+--0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
+-0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
+--0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
+-0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
+--0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
+-0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
+--0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
+--0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
+-0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
+-0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
+-0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
+-0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
+-0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
+-0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
+-0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
+-0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
+--0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
+-0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
+-0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
+--0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
++-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
++0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
++-0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
++0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
++-0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
++0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
++-0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
++-0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
++0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
++0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
++0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
++0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
++0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
++0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
++0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
++0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
++-0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
++0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
++0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
++-0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
+diff --git a/Thread-1/data/q2_instruction.tsv b/Thread-1/data/q2_instruction.tsv
+index c1f5312..8caae94 100644
+--- a/Thread-1/data/q2_instruction.tsv
++++ b/Thread-1/data/q2_instruction.tsv
+@@ -1,11 +1,11 @@
+-0 0 1 2 3 4 5 6 7 8
+-0 7 3 5 9
+-1 1 3 0
+-0 8 4 2 0
+-1 7 3 1
+-1 4 5 1
+-1 3 6 0
+-1 9 7 0
+-0 5 6 2 9
+-0 1 2 3 5 7 8 9
++0 0 1 2 3 4 5 6 7 8
++0 7 3 5 9
++1 1 3 0
++0 8 4 2 0
++1 7 3 1
++1 4 5 1
++1 3 6 0
++1 9 7 0
++0 5 6 2 9
++0 1 2 3 5 7 8 9
+ 1 7 8 1
+\ No newline at end of file
+diff --git a/Thread-1/data/q3.in b/Thread-1/data/q3.in
+index a7e4563..f9a8604 100644
+--- a/Thread-1/data/q3.in
++++ b/Thread-1/data/q3.in
+@@ -1,20 +1,20 @@
+--0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
+-0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
+--0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
+-0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
+--0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
+-0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
+--0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
+--0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
+-0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
+-0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
+-0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
+-0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
+-0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
+-0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
+-0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
+-0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
+--0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
+-0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
+-0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
+--0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
++-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
++0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
++-0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
++0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
++-0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
++0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
++-0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
++-0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
++0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
++0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
++0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
++0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
++0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
++0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
++0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
++0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
++-0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
++0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
++0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
++-0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
+diff --git a/Thread-1/data/q3_instruction.tsv b/Thread-1/data/q3_instruction.tsv
+index b2fcc3e..ba24d97 100644
+--- a/Thread-1/data/q3_instruction.tsv
++++ b/Thread-1/data/q3_instruction.tsv
+@@ -1,16 +1,16 @@
+-1 3 5 1 0
+-1 1 2 0 0
+-1 7 5 0 0
+-0 0 1 2 3 4 5 6 7 8
+-0 7 3 5 9
+-1 2 9 1 0
+-1 1 2 0 1
+-1 0 6 1 1
+-0 5 6 2 9
+-0 1 2 3 5 7 8 9
+-1 4 5 0 1
+-1 3 8 1 1
+-1 3 7 1 2
+-1 8 9 0 2
+-1 1 3 1 2
++1 3 5 1 0
++1 1 2 0 0
++1 7 5 0 0
++0 0 1 2 3 4 5 6 7 8
++0 7 3 5 9
++1 2 9 1 0
++1 1 2 0 1
++1 0 6 1 1
++0 5 6 2 9
++0 1 2 3 5 7 8 9
++1 4 5 0 1
++1 3 8 1 1
++1 3 7 1 2
++1 8 9 0 2
++1 1 3 1 2
+ 1 2 4 0 2
+\ No newline at end of file
+diff --git a/Thread-1/data/q4.in b/Thread-1/data/q4.in
+index a7e4563..f9a8604 100644
+--- a/Thread-1/data/q4.in
++++ b/Thread-1/data/q4.in
+@@ -1,20 +1,20 @@
+--0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
+-0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
+--0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
+-0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
+--0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
+-0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
+--0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
+--0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
+-0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
+-0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
+-0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
+-0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
+-0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
+-0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
+-0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
+-0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
+--0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
+-0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
+-0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
+--0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
++-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
++0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
++-0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
++0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
++-0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
++0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
++-0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
++-0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
++0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
++0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
++0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
++0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
++0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
++0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
++0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
++0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
++-0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
++0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
++0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
++-0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
+diff --git a/Thread-1/data/q4_instruction.tsv b/Thread-1/data/q4_instruction.tsv
+index 57d9916..2dc12d6 100644
+--- a/Thread-1/data/q4_instruction.tsv
++++ b/Thread-1/data/q4_instruction.tsv
+@@ -1,20 +1,20 @@
+-1 3 5 1 0
+-1 1 2 0 0
+-1 7 5 0 0
+-1 2 9 1 0
+-0 0 1 2 3 4 5 6 7 8
+-0 7 3 5 9
+-1 1 2 0 1
+-1 0 6 1 1
+-2 7 0 0 1 5 6
+-1 4 5 0 1
+-1 3 8 1 1
+-0 5 6 2 9
+-0 1 2 3 5 7 8 9
+-1 3 7 1 2
+-1 8 9 0 2
+-2 8 1 0 3 2 4 6
+-2 3 2 1 7 8 9
+-1 1 3 1 2
+-1 2 4 0 2
++1 3 5 1 0
++1 1 2 0 0
++1 7 5 0 0
++1 2 9 1 0
++0 0 1 2 3 4 5 6 7 8
++0 7 3 5 9
++1 1 2 0 1
++1 0 6 1 1
++2 7 0 0 1 5 6
++1 4 5 0 1
++1 3 8 1 1
++0 5 6 2 9
++0 1 2 3 5 7 8 9
++1 3 7 1 2
++1 8 9 0 2
++2 8 1 0 3 2 4 6
++2 3 2 1 7 8 9
++1 1 3 1 2
++1 2 4 0 2
+ 2 2 -1 4 5 6 3 7 9
+\ No newline at end of file
+diff --git a/Thread-1/lib/BUILD b/Thread-1/lib/BUILD
+index 07eb930..c264255 100644
+--- a/Thread-1/lib/BUILD
++++ b/Thread-1/lib/BUILD
+@@ -1,100 +1,130 @@
+-##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
+-
+-cc_library(
+-    name = "utils_lib",
+-    srcs = [
+-        "utils.cc",
+-        ],
+-    hdrs = [
+-        "utils.h",
+-        ],
+-	visibility = [
+-		"//visibility:public",
+-	],
+-)
+-
+-cc_test(
+-  name = "utils_lib_test",
+-  size = "small",
+-  srcs = ["util_test.cc"],
+-  deps = [
+-      "@gtest//:gtest_main",
+-	  ":utils_lib",
+-      ],
+-)
+-
+-cc_library(
+-    name = "embedding_lib",
+-    srcs = [
+-        "embedding.cc",
+-        ],
+-    hdrs = [
+-        "embedding.h",
+-        ],
+-	deps = [
+-        ":utils_lib"
+-    ],
+-	visibility = [
+-		"//visibility:public",
+-	],
+-)
+-
+-cc_test(
+-  name = "embedding_lib_test",
+-  size = "small",
+-  srcs = ["embedding_test.cc"],
+-  deps = [
+-      "@gtest//:gtest_main",
+-	  ":embedding_lib",
+-      ],
+-)
+-
+-cc_library(
+-    name = "instruction_lib",
+-    srcs = [
+-        "instruction.cc",
+-        ],
+-    hdrs = [
+-        "instruction.h",
+-        ],
+-	visibility = [
+-		"//visibility:public",
+-	],
+-)
+-
+-cc_test(
+-  name = "instruction_lib_test",
+-  size = "small",
+-  srcs = ["instruction_test.cc"],
+-  deps = [
+-      "@gtest//:gtest_main",
+-	  ":instruction_lib",
+-      ],
+-)
+-
+-cc_library(
+-    name = "model_lib",
+-    srcs = [
+-        "model.cc",
+-        ],
+-    hdrs = [
+-        "model.h",
+-        ],
+-	deps = [
+-        ":embedding_lib",
+-		":utils_lib",
+-    ],
+-	visibility = [
+-		"//visibility:public",
+-	],
+-)
+-
+-cc_test(
+-  name = "model_lib_test",
+-  size = "large",
+-  srcs = ["model_test.cc"],
+-  deps = [
+-      "@gtest//:gtest_main",
+-	  ":model_lib",
+-      ],
++##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
++
++cc_library(
++    name = "server_lib",
++    srcs = [
++        "server.cc",
++        ],
++    hdrs = [
++        "server.h",
++        ],
++    deps = [
++        ":embedding_lib",
++		":instruction_lib",
++        ":model_lib",
++        ":utils_lib",
++    ],
++	visibility = [
++		"//visibility:public",
++	],
++)
++
++cc_test(
++  name = "server_lib_test",
++  size = "small",
++  srcs = ["server_test.cc"],
++  deps = [
++      "@gtest//:gtest_main",
++	  ":server_lib",
++      ":embedding_lib",
++      ],
++)
++
++cc_library(
++    name = "utils_lib",
++    srcs = [
++        "utils.cc",
++        ],
++    hdrs = [
++        "utils.h",
++        ],
++	visibility = [
++		"//visibility:public",
++	],
++)
++
++cc_test(
++  name = "utils_lib_test",
++  size = "small",
++  srcs = ["util_test.cc"],
++  deps = [
++      "@gtest//:gtest_main",
++	  ":utils_lib",
++      ],
++)
++
++cc_library(
++    name = "embedding_lib",
++    srcs = [
++        "embedding.cc",
++        ],
++    hdrs = [
++        "embedding.h",
++        ],
++	deps = [
++        ":utils_lib"
++    ],
++	visibility = [
++		"//visibility:public",
++	],
++)
++
++cc_test(
++  name = "embedding_lib_test",
++  size = "small",
++  srcs = ["embedding_test.cc"],
++  deps = [
++      "@gtest//:gtest_main",
++	  ":embedding_lib",
++      ],
++)
++
++cc_library(
++    name = "instruction_lib",
++    srcs = [
++        "instruction.cc",
++        ],
++    hdrs = [
++        "instruction.h",
++        ],
++	visibility = [
++		"//visibility:public",
++	],
++)
++
++cc_test(
++  name = "instruction_lib_test",
++  size = "small",
++  srcs = ["instruction_test.cc"],
++  deps = [
++      "@gtest//:gtest_main",
++	  ":instruction_lib",
++      ],
++)
++
++cc_library(
++    name = "model_lib",
++    srcs = [
++        "model.cc",
++        ],
++    hdrs = [
++        "model.h",
++        ],
++	deps = [
++        ":embedding_lib",
++		":utils_lib",
++    ],
++	visibility = [
++		"//visibility:public",
++	],
++)
++
++cc_test(
++  name = "model_lib_test",
++  size = "large",
++  srcs = ["model_test.cc"],
++  deps = [
++      "@gtest//:gtest_main",
++	  ":model_lib",
++      ],
+ )
+\ No newline at end of file
+diff --git a/Thread-1/lib/embedding.cc b/Thread-1/lib/embedding.cc
+index 966a76d..2e833e7 100644
+--- a/Thread-1/lib/embedding.cc
++++ b/Thread-1/lib/embedding.cc
+@@ -1,7 +1,9 @@
++
+ #include <fstream>
+ #include <iostream>
+ #include <sstream>
+ #include <cmath>
++#include <mutex>
+ 
+ #include "utils.h"
+ #include "embedding.h"
+@@ -23,11 +25,23 @@ Embedding::Embedding(int length, double* data) {
+ }
+ 
+ Embedding::Embedding(Embedding* origin) {
++    std::lock_guard<std::mutex> lock(origin->mux);
+ 	int length = origin->get_length();
+     embbedingAssert(length > 0, "Non-positive length encountered!", NON_POSITIVE_LEN);
+     double* oldData = origin->get_data();
+     double* newData = new double[length];
+-    for(int i = 0; i<length; i++)newData[i] = oldData[i];
++    for(int i = 0; i<length; i++) newData[i] = oldData[i];
++    this->length = length;
++    this->data = newData;
++}
++
++Embedding::Embedding(Embedding const& origin) {
++    std::lock_guard<std::mutex> lock(origin.mux);
++	int length = origin.length;
++    embbedingAssert(length > 0, "Non-positive length encountered!", NON_POSITIVE_LEN);
++    double* oldData = origin.data;
++    double* newData = new double[length];
++    for(int i = 0; i<length; i++) newData[i] = oldData[i];
+     this->length = length;
+     this->data = newData;
+ }
+@@ -58,6 +72,8 @@ void Embedding::update(Embedding* gradient, double stepsize) {
+ }
+ 
+ std::string Embedding::to_string() {
++    std::lock_guard<std::mutex> lock(this->mux);
++
+     std::string res;
+     for (int i = 0; i < this->length; ++i) {
+         if (i > 0) res += ',';
+@@ -71,7 +87,7 @@ void Embedding::write_to_stdout() {
+     std::cout << prefix << this->to_string() << '\n';
+ }
+ 
+-Embedding Embedding::operator+(const Embedding &another) {
++Embedding Embedding::operator+(Embedding &another) {
+     double* data = new double[this->length];
+     for (int i = 0; i < this->length; ++i) {
+         data[i] = this->data[i] + another.data[i];
+@@ -87,7 +103,7 @@ Embedding Embedding::operator+(const double value) {
+     return Embedding(this->length, data);
+ }
+ 
+-Embedding Embedding::operator-(const Embedding &another) {
++Embedding Embedding::operator-(Embedding &another) {
+     double* data = new double[this->length];
+     for (int i = 0; i < this->length; ++i) {
+         data[i] = this->data[i] - another.data[i];
+@@ -103,7 +119,7 @@ Embedding Embedding::operator-(const double value) {
+     return Embedding(this->length, data);
+ }
+ 
+-Embedding Embedding::operator*(const Embedding &another) {
++Embedding Embedding::operator*(Embedding &another) {
+     double* data = new double[this->length];
+     for (int i = 0; i < this->length; ++i) {
+         data[i] = this->data[i] * another.data[i];
+@@ -119,7 +135,7 @@ Embedding Embedding::operator*(const double value) {
+     return Embedding(this->length, data);
+ }
+ 
+-Embedding Embedding::operator/(const Embedding &another) {
++Embedding Embedding::operator/(Embedding &another) {
+     double* data = new double[this->length];
+     for (int i = 0; i < this->length; ++i) {
+         data[i] = this->data[i] / another.data[i];
+@@ -135,7 +151,7 @@ Embedding Embedding::operator/(const double value) {
+     return Embedding(this->length, data);
+ }
+ 
+-bool Embedding::operator==(const Embedding &another) {
++bool Embedding::operator==(Embedding &another) {
+     for (int i = 0; i < this->length; ++i) {
+         if(fabs(this->data[i]-another.data[i])>1.0e-6)return false;
+     }
+@@ -174,20 +190,26 @@ EmbeddingMatrix EmbeddingHolder::read(std::string filename) {
+ }
+ 
+ int EmbeddingHolder::append(Embedding* data) {
++    std::lock_guard<std::mutex> lock(this->mux);
++
+     int indx = this->emb_matx.size();
+     embbedingAssert(
+-        data->get_length() == this->emb_matx[0]->get_length(),
++        indx == 0 | data->get_length() == this->emb_matx[0]->get_length(),
+         "Embedding to append has a different length!", LEN_MISMATCH
+     );
+     this->emb_matx.push_back(data);
++
++    this->cv.notify_all();
+     return indx;
+ }
+ 
+ void EmbeddingHolder::write(std::string filename) {
++    std::lock_guard<std::mutex> lock(this->mux);
++
+     std::ofstream ofs(filename);
+     if (ofs.is_open()) {
+         for (Embedding* emb: this->emb_matx) {
+-            ofs << emb->to_string() << '\n';
++            ofs << emb->to_string() + '\n';
+         }
+         ofs.close();
+     } else {
+@@ -196,9 +218,11 @@ void EmbeddingHolder::write(std::string filename) {
+ }
+ 
+ void EmbeddingHolder::write_to_stdout() {
++    std::lock_guard<std::mutex> lock(this->mux);
++
+     std::string prefix("[OUTPUT]");
+     for (Embedding* emb: this->emb_matx) {
+-        std::cout << prefix << emb->to_string() << '\n';
++        std::cout << prefix + emb->to_string() + '\n';
+     }
+ }
+ 
+@@ -208,16 +232,45 @@ EmbeddingHolder::~EmbeddingHolder() {
+     }
+ }
+ 
+-void EmbeddingHolder::update_embedding(
+-        int idx, EmbeddingGradient* gradient, double stepsize) {
+-    this->emb_matx[idx]->update(gradient, stepsize);
++void EmbeddingHolder::update_embedding(int idx, EmbeddingGradient* gradient, double stepsize) {
++    Embedding* emb = this->get_embedding(idx);
++    emb->lock();
++    emb->update(gradient, stepsize);
++    emb->unlock();
+ }
+ 
+-bool EmbeddingHolder::operator==(const EmbeddingHolder &another) {
+-    if (this->get_n_embeddings() != another.emb_matx.size())
++Embedding* EmbeddingHolder::get_embedding(int idx) {
++    std::unique_lock<std::mutex> lock(this->mux);
++
++    while (idx >= this->emb_matx.size()) {
++        this->cv.wait(lock);
++    }
++    return this->emb_matx[idx];
++}
++
++unsigned int EmbeddingHolder::get_n_embeddings() {
++    std::lock_guard<std::mutex> lock(this->mux);
++
++    return this->emb_matx.size();
++}
++
++int EmbeddingHolder::get_emb_length() {
++    std::lock_guard<std::mutex> lock(this->mux);
++
++    return this->emb_matx.empty()? 0: this->emb_matx[0]->get_length();
++}
++
++bool EmbeddingHolder::operator==(EmbeddingHolder &another) {
++    std::lock_guard<std::mutex> lock(this->mux);
++    std::lock_guard<std::mutex> lock1(another.mux);
++
++    if (this->emb_matx.size() != another.emb_matx.size())
+         return false;
++
+     for (int i = 0; i < (int)this->emb_matx.size(); ++i) {
+-        if(!(*(this->emb_matx[i]) == *(another.get_embedding(i)))){
++        std::lock_guard<std::mutex> lock2(this->emb_matx[i]->mux);
++        std::lock_guard<std::mutex> lock3(another.emb_matx[i]->mux);
++        if(!(*(this->emb_matx[i]) == *(another.emb_matx[i]))){
+         	return false;
+ 		}
+     }
+diff --git a/Thread-1/lib/embedding.h b/Thread-1/lib/embedding.h
+index 6e13d14..4a360c8 100644
+--- a/Thread-1/lib/embedding.h
++++ b/Thread-1/lib/embedding.h
+@@ -1,8 +1,22 @@
+ #ifndef THREAD_LIB_EMBEDDING_H_
+ #define THREAD_LIB_EMBEDDING_H_
+ 
++/**
++ * Embedding:
++ * Constructor and output method get lock automatically
++ * get data, operaters will not get lock
++ * 
++ * only when do read-calc-write, should get wmux (then get mux when write),
++ * so that thread only want to read also can read when calc,
++ * thread also want to do read-calc-write cannot read
++ * 
++ * EmbeddingHolder: all methods are safe
++*/
++
+ #include <string>
+ #include <vector>
++#include <mutex>
++#include <condition_variable>
+ 
+ namespace proj1 {
+ 
+@@ -18,6 +32,7 @@ public:
+     Embedding(int, double*);
+     Embedding(int, std::string);
+     Embedding(Embedding*);
++    Embedding(Embedding const&);
+     ~Embedding() { delete []this->data; }
+     double* get_data() { return this->data; }
+     int get_length() { return this->length; }
+@@ -25,15 +40,21 @@ public:
+     std::string to_string();
+     void write_to_stdout();
+     // Operators
+-    Embedding operator+(const Embedding&);
++    Embedding operator+(Embedding&);
+     Embedding operator+(const double);
+-    Embedding operator-(const Embedding&);
++    Embedding operator-(Embedding&);
+     Embedding operator-(const double);
+-    Embedding operator*(const Embedding&);
++    Embedding operator*(Embedding&);
+     Embedding operator*(const double);
+-    Embedding operator/(const Embedding&);
++    Embedding operator/(Embedding&);
+     Embedding operator/(const double);
+-    bool operator==(const Embedding&);
++    bool operator==(Embedding&);
++    //lock&unlock
++    mutable std::mutex wmux;
++    mutable std::mutex mux;
++    void lock() {this->mux.lock();}
++    void unlock() {this->mux.unlock();}
++
+ private:
+     int length;
+     double* data;
+@@ -52,14 +73,18 @@ public:
+     void write(std::string filename);
+     int append(Embedding *data);
+     void update_embedding(int, EmbeddingGradient*, double);
+-    Embedding* get_embedding(int idx) const { return this->emb_matx[idx]; } 
+-    unsigned int get_n_embeddings() { return this->emb_matx.size(); }
+-    int get_emb_length() {
+-        return this->emb_matx.empty()? 0: this->get_embedding(0)->get_length();
+-    }
+-    bool operator==(const EmbeddingHolder&);
++    Embedding* get_embedding(int idx);
++    unsigned int get_n_embeddings();
++    int get_emb_length();
++    bool operator==(EmbeddingHolder&);
++
+ private:
+     EmbeddingMatrix emb_matx;
++    // lock&unlock
++    mutable std::mutex mux;
++    // void lock() {this->mux.lock();}
++    // void unlock() {this->mux.unlock();}
++    mutable std::condition_variable cv;
+ };
+ 
+ } // namespace proj1
+diff --git a/Thread-1/lib/embedding_test.cc b/Thread-1/lib/embedding_test.cc
+index 84fab0d..1f3a763 100644
+--- a/Thread-1/lib/embedding_test.cc
++++ b/Thread-1/lib/embedding_test.cc
+@@ -1,67 +1,67 @@
+-#include <gtest/gtest.h>
+-#include <vector>
+-#include "embedding.h"
+-
+-
+-double embA[20] = {-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923};
+-double embB[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};
+-double embC[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};
+-
+-namespace proj1 {
+-namespace testing{
+-
+-class EmbeddingTest : public ::testing::Test {
+- protected:
+-  void SetUp() override {
+-    
+-	//double embC[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};	
+-	emb_testA = new Embedding(20, embA);  
+-	emb_testB = new Embedding(20, embB);   
+-	emb_testC = new Embedding(20, embC);   
+-	embhA.push_back(emb_testA);
+-	embhB.push_back(emb_testB);
+-	embhC.push_back(emb_testC);
+-	embh_testA = new EmbeddingHolder(embhA);
+-	embh_testB = new EmbeddingHolder(embhB);
+-	embh_testC = new EmbeddingHolder(embhC);
+-  }
+-  Embedding* emb_testA;
+-  Embedding* emb_testB;
+-  Embedding* emb_testC;
+-  std::vector<Embedding*>embhA;
+-  std::vector<Embedding*>embhB;
+-  std::vector<Embedding*>embhC;
+-  EmbeddingHolder* embh_testA;
+-  EmbeddingHolder* embh_testB;
+-  EmbeddingHolder* embh_testC;
+-};
+-
+-bool compare(Embedding* emb_test, double *data){
+-	double * tmp = emb_test->get_data();
+-	for(int i = 0; i<20; i++){
+-		if(tmp[i]!=data[i])return false;
+-	}
+-	return true;
+-}
+-
+-TEST_F(EmbeddingTest, test_embdedding){
+-	double emb[20] = {-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923};
+-	EXPECT_EQ(true, compare(emb_testA, emb));
+-	EXPECT_EQ((*emb_testB) == (*emb_testC), true);
+-	EXPECT_EQ((*emb_testB) == (*emb_testA), false);
+-	EXPECT_EQ((*emb_testC) == (*emb_testA), false);
+-}
+-
+-TEST_F(EmbeddingTest, test_embdeddingHolder){
+-	EXPECT_EQ((*embh_testB) == (*embh_testC), true);
+-	EXPECT_EQ((*embh_testB) == (*embh_testA), false);
+-	EXPECT_EQ((*embh_testC) == (*embh_testA), false);
+-}
+-
+-} // namespace testing
+-} // namespace proj1
+-
+-int main(int argc,char **argv){
+-  testing::InitGoogleTest(&argc,argv);
+-  return RUN_ALL_TESTS();
+-}
++#include <gtest/gtest.h>
++#include <vector>
++#include "embedding.h"
++
++
++double embA[20] = {-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923};
++double embB[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};
++double embC[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};
++
++namespace proj1 {
++namespace testing{
++
++class EmbeddingTest : public ::testing::Test {
++ protected:
++  void SetUp() override {
++    
++	//double embC[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};	
++	emb_testA = new Embedding(20, embA);  
++	emb_testB = new Embedding(20, embB);   
++	emb_testC = new Embedding(20, embC);   
++	embhA.push_back(emb_testA);
++	embhB.push_back(emb_testB);
++	embhC.push_back(emb_testC);
++	embh_testA = new EmbeddingHolder(embhA);
++	embh_testB = new EmbeddingHolder(embhB);
++	embh_testC = new EmbeddingHolder(embhC);
++  }
++  Embedding* emb_testA;
++  Embedding* emb_testB;
++  Embedding* emb_testC;
++  std::vector<Embedding*>embhA;
++  std::vector<Embedding*>embhB;
++  std::vector<Embedding*>embhC;
++  EmbeddingHolder* embh_testA;
++  EmbeddingHolder* embh_testB;
++  EmbeddingHolder* embh_testC;
++};
++
++bool compare(Embedding* emb_test, double *data){
++	double * tmp = emb_test->get_data();
++	for(int i = 0; i<20; i++){
++		if(tmp[i]!=data[i])return false;
++	}
++	return true;
++}
++
++TEST_F(EmbeddingTest, test_embdedding){
++	double emb[20] = {-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923};
++	EXPECT_EQ(true, compare(emb_testA, emb));
++	EXPECT_EQ((*emb_testB) == (*emb_testC), true);
++	EXPECT_EQ((*emb_testB) == (*emb_testA), false);
++	EXPECT_EQ((*emb_testC) == (*emb_testA), false);
++}
++
++TEST_F(EmbeddingTest, test_embdeddingHolder){
++	EXPECT_EQ((*embh_testB) == (*embh_testC), true);
++	EXPECT_EQ((*embh_testB) == (*embh_testA), false);
++	EXPECT_EQ((*embh_testC) == (*embh_testA), false);
++}
++
++} // namespace testing
++} // namespace proj1
++
++int main(int argc,char **argv){
++  testing::InitGoogleTest(&argc,argv);
++  return RUN_ALL_TESTS();
++}
+diff --git a/Thread-1/lib/instruction.cc b/Thread-1/lib/instruction.cc
+index ddfc532..afddcf5 100644
+--- a/Thread-1/lib/instruction.cc
++++ b/Thread-1/lib/instruction.cc
+@@ -1,31 +1,31 @@
+-#include <string>
+-#include <sstream>
+-#include <fstream>
+-#include "instruction.h"
+-
+-namespace proj1 {
+-
+-Instruction::Instruction(std::string line) {
+-    std::stringstream ss(line);
+-    int data;
+-    ss >> data;
+-    this->order = (InstructionOrder) data;
+-    while (ss >> data) {
+-        this->payloads.push_back(data);
+-    }
+-}
+-
+-Instructions read_instructrions(std::string filename) {
+-    std::ifstream ifs(filename);
+-    std::string line;
+-    Instructions data;
+-    if (ifs.is_open()) {
+-        while(std::getline(ifs, line)) {
+-            data.push_back(Instruction(line));
+-        }
+-        ifs.close();
+-    }
+-    return data;
+-}
+-
++#include <string>
++#include <sstream>
++#include <fstream>
++#include "instruction.h"
++
++namespace proj1 {
++
++Instruction::Instruction(std::string line) {
++    std::stringstream ss(line);
++    int data;
++    ss >> data;
++    this->order = (InstructionOrder) data;
++    while (ss >> data) {
++        this->payloads.push_back(data);
++    }
++}
++
++Instructions read_instructrions(std::string filename) {
++    std::ifstream ifs(filename);
++    std::string line;
++    Instructions data;
++    if (ifs.is_open()) {
++        while(std::getline(ifs, line)) {
++            data.push_back(Instruction(line));
++        }
++        ifs.close();
++    }
++    return data;
++}
++
+ } // namespace proj1
+\ No newline at end of file
+diff --git a/Thread-1/lib/instruction.h b/Thread-1/lib/instruction.h
+index 4aa34ea..f2058a8 100644
+--- a/Thread-1/lib/instruction.h
++++ b/Thread-1/lib/instruction.h
+@@ -1,26 +1,26 @@
+-#ifndef THREAD_LIB_INSTRUCTION_H_
+-#define THREAD_LIB_INSTRUCTION_H_
+-
+-#include <string>
+-#include <vector>
+-
+-namespace proj1 {
+-
+-enum InstructionOrder {
+-    INIT_EMB = 0,
+-    UPDATE_EMB,
+-    RECOMMEND
+-};
+-
+-struct Instruction {
+-    Instruction(std::string);
+-    InstructionOrder order;
+-    std::vector<int> payloads;
+-};
+-
+-using Instructions = std::vector<Instruction>;
+-
+-Instructions read_instructrions(std::string);
+-
+-} // namespace proj1
++#ifndef THREAD_LIB_INSTRUCTION_H_
++#define THREAD_LIB_INSTRUCTION_H_
++
++#include <string>
++#include <vector>
++
++namespace proj1 {
++
++enum InstructionOrder {
++    INIT_EMB = 0,
++    UPDATE_EMB,
++    RECOMMEND
++};
++
++struct Instruction {
++    Instruction(std::string);
++    InstructionOrder order;
++    std::vector<int> payloads;
++};
++
++using Instructions = std::vector<Instruction>;
++
++Instructions read_instructrions(std::string);
++
++} // namespace proj1
+ #endif  // THREAD_LIB_INSTRUCTION_H_
+\ No newline at end of file
+diff --git a/Thread-1/lib/model_test.cc b/Thread-1/lib/model_test.cc
+index e1f9c8b..20f0e73 100644
+--- a/Thread-1/lib/model_test.cc
++++ b/Thread-1/lib/model_test.cc
+@@ -1,42 +1,42 @@
+-#include <gtest/gtest.h>
+-#include <chrono>
+-#include "model.h"
+-
+-namespace proj1 {
+-namespace testing{
+-
+-class ModelTest : public ::testing::Test {
+- protected:
+-  void SetUp() override {
+-    double embA[20] = {-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923};
+-    double embB[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};
+-	emb_testA = new Embedding(20, embA);  
+-	emb_testB = new Embedding(20, embB);   
+-  }
+-  Embedding* emb_testA;
+-  Embedding* emb_testB;
+-};
+-
+-TEST_F(ModelTest, test_calc_gradient){
+-	auto start = std::chrono::high_resolution_clock::now();
+-	calc_gradient(emb_testA, emb_testB, 1);
+-    auto end = std::chrono::high_resolution_clock::now();
+-    auto time_ellapsed = end - start;
+-	EXPECT_LT(10*1000, time_ellapsed.count());
+-}
+-
+-TEST_F(ModelTest, test_cold_start){
+-	auto start = std::chrono::high_resolution_clock::now();
+-	cold_start(emb_testA, emb_testB);
+-    auto end = std::chrono::high_resolution_clock::now();
+-    auto time_ellapsed = end - start;
+-	EXPECT_LT(20*1000, time_ellapsed.count());
+-}
+-
+-} // namespace testing
+-} // namespace proj1
+-
+-int main(int argc,char **argv){
+-  testing::InitGoogleTest(&argc,argv);
+-  return RUN_ALL_TESTS();
+-}
++#include <gtest/gtest.h>
++#include <chrono>
++#include "model.h"
++
++namespace proj1 {
++namespace testing{
++
++class ModelTest : public ::testing::Test {
++ protected:
++  void SetUp() override {
++    double embA[20] = {-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923};
++    double embB[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};
++	emb_testA = new Embedding(20, embA);  
++	emb_testB = new Embedding(20, embB);   
++  }
++  Embedding* emb_testA;
++  Embedding* emb_testB;
++};
++
++TEST_F(ModelTest, test_calc_gradient){
++	auto start = std::chrono::high_resolution_clock::now();
++	calc_gradient(emb_testA, emb_testB, 1);
++    auto end = std::chrono::high_resolution_clock::now();
++    auto time_ellapsed = end - start;
++	EXPECT_LT(10*1000, time_ellapsed.count());
++}
++
++TEST_F(ModelTest, test_cold_start){
++	auto start = std::chrono::high_resolution_clock::now();
++	cold_start(emb_testA, emb_testB);
++    auto end = std::chrono::high_resolution_clock::now();
++    auto time_ellapsed = end - start;
++	EXPECT_LT(20*1000, time_ellapsed.count());
++}
++
++} // namespace testing
++} // namespace proj1
++
++int main(int argc,char **argv){
++  testing::InitGoogleTest(&argc,argv);
++  return RUN_ALL_TESTS();
++}
+diff --git a/Thread-1/lib/server.cc b/Thread-1/lib/server.cc
+new file mode 100644
+index 0000000..cdc3234
+--- /dev/null
++++ b/Thread-1/lib/server.cc
+@@ -0,0 +1,364 @@
++
++#include <vector>
++#include <thread>
++#include <iostream>
++#include <mutex>
++
++#include "server.h"
++#include "model.h"
++#include "utils.h"
++
++#define TIMER(s) // proj1::AutoTimer timer(s)
++
++namespace proj1 {
++
++void Server::write_to_stdout() {
++    users.write_to_stdout();
++    items.write_to_stdout();
++}
++
++void Server::do_instruction(Instruction inst) {
++    switch(inst.order) {
++        case INIT_EMB: {
++            if (!useLock) {
++                do_init(inst);
++            } else if (!initParall) {
++                do_init_safe(inst);
++            } else {
++                do_init_parall(inst);
++            }
++            break;
++        }
++        case UPDATE_EMB: {
++            if (!useLock) {
++                do_update(inst);
++            } else if (!useEpoch) {
++                do_update_safe(inst);
++            } else {
++                if (!changeInplace) {
++                    do_update_epoch(inst);
++                } else {
++                    do_update_inplace(inst);
++                }
++            }
++            break;
++        }
++        case RECOMMEND: {
++            if (!useLock) {
++                Embedding* emb = do_recommend(inst);
++                emb->write_to_stdout();
++            } else if (!useEpoch) {
++                Embedding* emb = do_recommend_safe(inst);
++                emb->write_to_stdout();
++            } else {
++                if (!changeInplace) {
++                    Embedding* emb = do_recommend_epoch(inst);
++                    emb->write_to_stdout();
++                } else {
++                    Embedding* emb = do_recommend_non_inplace(inst);
++                    emb->write_to_stdout();
++                }
++            }
++        }
++    }
++}
++
++void Server::do_init(Instruction inst) {
++    TIMER("do_init");
++
++    int length = users.get_emb_length();
++    Embedding* new_user = new Embedding(length);
++    int user_idx = users.append(new_user);
++
++    for (int item_index: inst.payloads) {
++        Embedding* item_emb = items.get_embedding(item_index);
++
++        EmbeddingGradient* gradient = cold_start(new_user, item_emb);
++        users.update_embedding(user_idx, gradient, 0.01);
++        delete gradient;
++    }
++}
++
++void Server::do_init_safe(Instruction inst) {
++    TIMER("do_init_safe");
++
++    int length = users.get_emb_length();
++    Embedding* new_user = new Embedding(length);
++    int user_idx = users.append(new_user);
++
++    for (int item_index: inst.payloads) {
++        Embedding* item_emb = items.get_embedding(item_index);
++
++        Embedding* user = new Embedding(new_user);
++        Embedding* item = new Embedding(item_emb);
++        EmbeddingGradient* gradient = cold_start(user, item);
++        delete user, item;
++
++        users.update_embedding(user_idx, gradient, 0.01);
++        delete gradient;
++    }
++}
++
++void Server::do_init_parall(Instruction inst) {
++    TIMER("do_init_parall");
++
++    int length = users.get_emb_length();
++    Embedding* new_user = new Embedding(length);
++    int user_idx = users.append(new_user);
++
++    std::vector<std::thread*> threads;
++    for (int item_index: inst.payloads) {
++        std::thread* t = new std::thread(
++            [&, item_index]() {
++                Embedding* item_emb = items.get_embedding(item_index);
++
++                Embedding* user = new Embedding(new_user);
++                Embedding* item = new Embedding(item_emb);
++                EmbeddingGradient* gradient = cold_start(user, item);
++                delete user, item;
++
++                users.update_embedding(user_idx, gradient, 0.01);
++                delete gradient;
++            }
++        );
++        threads.push_back(t);
++    }
++    for (std::thread* t: threads) {
++        t->join();
++        delete t;
++    }
++}
++
++void Server::do_update(Instruction inst) {
++    TIMER("do_update");
++
++    std::cout << "do_update" << std::endl;
++    int user_idx = inst.payloads[0];
++    int item_idx = inst.payloads[1];
++    int label = inst.payloads[2];
++
++    Embedding* user_emb = users.get_embedding(user_idx);
++    Embedding* item_emb = items.get_embedding(item_idx);
++
++    EmbeddingGradient* gradient = calc_gradient(user_emb, item_emb, label);
++    users.update_embedding(user_idx, gradient, 0.01);
++    delete gradient;
++
++    gradient = calc_gradient(item_emb, user_emb, label);
++    items.update_embedding(item_idx, gradient, 0.001);
++    delete gradient;
++}
++
++void Server::do_update_safe(Instruction inst) {
++    TIMER("do_update_safe");
++
++    int user_idx = inst.payloads[0];
++    int item_idx = inst.payloads[1];
++    int label = inst.payloads[2];
++
++    Embedding* user_emb = users.get_embedding(user_idx);
++    Embedding* item_emb = items.get_embedding(item_idx);
++
++    auto user = new Embedding(user_emb);
++    auto item = new Embedding(item_emb);
++    EmbeddingGradient* gradient = calc_gradient(user, item, label);
++    delete user, item;
++
++    users.update_embedding(user_idx, gradient, 0.01);
++    delete gradient;
++
++    user = new Embedding(user_emb);
++    item = new Embedding(item_emb);
++    gradient = calc_gradient(item, user, label);
++    delete user, item;
++
++    items.update_embedding(item_idx, gradient, 0.001);
++    delete gradient;
++}
++
++void Server::do_update_epoch(Instruction inst) {
++    int iter_idx = inst.payloads[3];
++{
++    std::unique_lock<std::mutex> lock(this->mux);
++    while (!(this->epoch >= iter_idx || (this->epoch == iter_idx - 1 && this->num_threads == 0))) {
++        this->cv.wait(lock);
++    }
++    if (this->epoch == iter_idx - 1 && this->num_threads == 0) {
++        this->epoch = iter_idx;
++    }
++    this->num_threads++;
++}
++
++    TIMER("do_update_epoch");
++
++    int user_idx = inst.payloads[0];
++    int item_idx = inst.payloads[1];
++    int label = inst.payloads[2];
++
++    Embedding* user_emb = users.get_embedding(user_idx);
++    Embedding* item_emb = items.get_embedding(item_idx);
++
++    auto user = new Embedding(user_emb);
++    auto item = new Embedding(item_emb);
++    EmbeddingGradient* gradient = calc_gradient(user, item, label);
++    delete user, item;
++
++    users.update_embedding(user_idx, gradient, 0.01);
++    delete gradient;
++
++    user = new Embedding(user_emb);
++    item = new Embedding(item_emb);
++    gradient = calc_gradient(item, user, label);
++    delete user, item;
++
++    items.update_embedding(item_idx, gradient, 0.001);
++    delete gradient;
++
++{
++    std::unique_lock<std::mutex> lock(this->mux);
++    this->num_threads--;
++    this->cv.notify_all();
++}
++}
++
++void Server::do_update_inplace(Instruction inst) {
++    int iter_idx = inst.payloads[3];
++{
++    std::unique_lock<std::mutex> lock(this->mux);
++    while (!(this->epoch >= iter_idx || (this->epoch == iter_idx - 1 && this->num_threads == 0))) {
++        this->cv.wait(lock);
++    }
++    if (this->epoch == iter_idx - 1 && this->num_threads == 0) {
++        this->epoch = iter_idx;
++    }
++    this->num_threads++;
++}
++
++    TIMER("do_update_inplace");
++
++    int user_idx = inst.payloads[0];
++    int item_idx = inst.payloads[1];
++    int label = inst.payloads[2];
++
++    Embedding* user_emb = users.get_embedding(user_idx);
++    Embedding* item_emb = items.get_embedding(item_idx);
++
++{
++    std::lock_guard<std::mutex> userlock(user_emb->wmux);
++    std::lock_guard<std::mutex> itemlock(item_emb->wmux);
++    EmbeddingGradient* gradient = calc_gradient(user_emb, item_emb, label);
++    users.update_embedding(user_idx, gradient, 0.01);
++    delete gradient;
++
++    gradient = calc_gradient(item_emb, user_emb, label);
++    items.update_embedding(item_idx, gradient, 0.001);
++    delete gradient;
++}
++
++{
++    std::unique_lock<std::mutex> lock(this->mux);
++    this->num_threads--;
++    this->cv.notify_all();
++}
++}
++
++Embedding* Server::do_recommend(Instruction inst) {
++    TIMER("do_recommend");
++
++    int user_idx = inst.payloads[0];
++    Embedding* user = users.get_embedding(user_idx);
++
++    std::vector<Embedding*> item_pool;
++    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
++        int item_idx = inst.payloads[i];
++        item_pool.push_back(items.get_embedding(item_idx));
++    }
++
++    Embedding* recommendation = recommend(user, item_pool);
++    return recommendation;
++}
++
++Embedding* Server::do_recommend_safe(Instruction inst) {
++    TIMER("do_recommend_safe");
++
++    int user_idx = inst.payloads[0];
++    Embedding* user = users.get_embedding(user_idx);
++    std::lock_guard<std::mutex> lock(user->mux);
++
++    std::vector<Embedding*> item_pool;
++    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
++        int item_idx = inst.payloads[i];
++        Embedding* item = items.get_embedding(item_idx);
++        std::lock_guard<std::mutex> lock(item->mux);
++        item_pool.push_back(item);
++    }
++
++    Embedding* recommendation = recommend(user, item_pool);
++    return recommendation;
++}
++
++Embedding* Server::do_recommend_epoch(Instruction inst) {
++    int iter_idx = inst.payloads[1];
++{
++    std::unique_lock<std::mutex> lock(this->mux);
++    while (!(this->epoch > iter_idx | (this->epoch == iter_idx && this->num_threads == 0))) {
++        this->cv.wait(lock);
++    }
++}
++
++    TIMER("do_recommend_epoch");
++
++    int user_idx = inst.payloads[0];
++    Embedding* user = users.get_embedding(user_idx);
++    std::lock_guard<std::mutex> lock(user->mux);
++
++    std::vector<Embedding*> item_pool;
++    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
++        int item_idx = inst.payloads[i];
++        Embedding* item = items.get_embedding(item_idx);
++        std::lock_guard<std::mutex> lock(item->mux);
++        item_pool.push_back(item);
++    }
++
++    Embedding* recommendation = recommend(user, item_pool);
++    return recommendation;
++}
++
++Embedding* Server::do_recommend_non_inplace(Instruction inst) {
++    int iter_idx = inst.payloads[1];
++{
++    std::unique_lock<std::mutex> lock(this->mux);
++    while (!(this->epoch > iter_idx | (this->epoch == iter_idx && this->num_threads == 0))) {
++        this->cv.wait(lock);
++    }
++}
++
++    TIMER("do_recommend_non_inplace");
++
++    int user_idx = inst.payloads[0];
++    Embedding* user_emb = users.get_embedding(user_idx);
++    Embedding* user = new Embedding(user_emb);
++
++    std::vector<Embedding*> item_pool;
++    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
++        int item_idx = inst.payloads[i];
++        Embedding* item_emb = items.get_embedding(item_idx);
++        Embedding* item = new Embedding(item_emb);
++        item_pool.push_back(item);
++    }
++
++    Embedding* recommendation = recommend(user, item_pool);
++
++    delete user;
++    for(auto item : item_pool) {
++        delete item;
++    }
++
++    return recommendation;
++}
++
++bool Server::operator==(Server& svr) {
++    return this->users == svr.users && this->items == svr.items;
++}
++
++} // namespace proj1
+diff --git a/Thread-1/lib/server.h b/Thread-1/lib/server.h
+new file mode 100644
+index 0000000..3c7f309
+--- /dev/null
++++ b/Thread-1/lib/server.h
+@@ -0,0 +1,51 @@
++#ifndef THREAD_LIB_SERVER_H_
++#define THREAD_LIB_SERVER_H_
++
++#include <mutex>
++#include <condition_variable>
++#include "instruction.h"
++#include "embedding.h"
++
++namespace proj1 {
++
++class Server {
++public:
++    Server(std::string user_filename, std::string item_filename) : users(user_filename), items(item_filename) {}
++    Server(std::string user_filename, std::string item_filename, bool initParall, bool useLock, bool useEpoch, bool changeInplace)
++        : users(user_filename), items(item_filename), initParall(initParall), useLock(useLock), useEpoch(useEpoch), changeInplace(changeInplace) {}
++    void do_instruction(Instruction);
++    void write_to_stdout();
++
++    void do_init(Instruction);
++    void do_init_safe(Instruction);
++    void do_init_parall(Instruction);
++
++    void do_update(Instruction);
++    void do_update_safe(Instruction);
++    void do_update_epoch(Instruction);
++    void do_update_inplace(Instruction);
++
++    Embedding* do_recommend(Instruction);
++    Embedding* do_recommend_safe(Instruction);
++    Embedding* do_recommend_epoch(Instruction);
++    Embedding* do_recommend_non_inplace(Instruction);
++
++    bool operator==(Server&);
++
++private:
++    bool initParall = false;
++    bool useLock = false;
++    bool useEpoch = false;
++    bool changeInplace = false;
++
++    int epoch = -1;
++    int num_threads = 0; // number of update threads running in this epoch
++    std::mutex mux;
++    std::condition_variable cv;
++
++    EmbeddingHolder users;
++    EmbeddingHolder items;
++};
++
++} // namespace proj1
++#endif // THREAD_LIB_SERVER_H_
+diff --git a/Thread-1/lib/server_test.cc b/Thread-1/lib/server_test.cc
+new file mode 100644
+index 0000000..036212b
+--- /dev/null
++++ b/Thread-1/lib/server_test.cc
+@@ -0,0 +1,53 @@
++#include <gtest/gtest.h>
++#include <vector>
++
++#include "server.h"
++#include "embedding.h"
++
++namespace proj1 {
++namespace testing {
++
++class ServerTest : public ::testing::Test {
++protected:
++    void SetUp() {
++        server1 = new Server("data/q4.in", "data/q4.in");
++        server2 = new Server("data/q4.in", "data/q4.in");
++        server3 = new Server("data/q4.in", "data/q4.in");
++
++        inst_init = new Instruction("0 0 1 2 3 4 5 6 7 8");
++        inst_update = new Instruction("1 7 5 0 0");
++        inst_recommend = new Instruction("2 2 -1 4 5 6 3 7 9");
++    }
++    Server *server1, *server2, *server3;
++    Instruction *inst_init, *inst_update, *inst_recommend;
++};
++
++TEST_F(ServerTest, test_init) {
++    server1->do_init(*inst_init);
++    server2->do_init_safe(*inst_init);
++    EXPECT_EQ((*server1) == (*server2), true);
++}
++
++TEST_F(ServerTest, test_update) {
++    server1->do_update(*inst_update);
++    server2->do_update_safe(*inst_update);
++    server3->do_update_epoch(*inst_update);
++    EXPECT_EQ((*server1) == (*server2), true);
++    EXPECT_EQ((*server2) == (*server3), true);
++}
++
++TEST_F(ServerTest, test_recommend) {
++    Embedding* emb1 = server1->do_recommend(*inst_recommend);
++    Embedding* emb2 = server2->do_recommend_safe(*inst_recommend);
++    Embedding* emb3 = server3->do_recommend_epoch(*inst_recommend);
++    EXPECT_EQ((*emb1) == (*emb2), true);
++    EXPECT_EQ((*emb2) == (*emb3), true);
++}
++    
++} // namespace testing
++} // namespace proj1
++
++int main(int argc, char** argv) {
++    testing::InitGoogleTest(&argc, argv);
++    return RUN_ALL_TESTS();
++}
+diff --git a/Thread-1/lib/util_test.cc b/Thread-1/lib/util_test.cc
+index 77e08a7..f23579b 100644
+--- a/Thread-1/lib/util_test.cc
++++ b/Thread-1/lib/util_test.cc
+@@ -1,22 +1,22 @@
+-#include <gtest/gtest.h>
+-#include "utils.h"
+-
+-namespace proj1 {
+-namespace testing{
+-
+-
+-TEST(UtilTest, test_sigmoid) {
+-    EXPECT_NEAR(0.731059, sigmoid(1.0), 0.0001);   
+-}
+-
+-TEST(UtilTest, test_sigmoid_backward) {
+-    EXPECT_NEAR(0.196612, sigmoid_backward(1.0), 0.0001);   
+-}
+-
+-} // namespace testing
+-} // namespace proj1
+-
+-int main(int argc,char **argv){
+-  testing::InitGoogleTest(&argc,argv);
+-  return RUN_ALL_TESTS();
+-}
++#include <gtest/gtest.h>
++#include "utils.h"
++
++namespace proj1 {
++namespace testing{
++
++
++TEST(UtilTest, test_sigmoid) {
++    EXPECT_NEAR(0.731059, sigmoid(1.0), 0.0001);   
++}
++
++TEST(UtilTest, test_sigmoid_backward) {
++    EXPECT_NEAR(0.196612, sigmoid_backward(1.0), 0.0001);   
++}
++
++} // namespace testing
++} // namespace proj1
++
++int main(int argc,char **argv){
++  testing::InitGoogleTest(&argc,argv);
++  return RUN_ALL_TESTS();
++}
+diff --git a/Thread-1/lib/utils.cc b/Thread-1/lib/utils.cc
+index 3427314..465e117 100644
+--- a/Thread-1/lib/utils.cc
++++ b/Thread-1/lib/utils.cc
+@@ -1,45 +1,47 @@
+-#include <cmath>
+-#include <string>
+-#include <iostream>
+-#include <chrono>
+-#include <thread>
+-#include "utils.h"
+-
+-namespace proj1 {
+-
+-void a_slow_function(int seconds) {
+-    //std::this_thread::sleep_for(std::chrono::seconds(seconds));
+-}
+-
+-double sigmoid(double x) {
+-    return 1.0 / (1.0 + exp(-x));
+-}
+-
+-double sigmoid_backward(double x) {
+-    double y = sigmoid(x);
+-    return y * (1.0 - y);
+-}
+-
+-double binary_cross_entropy(double y_true, double y_pred) {
+-    double eps = 1e-8;
+-    return y_true * log(eps + y_pred) \
+-        + (1.0 - y_true) * log(1.0 - y_pred + eps);
+-}
+-
+-double binary_cross_entropy_backward(double y_true, double y_pred) {
+-    double eps = 1e-8;
+-    return (y_true - y_pred) / (eps + (1.0 - y_pred) * y_pred);
+-}
+-
+-AutoTimer::AutoTimer(std::string name) : 
+-        m_name(std::move(name)),
+-        m_beg(std::chrono::high_resolution_clock::now()) { 
+-    }
+-
+-AutoTimer::~AutoTimer() {
+-    auto end = std::chrono::high_resolution_clock::now();
+-    auto dur = std::chrono::duration_cast<std::chrono::microseconds>(end - m_beg);
+-    std::cout << m_name << " : " << dur.count() << " usec\n";
+-}
+-
+-} // namespace proj1
++#include <cmath>
++#include <string>
++#include <iostream>
++#include <chrono>
++#include <thread>
++#include "utils.h"
++
++namespace proj1 {
++
++void a_slow_function(int seconds) {
++    if (slow_function) {
++        std::this_thread::sleep_for(std::chrono::timescale(seconds));
++    }
++}
++
++double sigmoid(double x) {
++    return 1.0 / (1.0 + exp(-x));
++}
++
++double sigmoid_backward(double x) {
++    double y = sigmoid(x);
++    return y * (1.0 - y);
++}
++
++double binary_cross_entropy(double y_true, double y_pred) {
++    double eps = 1e-8;
++    return y_true * log(eps + y_pred) \
++        + (1.0 - y_true) * log(1.0 - y_pred + eps);
++}
++
++double binary_cross_entropy_backward(double y_true, double y_pred) {
++    double eps = 1e-8;
++    return (y_true - y_pred) / (eps + (1.0 - y_pred) * y_pred);
++}
++
++AutoTimer::AutoTimer(std::string name) : 
++        m_name(std::move(name)),
++        m_beg(std::chrono::high_resolution_clock::now()) { 
++    }
++
++AutoTimer::~AutoTimer() {
++    auto end = std::chrono::high_resolution_clock::now();
++    auto dur = std::chrono::duration_cast<std::chrono::microseconds>(end - m_beg);
++    std::cout << m_name + " : " + std::to_string(dur.count()) + " usec\n";
++}
++
++} // namespace proj1
+diff --git a/Thread-1/lib/utils.h b/Thread-1/lib/utils.h
+index 9f85001..55486c9 100644
+--- a/Thread-1/lib/utils.h
++++ b/Thread-1/lib/utils.h
+@@ -1,64 +1,68 @@
+-#ifndef THREAD_LIB_UTILS_H_
+-#define THREAD_LIB_UTILS_H_
+-
+-#include <string>
+-#include <vector>
+-#include <iostream>
+-#include <chrono>  // for AutoTimer function
+-
+-// For colored outputs in terminal
+-#define RST  "\x1B[0m"
+-#define KRED  "\x1B[31m"
+-#define KGRN  "\x1B[32m"
+-#define KYEL  "\x1B[33m"
+-#define KBLU  "\x1B[34m"
+-#define KMAG  "\x1B[35m"
+-#define KCYN  "\x1B[36m"
+-#define KWHT  "\x1B[37m"
+-
+-#define FRED(x) KRED x RST
+-#define FGRN(x) KGRN x RST
+-#define FYEL(x) KYEL x RST
+-#define FBLU(x) KBLU x RST
+-#define FMAG(x) KMAG x RST
+-#define FCYN(x) KCYN x RST
+-#define FWHT(x) KWHT x RST
+-
+-#define BOLD(x) "\x1B[1m" x RST
+-#define UNDL(x) "\x1B[4m" x RST
+-
+-namespace proj1 {
+-
+-// TODO(xuw): better to define this as a enum type
+-static const int kOrderInit = 0;
+-static const int kOrderUpdate = 1;
+-
+-template <class T>
+-inline void embbedingAssert(bool condition, char const *msg, T error) {
+-    if (!condition) {
+-        std::cerr << msg << std::endl;
+-        throw error;
+-    }
+-}
+-
+-void a_slow_function(int seconds);
+-
+-double sigmoid(double x);
+-
+-double sigmoid_backward(double x);
+-
+-double binary_cross_entropy(double y_true, double y_pred);
+-
+-double binary_cross_entropy_backward(double y_true, double y_pred);
+-
+-class AutoTimer {
+- public:
+-  AutoTimer(std::string name);
+-  ~AutoTimer(); 
+- private:
+-  std::string m_name;
+-  std::chrono::time_point<std::chrono::high_resolution_clock> m_beg;
+-};
+-
+-} // namespace proj1
+-#endif // THREAD_LIB_UTILS_H_
++#ifndef THREAD_LIB_UTILS_H_
++#define THREAD_LIB_UTILS_H_
++
++#include <string>
++#include <vector>
++#include <iostream>
++#include <chrono>  // for AutoTimer function
++
++// slow_function
++#define slow_function true
++#define timescale seconds
++
++// For colored outputs in terminal
++#define RST  "\x1B[0m"
++#define KRED  "\x1B[31m"
++#define KGRN  "\x1B[32m"
++#define KYEL  "\x1B[33m"
++#define KBLU  "\x1B[34m"
++#define KMAG  "\x1B[35m"
++#define KCYN  "\x1B[36m"
++#define KWHT  "\x1B[37m"
++
++#define FRED(x) KRED x RST
++#define FGRN(x) KGRN x RST
++#define FYEL(x) KYEL x RST
++#define FBLU(x) KBLU x RST
++#define FMAG(x) KMAG x RST
++#define FCYN(x) KCYN x RST
++#define FWHT(x) KWHT x RST
++
++#define BOLD(x) "\x1B[1m" x RST
++#define UNDL(x) "\x1B[4m" x RST
++
++namespace proj1 {
++
++// TODO(xuw): better to define this as a enum type
++static const int kOrderInit = 0;
++static const int kOrderUpdate = 1;
++
++template <class T>
++inline void embbedingAssert(bool condition, char const *msg, T error) {
++    if (!condition) {
++        std::cerr << msg << std::endl;
++        throw error;
++    }
++}
++
++void a_slow_function(int seconds);
++
++double sigmoid(double x);
++
++double sigmoid_backward(double x);
++
++double binary_cross_entropy(double y_true, double y_pred);
++
++double binary_cross_entropy_backward(double y_true, double y_pred);
++
++class AutoTimer {
++ public:
++  AutoTimer(std::string name);
++  ~AutoTimer(); 
++ private:
++  std::string m_name;
++  std::chrono::time_point<std::chrono::high_resolution_clock> m_beg;
++};
++
++} // namespace proj1
++#endif // THREAD_LIB_UTILS_H_
+diff --git a/Thread-1/q0.cc b/Thread-1/q0.cc
+index 7e51849..77525f5 100644
+--- a/Thread-1/q0.cc
++++ b/Thread-1/q0.cc
+@@ -1,92 +1,92 @@
+-#include <vector>
+-#include <tuple>
+-
+-#include <string>   // string
+-#include <chrono>   // timer
+-#include <iostream> // cout, endl
+-
+-#include "lib/utils.h"
+-#include "lib/model.h" 
+-#include "lib/embedding.h" 
+-#include "lib/instruction.h"
+-
+-namespace proj1 {
+-
+-void run_one_instruction(Instruction inst, EmbeddingHolder* users, EmbeddingHolder* items) {
+-    switch(inst.order) {
+-        case INIT_EMB: {
+-            // We need to init the embedding
+-            int length = users->get_emb_length();
+-            Embedding* new_user = new Embedding(length);
+-            int user_idx = users->append(new_user);
+-            for (int item_index: inst.payloads) {
+-                Embedding* item_emb = items->get_embedding(item_index);
+-                // Call cold start for downstream applications, slow
+-                EmbeddingGradient* gradient = cold_start(new_user, item_emb);
+-                users->update_embedding(user_idx, gradient, 0.01);
+-                delete gradient;
+-            }
+-            break;
+-        }
+-        case UPDATE_EMB: {
+-            int user_idx = inst.payloads[0];
+-            int item_idx = inst.payloads[1];
+-            int label = inst.payloads[2];
+-            // You might need to add this state in other questions.
+-            // Here we just show you this as an example
+-            // int epoch = -1;
+-            //if (inst.payloads.size() > 3) {
+-            //    epoch = inst.payloads[3];
+-            //}
+-            Embedding* user = users->get_embedding(user_idx);
+-            Embedding* item = items->get_embedding(item_idx);
+-            EmbeddingGradient* gradient = calc_gradient(user, item, label);
+-            users->update_embedding(user_idx, gradient, 0.01);
+-            delete gradient;
+-            gradient = calc_gradient(item, user, label);
+-            items->update_embedding(item_idx, gradient, 0.001);
+-            delete gradient;
+-            break;
+-        }
+-        case RECOMMEND: {
+-            int user_idx = inst.payloads[0];
+-            Embedding* user = users->get_embedding(user_idx);
+-            std::vector<Embedding*> item_pool;
+-            int iter_idx = inst.payloads[1];
+-            for (unsigned int i = 2; i < inst.payloads.size(); ++i) {
+-                int item_idx = inst.payloads[i];
+-                item_pool.push_back(items->get_embedding(item_idx));
+-            }
+-            Embedding* recommendation = recommend(user, item_pool);
+-            recommendation->write_to_stdout();
+-            break;
+-        }
+-    }
+-
+-}
+-} // namespace proj1
+-
+-int main(int argc, char *argv[]) {
+-
+-    proj1::EmbeddingHolder* users = new proj1::EmbeddingHolder("data/q0.in");
+-    proj1::EmbeddingHolder* items = new proj1::EmbeddingHolder("data/q0.in");
+-    proj1::Instructions instructions = proj1::read_instructrions("data/q0_instruction.tsv");
+-    {
+-    proj1::AutoTimer timer("q0");  // using this to print out timing of the block
+-    // Run all the instructions
+-    for (proj1::Instruction inst: instructions) {
+-        proj1::run_one_instruction(inst, users, items);
+-    }
+-    }
+-
+-    // Write the result
+-    users->write_to_stdout();
+-    items->write_to_stdout();
+-
+-    // We only need to delete the embedding holders, as the pointers are all
+-    // pointing at the emb_matx of the holders.
+-    delete users;
+-    delete items;
+-
+-    return 0;
+-}
++#include <vector>
++#include <tuple>
++
++#include <string>   // string
++#include <chrono>   // timer
++#include <iostream> // cout, endl
++
++#include "lib/utils.h"
++#include "lib/model.h" 
++#include "lib/embedding.h" 
++#include "lib/instruction.h"
++
++namespace proj1 {
++
++void run_one_instruction(Instruction inst, EmbeddingHolder* users, EmbeddingHolder* items) {
++    switch(inst.order) {
++        case INIT_EMB: {
++            // We need to init the embedding
++            int length = users->get_emb_length();
++            Embedding* new_user = new Embedding(length);
++            int user_idx = users->append(new_user);
++            for (int item_index: inst.payloads) {
++                Embedding* item_emb = items->get_embedding(item_index);
++                // Call cold start for downstream applications, slow
++                EmbeddingGradient* gradient = cold_start(new_user, item_emb);
++                users->update_embedding(user_idx, gradient, 0.01);
++                delete gradient;
++            }
++            break;
++        }
++        case UPDATE_EMB: {
++            int user_idx = inst.payloads[0];
++            int item_idx = inst.payloads[1];
++            int label = inst.payloads[2];
++            // You might need to add this state in other questions.
++            // Here we just show you this as an example
++            // int epoch = -1;
++            //if (inst.payloads.size() > 3) {
++            //    epoch = inst.payloads[3];
++            //}
++            Embedding* user = users->get_embedding(user_idx);
++            Embedding* item = items->get_embedding(item_idx);
++            EmbeddingGradient* gradient = calc_gradient(user, item, label);
++            users->update_embedding(user_idx, gradient, 0.01);
++            delete gradient;
++            gradient = calc_gradient(item, user, label);
++            items->update_embedding(item_idx, gradient, 0.001);
++            delete gradient;
++            break;
++        }
++        case RECOMMEND: {
++            int user_idx = inst.payloads[0];
++            Embedding* user = users->get_embedding(user_idx);
++            std::vector<Embedding*> item_pool;
++            int iter_idx = inst.payloads[1];
++            for (unsigned int i = 2; i < inst.payloads.size(); ++i) {
++                int item_idx = inst.payloads[i];
++                item_pool.push_back(items->get_embedding(item_idx));
++            }
++            Embedding* recommendation = recommend(user, item_pool);
++            recommendation->write_to_stdout();
++            break;
++        }
++    }
++
++}
++} // namespace proj1
++
++int main(int argc, char *argv[]) {
++
++    proj1::EmbeddingHolder* users = new proj1::EmbeddingHolder("data/q0.in");
++    proj1::EmbeddingHolder* items = new proj1::EmbeddingHolder("data/q0.in");
++    proj1::Instructions instructions = proj1::read_instructrions("data/q0_instruction.tsv");
++    {
++    proj1::AutoTimer timer("q0");  // using this to print out timing of the block
++    // Run all the instructions
++    for (proj1::Instruction inst: instructions) {
++        proj1::run_one_instruction(inst, users, items);
++    }
++    }
++
++    // Write the result
++    users->write_to_stdout();
++    items->write_to_stdout();
++
++    // We only need to delete the embedding holders, as the pointers are all
++    // pointing at the emb_matx of the holders.
++    delete users;
++    delete items;
++
++    return 0;
++}
+diff --git a/Thread-1/q0_my.cc b/Thread-1/q0_my.cc
+new file mode 100644
+index 0000000..f7f992a
+--- /dev/null
++++ b/Thread-1/q0_my.cc
+@@ -0,0 +1,29 @@
++#include <vector>
++#include <tuple>
++
++#include <string>   // string
++#include <chrono>   // timer
++
++#include "lib/utils.h"
++#include "lib/server.h"
++#include "lib/instruction.h"
++
++int main(int argc, char *argv[]) {
++
++    proj1::Server server("data/q0.in", "data/q0.in");
++
++    proj1::Instructions instructions = proj1::read_instructrions("data/q0_instruction.tsv");
++
++    {
++        proj1::AutoTimer timer("q0");  // using this to print out timing of the block
++        // Run all the instructions
++        for (proj1::Instruction inst: instructions) {
++            server.do_instruction(inst);
++        }
++    }
++
++    // Write the result
++    server.write_to_stdout();
++
++    return 0;
++}
+diff --git a/Thread-1/q1.cc b/Thread-1/q1.cc
+index 974ad23..4476ad3 100644
+--- a/Thread-1/q1.cc
++++ b/Thread-1/q1.cc
+@@ -1,5 +1,39 @@
+-#include <iostream> // cout, endl
+-int main(int argc, char *argv[]) {
+-    std::cout << "please implement this function\n";
+-    exit(1);
+-}
+\ No newline at end of file
++#include <vector>
++#include <tuple>
++
++#include <string>   // string
++#include <chrono>   // timer
++#include <thread>
++#include <vector>
++
++#include "lib/utils.h"
++#include "lib/server.h"
++#include "lib/instruction.h"
++
++int main(int argc, char *argv[]) {
++
++    proj1::Server server("data/q1.in", "data/q1.in", false, true, false, false);
++
++    proj1::Instructions instructions = proj1::read_instructrions("data/q1_instruction.tsv");
++
++    {
++        proj1::AutoTimer timer("q1");  // using this to print out timing of the block
++        // Run all the instructions
++
++        std::vector<std::thread*> threads;
++
++        for (proj1::Instruction inst: instructions) {
++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
++            threads.push_back(t);
++        }
++        for (auto t: threads) {
++            t->join();
++            delete t;
++        }
++    }
++
++    // Write the result
++    server.write_to_stdout();
++
++    return 0;
++}
+diff --git a/Thread-1/q2.cc b/Thread-1/q2.cc
+index c4b7413..d4b0483 100644
+--- a/Thread-1/q2.cc
++++ b/Thread-1/q2.cc
+@@ -1,4 +1,39 @@
+-#include <iostream> // cout, endl
+-int main(int argc, char *argv[]) {
+-    exit(1);
+-}
+\ No newline at end of file
++#include <vector>
++#include <tuple>
++
++#include <string>   // string
++#include <chrono>   // timer
++#include <thread>
++#include <vector>
++
++#include "lib/utils.h"
++#include "lib/server.h"
++#include "lib/instruction.h"
++
++int main(int argc, char *argv[]) {
++
++    proj1::Server server("data/q2.in", "data/q2.in", true, true, false, false);
++
++    proj1::Instructions instructions = proj1::read_instructrions("data/q2_instruction.tsv");
++
++    {
++        proj1::AutoTimer timer("q2");  // using this to print out timing of the block
++        // Run all the instructions
++        
++        std::vector<std::thread*> threads;
++
++        for (proj1::Instruction inst: instructions) {
++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
++            threads.push_back(t);
++        }
++        for (auto t: threads) {
++            t->join();
++            delete t;
++        }
++    }
++
++    // Write the result
++    server.write_to_stdout();
++
++    return 0;
++}
+diff --git a/Thread-1/q3.cc b/Thread-1/q3.cc
+index c4b7413..f4ae4dd 100644
+--- a/Thread-1/q3.cc
++++ b/Thread-1/q3.cc
+@@ -1,4 +1,39 @@
+-#include <iostream> // cout, endl
+-int main(int argc, char *argv[]) {
+-    exit(1);
+-}
+\ No newline at end of file
++#include <vector>
++#include <tuple>
++
++#include <string>   // string
++#include <chrono>   // timer
++#include <thread>
++#include <vector>
++
++#include "lib/utils.h"
++#include "lib/server.h"
++#include "lib/instruction.h"
++
++int main(int argc, char *argv[]) {
++
++    proj1::Server server("data/q3.in", "data/q3.in", true, true, true, false);
++
++    proj1::Instructions instructions = proj1::read_instructrions("data/q3_instruction.tsv");
++
++    {
++        proj1::AutoTimer timer("q3");  // using this to print out timing of the block
++        // Run all the instructions
++        
++        std::vector<std::thread*> threads;
++
++        for (proj1::Instruction inst: instructions) {
++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
++            threads.push_back(t);
++        }
++        for (auto t: threads) {
++            t->join();
++            delete t;
++        }
++    }
++
++    // Write the result
++    server.write_to_stdout();
++
++    return 0;
++}
+diff --git a/Thread-1/q4.cc b/Thread-1/q4.cc
+new file mode 100644
+index 0000000..b9d6909
+--- /dev/null
++++ b/Thread-1/q4.cc
+@@ -0,0 +1,36 @@
++#include <vector>
++#include <tuple>
++
++#include <string>   // string
++#include <chrono>   // timer
++#include <thread>
++#include <vector>
++
++#include "lib/utils.h"
++#include "lib/server.h"
++#include "lib/instruction.h"
++
++int main(int argc, char *argv[]) {
++
++    proj1::Server server("data/q4.in", "data/q4.in", true, true, true, false);
++
++    proj1::Instructions instructions = proj1::read_instructrions("data/q4_instruction.tsv");
++
++    {
++        proj1::AutoTimer timer("q4");  // using this to print out timing of the block
++        // Run all the instructions
++        
++        std::vector<std::thread*> threads;
++
++        for (proj1::Instruction inst: instructions) {
++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
++            threads.push_back(t);
++        }
++        for (auto t: threads) {
++            t->join();
++            delete t;
++        }
++    }
++
++    return 0;
++}
+diff --git a/Thread-1/q5.cc b/Thread-1/q5.cc
+index c4b7413..a55958e 100644
+--- a/Thread-1/q5.cc
++++ b/Thread-1/q5.cc
+@@ -1,4 +1,36 @@
+-#include <iostream> // cout, endl
++#include <vector>
++#include <tuple>
++
++#include <string>   // string
++#include <chrono>   // timer
++#include <thread>
++#include <vector>
++
++#include "lib/utils.h"
++#include "lib/server.h"
++#include "lib/instruction.h"
++
+ int main(int argc, char *argv[]) {
+-    exit(1);
+-}
+\ No newline at end of file
++
++    proj1::Server server("data/q4.in", "data/q4.in", true, true, true, true);
++
++    proj1::Instructions instructions = proj1::read_instructrions("data/q4_instruction.tsv");
++
++    {
++        proj1::AutoTimer timer("q5");  // using this to print out timing of the block
++        // Run all the instructions
++        
++        std::vector<std::thread*> threads;
++
++        for (proj1::Instruction inst: instructions) {
++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
++            threads.push_back(t);
++        }
++        for (auto t: threads) {
++            t->join();
++            delete t;
++        }
++    }
++
++    return 0;
++}
+diff --git a/Thread-2/2019012327_2019012328.diff b/Thread-2/2019012327_2019012328.diff
+new file mode 100644
+index 0000000..54aa2c4
+--- /dev/null
++++ b/Thread-2/2019012327_2019012328.diff
+@@ -0,0 +1,6278 @@
++diff --git a/.gitignore b/.gitignore
++new file mode 100644
++index 0000000..016606b
++--- /dev/null
+++++ b/.gitignore
++@@ -0,0 +1,3 @@
+++bazel-*
+++.vscode
+++.idea
++diff --git a/README.md b/README.md
++index 858054e..b3acba7 100644
++--- a/README.md
+++++ b/README.md
++@@ -1,12 +1,12 @@
++-# Operating System 2021 Fall
++-
++-This public repository holds the projects of this semester. See the `README`
++-in each project for details.
++-
++-## Note
++-
++-1. submit方法调整：每组提交一个diff文件到网络学堂，diff文件命名方式为学号1_学号2.diff，diff的生成方式见文档
++-2. 答疑文档：关于project 1的相关问题请大家更新到[共享文档](https://docs.qq.com/doc/DQkpGelpuTlZJaWRB)，我们会定期解答文档上的问题
++-3. 关于slow_function：在最终版本的提交中请大家打开utils中的slow_function，以保证通过所有的library test。（IMPORTANT：在library test中因为没有打开slow_function导致测试fail将被扣除50%的项目分数）
++-4. 关于item更新：为了简单我们在之前的实现中省略了对item的更新（实际系统中item和user的更新频率和方式都有差异），然而这样隐式地移除了大部分数据间依赖，因此我们要求在更新时同时更新user和item的embedding，最后输出两个EmbeddingHolder，先user后item（注意输出也需要thread-safety）。
+++# Operating System 2021 Fall
+++
+++This public repository holds the projects of this semester. See the `README`
+++in each project for details.
+++
+++## Note
+++
+++1. submit方法调整：每组提交一个diff文件到网络学堂，diff文件命名方式为学号1_学号2.diff，diff的生成方式见文档
+++2. 答疑文档：关于project 1的相关问题请大家更新到[共享文档](https://docs.qq.com/doc/DQkpGelpuTlZJaWRB)，我们会定期解答文档上的问题
+++3. 关于slow_function：在最终版本的提交中请大家打开utils中的slow_function，以保证通过所有的library test。（IMPORTANT：在library test中因为没有打开slow_function导致测试fail将被扣除50%的项目分数）
+++4. 关于item更新：为了简单我们在之前的实现中省略了对item的更新（实际系统中item和user的更新频率和方式都有差异），然而这样隐式地移除了大部分数据间依赖，因此我们要求在更新时同时更新user和item的embedding，最后输出两个EmbeddingHolder，先user后item（注意输出也需要thread-safety）。
++ 5. 关于大家在project 1中问的比较多的问题，我们这里统一回复一下：一是前两题的正确性，由于q1 q2指令之间没有执行依赖，因此最后的答案可能有多种，大家只要在保证thread safty的前提下得出任意一种答案即可通过测试；二是关于efficiency，我们会统计所有人的完成时间，排名后30%且慢于我们的参考实现（基础的并行实现，运行时间不公开）的提交我们会酌情扣分；三是关于test case，我们在这个project中不会提供auto test和benchmark，请大家自行设计case来验证代码的正确性
++\ No newline at end of file
++diff --git a/Thread-1/.bazeliskrc b/Thread-1/.bazeliskrc
++index f81d3f7..2159662 100644
++--- a/Thread-1/.bazeliskrc
+++++ b/Thread-1/.bazeliskrc
++@@ -1 +1 @@
++-USE_BAZEL_VERSION=4.2.1
+++USE_BAZEL_VERSION=4.2.1
++diff --git a/Thread-1/.gitignore b/Thread-1/.gitignore
++new file mode 100644
++index 0000000..772258b
++--- /dev/null
+++++ b/Thread-1/.gitignore
++@@ -0,0 +1,6 @@
+++bazel-bin
+++bazel-out
+++bazel-testlogs
+++bazel-Thread-1
+++
+++*.txt
++diff --git a/Thread-1/.vscode/settings.json b/Thread-1/.vscode/settings.json
++new file mode 100644
++index 0000000..431dd9e
++--- /dev/null
+++++ b/Thread-1/.vscode/settings.json
++@@ -0,0 +1,78 @@
+++{
+++    "files.associations": {
+++        "array": "cpp",
+++        "vector": "cpp",
+++        "xstring": "cpp",
+++        "xutility": "cpp",
+++        "cmath": "cpp",
+++        "algorithm": "cpp",
+++        "atomic": "cpp",
+++        "bit": "cpp",
+++        "cctype": "cpp",
+++        "charconv": "cpp",
+++        "chrono": "cpp",
+++        "clocale": "cpp",
+++        "compare": "cpp",
+++        "concepts": "cpp",
+++        "cstddef": "cpp",
+++        "cstdint": "cpp",
+++        "cstdio": "cpp",
+++        "cstdlib": "cpp",
+++        "cstring": "cpp",
+++        "ctime": "cpp",
+++        "cwchar": "cpp",
+++        "exception": "cpp",
+++        "format": "cpp",
+++        "forward_list": "cpp",
+++        "fstream": "cpp",
+++        "initializer_list": "cpp",
+++        "iomanip": "cpp",
+++        "ios": "cpp",
+++        "iosfwd": "cpp",
+++        "iostream": "cpp",
+++        "istream": "cpp",
+++        "iterator": "cpp",
+++        "limits": "cpp",
+++        "locale": "cpp",
+++        "map": "cpp",
+++        "memory": "cpp",
+++        "mutex": "cpp",
+++        "new": "cpp",
+++        "optional": "cpp",
+++        "ostream": "cpp",
+++        "ratio": "cpp",
+++        "sstream": "cpp",
+++        "stdexcept": "cpp",
+++        "stop_token": "cpp",
+++        "streambuf": "cpp",
+++        "string": "cpp",
+++        "system_error": "cpp",
+++        "thread": "cpp",
+++        "tuple": "cpp",
+++        "type_traits": "cpp",
+++        "typeinfo": "cpp",
+++        "utility": "cpp",
+++        "xfacet": "cpp",
+++        "xiosbase": "cpp",
+++        "xlocale": "cpp",
+++        "xlocbuf": "cpp",
+++        "xlocinfo": "cpp",
+++        "xlocmes": "cpp",
+++        "xlocmon": "cpp",
+++        "xlocnum": "cpp",
+++        "xloctime": "cpp",
+++        "xmemory": "cpp",
+++        "xstddef": "cpp",
+++        "xtr1common": "cpp",
+++        "xtree": "cpp",
+++        "cinttypes": "cpp",
+++        "condition_variable": "cpp",
+++        "functional": "cpp",
+++        "list": "cpp",
+++        "regex": "cpp",
+++        "set": "cpp",
+++        "unordered_map": "cpp",
+++        "unordered_set": "cpp",
+++        "xhash": "cpp"
+++    }
+++}
++\ No newline at end of file
++diff --git a/Thread-1/2019012327_2019012328.diff b/Thread-1/2019012327_2019012328.diff
++new file mode 100644
++index 0000000..1ebc4ec
++--- /dev/null
+++++ b/Thread-1/2019012327_2019012328.diff
++@@ -0,0 +1,1403 @@
+++diff --git a/Thread-1/.gitignore b/Thread-1/.gitignore
+++new file mode 100644
+++index 0000000..772258b
+++--- /dev/null
++++++ b/Thread-1/.gitignore
+++@@ -0,0 +1,6 @@
++++bazel-bin
++++bazel-out
++++bazel-testlogs
++++bazel-Thread-1
++++
++++*.txt
+++diff --git a/Thread-1/.vscode/settings.json b/Thread-1/.vscode/settings.json
+++new file mode 100644
+++index 0000000..431dd9e
+++--- /dev/null
++++++ b/Thread-1/.vscode/settings.json
+++@@ -0,0 +1,78 @@
++++{
++++    "files.associations": {
++++        "array": "cpp",
++++        "vector": "cpp",
++++        "xstring": "cpp",
++++        "xutility": "cpp",
++++        "cmath": "cpp",
++++        "algorithm": "cpp",
++++        "atomic": "cpp",
++++        "bit": "cpp",
++++        "cctype": "cpp",
++++        "charconv": "cpp",
++++        "chrono": "cpp",
++++        "clocale": "cpp",
++++        "compare": "cpp",
++++        "concepts": "cpp",
++++        "cstddef": "cpp",
++++        "cstdint": "cpp",
++++        "cstdio": "cpp",
++++        "cstdlib": "cpp",
++++        "cstring": "cpp",
++++        "ctime": "cpp",
++++        "cwchar": "cpp",
++++        "exception": "cpp",
++++        "format": "cpp",
++++        "forward_list": "cpp",
++++        "fstream": "cpp",
++++        "initializer_list": "cpp",
++++        "iomanip": "cpp",
++++        "ios": "cpp",
++++        "iosfwd": "cpp",
++++        "iostream": "cpp",
++++        "istream": "cpp",
++++        "iterator": "cpp",
++++        "limits": "cpp",
++++        "locale": "cpp",
++++        "map": "cpp",
++++        "memory": "cpp",
++++        "mutex": "cpp",
++++        "new": "cpp",
++++        "optional": "cpp",
++++        "ostream": "cpp",
++++        "ratio": "cpp",
++++        "sstream": "cpp",
++++        "stdexcept": "cpp",
++++        "stop_token": "cpp",
++++        "streambuf": "cpp",
++++        "string": "cpp",
++++        "system_error": "cpp",
++++        "thread": "cpp",
++++        "tuple": "cpp",
++++        "type_traits": "cpp",
++++        "typeinfo": "cpp",
++++        "utility": "cpp",
++++        "xfacet": "cpp",
++++        "xiosbase": "cpp",
++++        "xlocale": "cpp",
++++        "xlocbuf": "cpp",
++++        "xlocinfo": "cpp",
++++        "xlocmes": "cpp",
++++        "xlocmon": "cpp",
++++        "xlocnum": "cpp",
++++        "xloctime": "cpp",
++++        "xmemory": "cpp",
++++        "xstddef": "cpp",
++++        "xtr1common": "cpp",
++++        "xtree": "cpp",
++++        "cinttypes": "cpp",
++++        "condition_variable": "cpp",
++++        "functional": "cpp",
++++        "list": "cpp",
++++        "regex": "cpp",
++++        "set": "cpp",
++++        "unordered_map": "cpp",
++++        "unordered_set": "cpp",
++++        "xhash": "cpp"
++++    }
++++}
+++\ No newline at end of file
+++diff --git a/Thread-1/BUILD b/Thread-1/BUILD
+++index 28f4114..94be188 100644
+++--- a/Thread-1/BUILD
++++++ b/Thread-1/BUILD
+++@@ -1,5 +1,21 @@
+++ ##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
+++ 
++++cc_binary(
++++    name = "q0_my",
++++    srcs = [
++++        "q0_my.cc"
++++            ],
++++    deps = [
++++        "//lib:instruction_lib",
++++        "//lib:utils_lib",
++++        "//lib:server_lib"
++++    ],
++++    copts = [
++++        "-std=c++11",
++++    ],
++++    data = glob(["data/q0*"]),
++++)
++++
+++ cc_binary(
+++     name = "q0",
+++     srcs = [
+++@@ -29,6 +45,16 @@ cc_binary(
+++     srcs = [
+++         "q1.cc"
+++             ],
++++    deps = [
++++        "//lib:instruction_lib",
++++        "//lib:utils_lib",
++++        "//lib:server_lib"
++++    ],
++++    copts = [
++++        "-std=c++11",
++++    ],
++++    linkopts = ["-lpthread"],
++++    data = glob(["data/q1*"]),
+++ )
+++ 
+++ cc_binary(
+++@@ -36,6 +62,16 @@ cc_binary(
+++     srcs = [
+++         "q2.cc"
+++             ],
++++    deps = [
++++        "//lib:instruction_lib",
++++        "//lib:utils_lib",
++++        "//lib:server_lib"
++++    ],
++++    copts = [
++++        "-std=c++11",
++++    ],
++++    linkopts = ["-lpthread"],
++++    data = glob(["data/q2*"]),
+++ )
+++ 
+++ cc_binary(
+++@@ -43,6 +79,33 @@ cc_binary(
+++     srcs = [
+++         "q3.cc"
+++             ],
++++    deps = [
++++        "//lib:instruction_lib",
++++        "//lib:utils_lib",
++++        "//lib:server_lib"
++++    ],
++++    copts = [
++++        "-std=c++11",
++++    ],
++++    linkopts = ["-lpthread"],
++++    data = glob(["data/q3*"]),
++++)
++++
++++cc_binary(
++++    name = "q4",
++++    srcs = [
++++        "q4.cc"
++++            ],
++++    deps = [
++++        "//lib:instruction_lib",
++++        "//lib:utils_lib",
++++        "//lib:server_lib"
++++    ],
++++    copts = [
++++        "-std=c++11",
++++    ],
++++    linkopts = ["-lpthread"],
++++    data = glob(["data/q4*"]),
+++ )
+++ 
+++ cc_test(
+++diff --git a/Thread-1/README.md b/Thread-1/README.md
+++index 52f2b01..8fd28b4 100644
+++--- a/Thread-1/README.md
++++++ b/Thread-1/README.md
+++@@ -1,28 +1,16 @@
+++ # Project 1: Multi-thread Programming
+++ 
+++-This project uses a (oversimplified) machine learning inference system to allow
+++-you to put some basic OS concepts into practice and learn how system-level
+++-optimizations help improve performance. 
+++-
+++-Suppose you are hired by a company to improve the efficiency of the optimization
+++-process of a recommender system. This recommender system represents the users
+++-and items (i.e. goods offered by the E-commerce platform) as vectors, and uses
+++-these embedding vectors to calculate the semantic similarities between
+++-user-user, user-item and item-item pairs. Since you are a system expert, the
+++-company hopes you can improve the efficiency of the embedding maintenance of
+++-the recommender system.
++++This project uses a (oversimplified) machine learning inference system to allow you to put some basic OS concepts into practice and learn how system-level optimizations help improve performance.
++++
++++Suppose you are hired by a company to improve the efficiency of the optimization  process of a recommender system. This recommender system represents the users and items (i.e. goods offered by the E-commerce platform) as vectors, and uses these embedding vectors to calculate the semantic similarities between user-user, user-item and item-item pairs. Since you are a system expert, the company hopes you can improve the efficiency of the embedding maintenance of the recommender system.
+++ 
+++ ## Introduction
+++ 
+++-The AI algorithm engineers of the company explain the basics of the setup to
+++-you, as follows.
++++The AI algorithm engineers of the company explain the basics of the setup to you, as follows.
+++ 
+++ ### Embedding Vectors
+++ 
+++-Embedding vectors represent the entities (either a user or an item). These
+++-vectors are stored as rows in an embedding matrix. These embedding vectors have
+++-a property that the product of two embedding vectors (maybe after some
+++-processing) indicates the similarity of the two corresponding entities.
++++Embedding vectors represent the entities (either a user or an item). These vectors are stored as rows in an embedding matrix. These embedding vectors have a property that the product of two embedding vectors (maybe after some processing) indicates the similarity of the two corresponding entities.
+++ 
+++ ```bash
+++ ...
+++@@ -39,23 +27,13 @@ Three important operations on the embedding vectors are
+++ 2. Updating the vectors after observing user activities (`update`).
+++ 3. Recommend an item to a user from a list of items.
+++ 
+++-The embedding initialization is difficult, as there is few information about a
+++-new entity. For a new user, a simple method is to randomly initialize the
+++-embedding and run some cold start procedure (e.g. recommending some popular
+++-item) to probe the user's interest. For a new item, we may expose them to highly
+++-active users.
++++The embedding initialization is difficult, as there is few information about a new entity. For a new user, a simple method is to randomly initialize the embedding and run some cold start procedure (e.g. recommending some popular item) to probe the user's interest. For a new item, we may expose them to highly active users.
+++ 
+++-After observing some user activities, we gather information about the users'
+++-interest and items' popularity. To encode this information into the embeddings,
+++-we need to update the embedding vectors with some optimization method (e.g.
+++-gradient descent) where we pull in the distance between similar entities and
+++-push away those dissimilar entities.
++++After observing some user activities, we gather information about the users' interest and items' popularity. To encode this information into the embeddings, we need to update the embedding vectors with some optimization method (e.g. gradient descent) where we pull in the distance between similar entities and push away those dissimilar entities.
+++ 
+++ ## Embedding Holder
+++ 
+++-In this project, we utilize `EmbeddingHolder` (a collection of embeddings) as the database to store 
+++-and update the company's data. Initially, we read data from `*.in` to create two basic `EmbeddingHolder` for **users**
+++-and **items** respectively; our task is to update this database according to the incoming `Instruction`s.
++++In this project, we utilize `EmbeddingHolder` (a collection of embeddings) as the database to store and update the company's data. Initially, we read data from `*.in` to create two basic `EmbeddingHolder` for **users** and **items** respectively; our task is to update this database according to the incoming `Instruction`s.
+++ 
+++ ### Codebase
+++ 
+++@@ -88,35 +66,21 @@ The project directory looks like this:
+++ 
+++ ```
+++ 
+++-The source files in `lib/` implements the basic interfaces of the system. The
+++-`lib/embedding.h` contains the main interface of the embedding matrix data
+++-holder. The mentioned operations on the embedding matrix are implemented in
+++-`lib/model.h`. `Instruction` is in `lib/instruction.h`. The utilities are in `lib/utils.h`.
+++-You find these files belongs to the AI team and you should not 
+++-modify them, and do your optimization all from the system level. 
++++The source files in `lib/` implements the basic interfaces of the system. The `lib/embedding.h` contains the main interface of the embedding matrix data holder. The mentioned operations on the embedding matrix are implemented in `lib/model.h`. `Instruction` is in `lib/instruction.h`. The utilities are in `lib/utils.h`. You find these files belongs to the AI team and you should not modify them, and do your optimization all from the system level.
+++ 
+++-The entrance of the program is in `q*.cc`.
+++-You can modify everything in this project, except those tests in `lib`.
+++-You should ensure that after your modification, it still passes the tests in `lib`.
++++The entrance of the program is in `q*.cc`. You can modify everything in this project, except those tests in `lib`. You should ensure that after your modification, it still passes the tests in `lib`.
+++ 
+++-The project builds with the bazel build system, as we discussed in the
+++-discussion session. You should install bazel following the online documents and
+++-read the BUILD and WORKSPACE files carefully to understand the dependencies and
+++-code structure. 
++++The project builds with the bazel build system, as we discussed in the discussion session. You should install bazel following the online documents and read the BUILD and WORKSPACE files carefully to understand the dependencies and code structure.
+++ 
+++ ### Unit testing
+++ 
+++-Writing unit tests is an essential way to build and optimize system programs
+++-and thus we would require that you include unit tests for all major functions
+++-you write for your code. 
++++Writing unit tests is an essential way to build and optimize system programs and thus we would require that you include unit tests for all major functions you write for your code.
+++ 
+++-We have provided test cases in the libraries for you as examples. Please do not
+++-modify these unit tests.  You can modify library code, and add your own test cases
+++-to the library test, but make sure that after your modification, our provided test cases still pass.
++++We have provided test cases in the libraries for you as examples. Please do not modify these unit tests.  You can modify library code, and add your own test cases to the library test, but make sure that after your modification, our provided test cases still pass.
+++ 
+++ ### Format Checking
+++ 
+++- In this project we test the standard output stream for final grading, so make sure that you output the correct answer as you expect. We provide a format checking script in `format.cc`. You can modify it to test all output results of your submission. Run the format checking script after building it like this:
++++In this project we test the standard output stream for final grading, so make sure that you output the correct answer as you expect. We provide a format checking script in `format.cc`. You can modify it to test all output results of your submission. Run the format checking script after building it like this:
+++ 
+++ ```bash
+++ bazel-bin/q0 |grep [OUTPUT] > format.out && bazel-bin/format
+++@@ -124,25 +88,13 @@ bazel-bin/q0 |grep [OUTPUT] > format.out && bazel-bin/format
+++ 
+++ ### Instruction Files
+++ 
+++-The workload of the company comes as `Instruction`s with `order` and `payload`
+++-fields. Both fields are integers. In this project, the `Instruction.order` is
+++-either 0, 1 or 2, indicating the task of "init", "update" or "recommend". The workflow
+++-of different task types are different as described bellow.
+++-
+++-- For **“init”**, you should first create a new embedding. The payload is a
+++-  list of existing embedding indeces in the input matrix (`EmbeddingHolder`) that
+++-  are used for cold  start (downstream applications may use them for interest
+++-  probing). You should add this new  embedding into the `EmbeddingHolder` using
+++-  `append`. Then you need to call `cold_start`  for each of the embedding
+++-  indeces. Note that after `cold_start`, **only user embeddings are updated**
+++-  (see `q0.cc` for example).
+++-
+++-- For **“update”**, the payload is `[user_idx, item_idx, label, (iter_idx)]`. You should invoke
+++-  the `calc_gradient` on these two embedding vectors from `lib/model.h` and then
+++-  call `update_embedding` from `lib/embedding.h` **on both the user and the items**
+++-  (see`project/embedding.cc:run_q0` for example). The `iter_idx` indicates the
+++-  epoch number of current update, see Task-3 for information.
+++-- For **"recommend"**, the the payload is `[user_idx, iter_idx, item_idx1, item_idx2, item_idx3, item_idx4, ...]`. You should invoke the `recommend` on these embedding vectors from `lib/model.h` and then output the result. 
++++The workload of the company comes as `Instruction`s with `order` and `payload` fields. Both fields are integers. In this project, the `Instruction.order` is either 0, 1 or 2, indicating the task of "init", "update" or "recommend". The workflow of different task types are different as described bellow.
++++
++++- For **“init”**, you should first create a new embedding. The payload is a list of existing embedding indices in the input matrix (`EmbeddingHolder`) that are used for cold  start (downstream applications may use them for interest probing). You should add this new  embedding into the `EmbeddingHolder` using `append`. Then you need to call `cold_start`  for each of the embedding indices. Note that after `cold_start`, **only user embeddings are updated** (see `q0.cc` for example).
++++
++++- For **“update”**, the payload is `[user_idx, item_idx, label, (iter_idx)]`. You should invoke the `calc_gradient` on these two embedding vectors from `lib/model.h` and then call `update_embedding` from `lib/embedding.h` **on both the user and the items** (see`project/embedding.cc:run_q0` for example). The `iter_idx` indicates the epoch number of current update, see Task-3 for information.
++++
++++- For **"recommend"**, the the payload is `[user_idx, iter_idx, item_idx1, item_idx2, item_idx3, item_idx4, ...]`. You should invoke the `recommend` on these embedding vectors from `lib/model.h` and then output the result.
+++ 
+++ Note that NO provided functions are thread safe on their own.
+++ 
+++@@ -150,8 +102,7 @@ Note that NO provided functions are thread safe on their own.
+++ 
+++ For the following tasks, you should minimize duplicate code.  If there are code sharing among the following tasks, you should extract as much shared code as possible into separate `.h` and `.cc` library files, but not put everything into a single `.cc` file.  You should create your own `_test.cc` file for your library code.  20% of this project grade are reserved for good coding style (including the completeness of your own test cases).  
+++ 
+++-We recommend you to use the standard C++11 Threading to implement multi-threading.  However, please feel free to use any other
+++-C++ threading library (such as `pthread`, or Intel's TBB to do the following task).  If you need external libraries, please include them in the `WORKSPACE` file and make them to install and build automatically.  The TAs are not obliged to manually install any libraries on the grading machine. 
++++We recommend you to use the standard C++11 Threading to implement multi-threading.  However, please feel free to use any other C++ threading library (such as `pthread`, or Intel's TBB to do the following task).  If you need external libraries, please include them in the `WORKSPACE` file and make them to install and build automatically.  The TAs are not obliged to manually install any libraries on the grading machine.
+++ 
+++ ## Submission instructions
+++ 
+++@@ -165,55 +116,37 @@ To test whether your `.diff` works, clone a new repo and call `git apply ${STUDE
+++ 
+++ ## Task-0: Play with bazel build, the code and sanity check
+++ 
+++-In this task, you need to understand the project structure, read the `q0.cc` code and 
+++-the `project/BUILD` files, install bazel, build and run the provided sample program and tests. 
+++-This task is not included for grading.  Just provided as an example for you to read.  If you need more information
+++-on the Bazel build system, please refer to
+++-https://docs.bazel.build/versions/main/tutorial/cpp.html
+++-
++++In this task, you need to understand the project structure, read the `q0.cc` code and the `project/BUILD` files, install bazel, build and run the provided sample program and tests. This task is not included for grading.  Just provided as an example for you to read.  If you need more information on the Bazel build system, please refer to [https://docs.bazel.build/versions/main/tutorial/cpp.html]()
+++ 
+++-> **_NOTE:_** You can take this task's code as an example and benchmark for following tasks, 
+++-but do not copy and paste this unoptimized code! Otherwise you will get penalized. Task-0 is not included in the final grading.
++++> **_NOTE:_** You can take this task's code as an example and benchmark for following tasks, but do not copy and paste this unoptimized code! Otherwise you will get penalized. Task-0 is not included in the final grading.
+++ 
+++ > **_NOTE:_** Your code is not required to output exactly the same answer as `q0.cc`. You just need to guarantee your code is thread-safe.
+++ 
+++ ## Task-1: Supporting concurrent users
+++ 
+++-At the beginning, the recommender system is new and has very few items or users.
+++-Fortunately, the company attracts more and more users.  Thus, we need to modify the system
+++-so that when multiple users come in at the same time, and send `Instruction`s concurrently
+++-the system could behave correctly and efficiently. 
++++At the beginning, the recommender system is new and has very few items or users. Fortunately, the company attracts more and more users.  Thus, we need to modify the system so that when multiple users come in at the same time, and send `Instruction`s concurrently the system could behave correctly and efficiently.
+++ 
+++ **ToDo:**
+++ 
+++-In this task, your job is to process an `Instruction` set of "init" and "update". Considering that 
+++-`cal_gradient`  is time-consuming (10s of seconds running time, mostly waiting for I/O), 
+++-you should think of handling multiple `Instruction`s concurrently. Design 
+++-a synchronization mechanism using locks to guarantee that your codes are thread-safe.  Output your final 
+++-`EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()`.
++++In this task, your job is to process an `Instruction` set of "init" and "update". Considering that `cal_gradient`  is time-consuming (10s of seconds running time, mostly waiting for I/O), you should think of handling multiple `Instruction`s concurrently. Design a synchronization mechanism using locks to guarantee that your codes are thread-safe.  Output your final `EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()`.
+++ 
+++-Again, note that NO provided functions are thread safe on their own. Feel free to modify these functions
+++-in the `lib/` directory, but do not modify existing test cases there (you can add your own test cases).
++++Again, note that NO provided functions are thread safe on their own. Feel free to modify these functions in the `lib/` directory, but do not modify existing test cases there (you can add your own test cases).
+++ 
+++ **Grading:**
+++ 
+++-You will be graded by both the correctness and efficiency of your calculation 
+++-under heavy and arbitrary mixtures of incoming `Instruction`s.
++++You will be graded by both the correctness and efficiency of your calculation under heavy and arbitrary mixtures of incoming `Instruction`s.
+++ 
+++-> **_NOTE:_** In this task, a single `Instruction` only runs in a single thread (i.e. no internal parallelism within an `Instruction`). 
++++> **_NOTE:_** In this task, a single `Instruction` only runs in a single thread (i.e. no internal parallelism within an `Instruction`).
+++ 
+++ > **_NOTE:_** The correctness means thread-safety. We allow any order of updates, as long as it is thread-safe.
+++ 
+++ ## Task-2: Accelerate "Init" task through concurrency
+++ 
+++-Now the engineers find that it is still too slow to conduct each "init" task, as each of the task need to read multiple 
+++-embeddings to perform the init.  
+++-They hope to read and use these embeddings concurrently so shorten the time required to call a single "init".
+++-We can further speed up the process by building an internally-concurrent "init" function.
++++Now the engineers find that it is still too slow to conduct each "init" task, as each of the task need to read multiple embeddings to perform the init. They hope to read and use these embeddings concurrently so shorten the time required to call a single "init". We can further speed up the process by building an internally-concurrent "init" function.
+++ 
+++ **ToDo:**
+++ 
+++-In this task, your job is to process an `Instruction` set of "init" and "update". You can start with your codes in Task-1. Try to conduct multiple `cold_start`  in parallel and update the newly initialized embedding collectively without violating **thread-safety**.  Output your final `EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()` function.  Note that you still need to support multiple concurrent users. 
++++In this task, your job is to process an `Instruction` set of "init" and "update". You can start with your codes in Task-1. Try to conduct multiple `cold_start`  in parallel and update the newly initialized embedding collectively without violating **thread-safety**.  Output your final `EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()` function.  Note that you still need to support multiple concurrent users.
+++ 
+++ **Grading:**
+++ 
+++@@ -221,11 +154,7 @@ You will be graded by the correctness and efficiency of your calculation.
+++ 
+++ ## Task-3: Supporting incremental embedding updates
+++ 
+++-Now the recommender system has many users and items. Everyday, the system
+++-observes user activities and use them to update the embedding matrix for better
+++-recommendation performance. In this task, you will need to implement the
+++-updating process of the embedding matrix. The algorithm engineers of the company come up with a "genius" optimization
+++-algorithm. This algorithm requires the optimizer to update the embeddings iteratively, and they call each iteration an *epoch*. This innovative epoch-based optimization differs from existing methods in that the calculation of later epochs depends on the results of earlier epochs. In this task, your job is to support this epoch-based update.
++++Now the recommender system has many users and items. Everyday, the system observes user activities and use them to update the embedding matrix for better recommendation performance. In this task, you will need to implement the updating process of the embedding matrix. The algorithm engineers of the company come up with a "genius" optimization algorithm. This algorithm requires the optimizer to update the embeddings iteratively, and they call each iteration an *epoch*. This innovative epoch-based optimization differs from existing methods in that the calculation of later epochs depends on the results of earlier epochs. In this task, your job is to support this epoch-based update.
+++ 
+++ **ToDo:**
+++ 
+++@@ -237,12 +166,7 @@ You will be graded by the correctness and efficiency of your calculation.
+++ 
+++ ## Task-4: Doing recommendation while updating the embedding
+++ 
+++-Except the maintenance of the recommender system, the company also needs  to generate recommendations for each user using the 
+++-existing database. The recommendation should depend on the current version of data and not disturb the maintenance of the 
+++-recommender system.  Note that when an embedding update is going on, you can not at the same time read the embedding, as the 
+++-embedding update is not an atomic operation.  As the embedding update can take a long time, and can be quite frequent, 
+++-you need to figure out a way to allow recommendation to execute without getting blocked by the updates, and at the same time
+++-allowing the update to happen, and being able to use some quite recent updated embedding values for recommendation.  
++++Except the maintenance of the recommender system, the company also needs  to generate recommendations for each user using the existing database. The recommendation should depend on the current version of data and not disturb the maintenance of the recommender system.  Note that when an embedding update is going on, you can not at the same time read the embedding, as the embedding update is not an atomic operation.  As the embedding update can take a long time, and can be quite frequent, you need to figure out a way to allow recommendation to execute without getting blocked by the updates, and at the same time allowing the update to happen, and being able to use some quite recent updated embedding values for recommendation.  
+++ 
+++ **ToDo:**
+++ 
+++diff --git a/Thread-1/README.pdf b/Thread-1/README.pdf
+++new file mode 100644
+++index 0000000..35cb1d9
+++diff --git a/Thread-1/lib/BUILD b/Thread-1/lib/BUILD
+++index 07eb930..7fca563 100644
+++--- a/Thread-1/lib/BUILD
++++++ b/Thread-1/lib/BUILD
+++@@ -1,5 +1,35 @@
+++ ##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
+++ 
++++cc_library(
++++    name = "server_lib",
++++    srcs = [
++++        "server.cc",
++++        ],
++++    hdrs = [
++++        "server.h",
++++        ],
++++    deps = [
++++        ":embedding_lib",
++++		":instruction_lib",
++++        ":model_lib",
++++        ":utils_lib",
++++    ],
++++	visibility = [
++++		"//visibility:public",
++++	],
++++)
++++
++++cc_test(
++++  name = "server_lib_test",
++++  size = "small",
++++  srcs = ["server_test.cc"],
++++  deps = [
++++      "@gtest//:gtest_main",
++++	  ":server_lib",
++++      ":embedding_lib",
++++      ],
++++)
++++
+++ cc_library(
+++     name = "utils_lib",
+++     srcs = [
+++diff --git a/Thread-1/lib/embedding.cc b/Thread-1/lib/embedding.cc
+++index 966a76d..892c77c 100644
+++--- a/Thread-1/lib/embedding.cc
++++++ b/Thread-1/lib/embedding.cc
+++@@ -1,7 +1,9 @@
++++
+++ #include <fstream>
+++ #include <iostream>
+++ #include <sstream>
+++ #include <cmath>
++++#include <mutex>
+++ 
+++ #include "utils.h"
+++ #include "embedding.h"
+++@@ -23,11 +25,22 @@ Embedding::Embedding(int length, double* data) {
+++ }
+++ 
+++ Embedding::Embedding(Embedding* origin) {
++++    std::lock_guard<std::mutex> lock(origin->mux);
+++ 	int length = origin->get_length();
+++     embbedingAssert(length > 0, "Non-positive length encountered!", NON_POSITIVE_LEN);
+++     double* oldData = origin->get_data();
+++     double* newData = new double[length];
+++-    for(int i = 0; i<length; i++)newData[i] = oldData[i];
++++    for(int i = 0; i<length; i++) newData[i] = oldData[i];
++++    this->length = length;
++++    this->data = newData;
++++}
++++
++++Embedding::Embedding(Embedding const& origin) {
++++	int length = origin.length;
++++    embbedingAssert(length > 0, "Non-positive length encountered!", NON_POSITIVE_LEN);
++++    double* oldData = origin.data;
++++    double* newData = new double[length];
++++    for(int i = 0; i<length; i++) newData[i] = oldData[i];
+++     this->length = length;
+++     this->data = newData;
+++ }
+++@@ -58,6 +71,8 @@ void Embedding::update(Embedding* gradient, double stepsize) {
+++ }
+++ 
+++ std::string Embedding::to_string() {
++++    std::lock_guard<std::mutex> lock(this->mux);
++++
+++     std::string res;
+++     for (int i = 0; i < this->length; ++i) {
+++         if (i > 0) res += ',';
+++@@ -71,7 +86,7 @@ void Embedding::write_to_stdout() {
+++     std::cout << prefix << this->to_string() << '\n';
+++ }
+++ 
+++-Embedding Embedding::operator+(const Embedding &another) {
++++Embedding Embedding::operator+(Embedding &another) {
+++     double* data = new double[this->length];
+++     for (int i = 0; i < this->length; ++i) {
+++         data[i] = this->data[i] + another.data[i];
+++@@ -87,7 +102,7 @@ Embedding Embedding::operator+(const double value) {
+++     return Embedding(this->length, data);
+++ }
+++ 
+++-Embedding Embedding::operator-(const Embedding &another) {
++++Embedding Embedding::operator-(Embedding &another) {
+++     double* data = new double[this->length];
+++     for (int i = 0; i < this->length; ++i) {
+++         data[i] = this->data[i] - another.data[i];
+++@@ -103,7 +118,7 @@ Embedding Embedding::operator-(const double value) {
+++     return Embedding(this->length, data);
+++ }
+++ 
+++-Embedding Embedding::operator*(const Embedding &another) {
++++Embedding Embedding::operator*(Embedding &another) {
+++     double* data = new double[this->length];
+++     for (int i = 0; i < this->length; ++i) {
+++         data[i] = this->data[i] * another.data[i];
+++@@ -119,7 +134,7 @@ Embedding Embedding::operator*(const double value) {
+++     return Embedding(this->length, data);
+++ }
+++ 
+++-Embedding Embedding::operator/(const Embedding &another) {
++++Embedding Embedding::operator/(Embedding &another) {
+++     double* data = new double[this->length];
+++     for (int i = 0; i < this->length; ++i) {
+++         data[i] = this->data[i] / another.data[i];
+++@@ -135,7 +150,7 @@ Embedding Embedding::operator/(const double value) {
+++     return Embedding(this->length, data);
+++ }
+++ 
+++-bool Embedding::operator==(const Embedding &another) {
++++bool Embedding::operator==(Embedding &another) {
+++     for (int i = 0; i < this->length; ++i) {
+++         if(fabs(this->data[i]-another.data[i])>1.0e-6)return false;
+++     }
+++@@ -174,20 +189,26 @@ EmbeddingMatrix EmbeddingHolder::read(std::string filename) {
+++ }
+++ 
+++ int EmbeddingHolder::append(Embedding* data) {
++++    std::lock_guard<std::mutex> lock(this->mux);
++++
+++     int indx = this->emb_matx.size();
+++     embbedingAssert(
+++-        data->get_length() == this->emb_matx[0]->get_length(),
++++        indx == 0 | data->get_length() == this->emb_matx[0]->get_length(),
+++         "Embedding to append has a different length!", LEN_MISMATCH
+++     );
+++     this->emb_matx.push_back(data);
++++
++++    this->cv.notify_all();
+++     return indx;
+++ }
+++ 
+++ void EmbeddingHolder::write(std::string filename) {
++++    std::lock_guard<std::mutex> lock(this->mux);
++++
+++     std::ofstream ofs(filename);
+++     if (ofs.is_open()) {
+++         for (Embedding* emb: this->emb_matx) {
+++-            ofs << emb->to_string() << '\n';
++++            ofs << emb->to_string() + '\n';
+++         }
+++         ofs.close();
+++     } else {
+++@@ -196,9 +217,11 @@ void EmbeddingHolder::write(std::string filename) {
+++ }
+++ 
+++ void EmbeddingHolder::write_to_stdout() {
++++    std::lock_guard<std::mutex> lock(this->mux);
++++
+++     std::string prefix("[OUTPUT]");
+++     for (Embedding* emb: this->emb_matx) {
+++-        std::cout << prefix << emb->to_string() << '\n';
++++        std::cout << prefix + emb->to_string() + '\n';
+++     }
+++ }
+++ 
+++@@ -208,16 +231,45 @@ EmbeddingHolder::~EmbeddingHolder() {
+++     }
+++ }
+++ 
+++-void EmbeddingHolder::update_embedding(
+++-        int idx, EmbeddingGradient* gradient, double stepsize) {
+++-    this->emb_matx[idx]->update(gradient, stepsize);
++++void EmbeddingHolder::update_embedding(int idx, EmbeddingGradient* gradient, double stepsize) {
++++    Embedding* emb = this->get_embedding(idx);
++++    emb->lock();
++++    emb->update(gradient, stepsize);
++++    emb->unlock();
+++ }
+++ 
+++-bool EmbeddingHolder::operator==(const EmbeddingHolder &another) {
+++-    if (this->get_n_embeddings() != another.emb_matx.size())
++++Embedding* EmbeddingHolder::get_embedding(int idx) {
++++    std::unique_lock<std::mutex> lock(this->mux);
++++
++++    while (idx >= this->emb_matx.size()) {
++++        this->cv.wait(lock);
++++    }
++++    return this->emb_matx[idx];
++++}
++++
++++unsigned int EmbeddingHolder::get_n_embeddings() {
++++    std::lock_guard<std::mutex> lock(this->mux);
++++
++++    return this->emb_matx.size();
++++}
++++
++++int EmbeddingHolder::get_emb_length() {
++++    std::lock_guard<std::mutex> lock(this->mux);
++++
++++    return this->emb_matx.empty()? 0: this->emb_matx[0]->get_length();
++++}
++++
++++bool EmbeddingHolder::operator==(EmbeddingHolder &another) {
++++    std::lock_guard<std::mutex> lock(this->mux);
++++    std::lock_guard<std::mutex> lock1(another.mux);
++++
++++    if (this->emb_matx.size() != another.emb_matx.size())
+++         return false;
++++
+++     for (int i = 0; i < (int)this->emb_matx.size(); ++i) {
+++-        if(!(*(this->emb_matx[i]) == *(another.get_embedding(i)))){
++++        std::lock_guard<std::mutex> lock2(this->emb_matx[i]->mux);
++++        std::lock_guard<std::mutex> lock3(another.emb_matx[i]->mux);
++++        if(!(*(this->emb_matx[i]) == *(another.emb_matx[i]))){
+++         	return false;
+++ 		}
+++     }
+++diff --git a/Thread-1/lib/embedding.h b/Thread-1/lib/embedding.h
+++index 6e13d14..0be6f15 100644
+++--- a/Thread-1/lib/embedding.h
++++++ b/Thread-1/lib/embedding.h
+++@@ -1,8 +1,16 @@
+++ #ifndef THREAD_LIB_EMBEDDING_H_
+++ #define THREAD_LIB_EMBEDDING_H_
+++ 
++++// Embedding:
++++// Constructor and output method get lock automatically
++++// get data, operaters will not get lock
++++
++++// EmbeddingHolder: all methods are safe
++++
+++ #include <string>
+++ #include <vector>
++++#include <mutex>
++++#include <condition_variable>
+++ 
+++ namespace proj1 {
+++ 
+++@@ -18,6 +26,7 @@ public:
+++     Embedding(int, double*);
+++     Embedding(int, std::string);
+++     Embedding(Embedding*);
++++    Embedding(Embedding const&);
+++     ~Embedding() { delete []this->data; }
+++     double* get_data() { return this->data; }
+++     int get_length() { return this->length; }
+++@@ -25,15 +34,20 @@ public:
+++     std::string to_string();
+++     void write_to_stdout();
+++     // Operators
+++-    Embedding operator+(const Embedding&);
++++    Embedding operator+(Embedding&);
+++     Embedding operator+(const double);
+++-    Embedding operator-(const Embedding&);
++++    Embedding operator-(Embedding&);
+++     Embedding operator-(const double);
+++-    Embedding operator*(const Embedding&);
++++    Embedding operator*(Embedding&);
+++     Embedding operator*(const double);
+++-    Embedding operator/(const Embedding&);
++++    Embedding operator/(Embedding&);
+++     Embedding operator/(const double);
+++-    bool operator==(const Embedding&);
++++    bool operator==(Embedding&);
++++    //lock&unlock
++++    std::mutex mux;
++++    void lock() {this->mux.lock();}
++++    void unlock() {this->mux.unlock();}
++++
+++ private:
+++     int length;
+++     double* data;
+++@@ -52,14 +66,18 @@ public:
+++     void write(std::string filename);
+++     int append(Embedding *data);
+++     void update_embedding(int, EmbeddingGradient*, double);
+++-    Embedding* get_embedding(int idx) const { return this->emb_matx[idx]; } 
+++-    unsigned int get_n_embeddings() { return this->emb_matx.size(); }
+++-    int get_emb_length() {
+++-        return this->emb_matx.empty()? 0: this->get_embedding(0)->get_length();
+++-    }
+++-    bool operator==(const EmbeddingHolder&);
++++    Embedding* get_embedding(int idx);
++++    unsigned int get_n_embeddings();
++++    int get_emb_length();
++++    bool operator==(EmbeddingHolder&);
++++
+++ private:
+++     EmbeddingMatrix emb_matx;
++++    // lock&unlock
++++    std::mutex mux;
++++    // void lock() {this->mux.lock();}
++++    // void unlock() {this->mux.unlock();}
++++    std::condition_variable cv;
+++ };
+++ 
+++ } // namespace proj1
+++diff --git a/Thread-1/lib/server.cc b/Thread-1/lib/server.cc
+++new file mode 100644
+++index 0000000..3cb4c74
+++--- /dev/null
++++++ b/Thread-1/lib/server.cc
+++@@ -0,0 +1,281 @@
++++
++++#include <vector>
++++#include <thread>
++++#include <iostream>
++++#include <mutex>
++++
++++#include "server.h"
++++#include "model.h"
++++#include "utils.h"
++++
++++#define TIMER(s) // proj1::AutoTimer timer(s)
++++
++++namespace proj1 {
++++
++++void Server::write_to_stdout() {
++++    users.write_to_stdout();
++++    items.write_to_stdout();
++++}
++++
++++void Server::do_instruction(Instruction inst) {
++++    switch(inst.order) {
++++        case INIT_EMB: {
++++            if (!useLock) {
++++                do_init(inst);
++++            } else if (!initParall) {
++++                do_init_safe(inst);
++++            } else {
++++                do_init_parall(inst);
++++            }
++++            break;
++++        }
++++        case UPDATE_EMB: {
++++            if (!useLock) {
++++                do_update(inst);
++++            } else if (!useEpoch) {
++++                do_update_safe(inst);
++++            } else {
++++                do_update_epoch(inst);
++++            }
++++            break;
++++        }
++++        case RECOMMEND: {
++++            if (!useLock) {
++++                Embedding* emb = do_recommend(inst);
++++                emb->write_to_stdout();
++++            } else if (!useEpoch) {
++++                Embedding* emb = do_recommend_safe(inst);
++++                emb->write_to_stdout();
++++            } else {
++++                Embedding* emb = do_recommend_epoch(inst);
++++                emb->write_to_stdout();
++++            }
++++        }
++++    }
++++}
++++
++++void Server::do_init(Instruction inst) {
++++    TIMER("do_init");
++++
++++    int length = users.get_emb_length();
++++    Embedding* new_user = new Embedding(length);
++++    int user_idx = users.append(new_user);
++++
++++    for (int item_index: inst.payloads) {
++++        Embedding* item_emb = items.get_embedding(item_index);
++++
++++        EmbeddingGradient* gradient = cold_start(new_user, item_emb);
++++        users.update_embedding(user_idx, gradient, 0.01);
++++        delete gradient;
++++    }
++++}
++++
++++void Server::do_init_safe(Instruction inst) {
++++    TIMER("do_init_safe");
++++
++++    int length = users.get_emb_length();
++++    Embedding* new_user = new Embedding(length);
++++    int user_idx = users.append(new_user);
++++
++++    for (int item_index: inst.payloads) {
++++        Embedding* item_emb = items.get_embedding(item_index);
++++
++++        Embedding* user = new Embedding(new_user);
++++        Embedding* item = new Embedding(item_emb);
++++        EmbeddingGradient* gradient = cold_start(user, item);
++++        delete user, item;
++++
++++        users.update_embedding(user_idx, gradient, 0.01);
++++        delete gradient;
++++    }
++++}
++++
++++void Server::do_init_parall(Instruction inst) {
++++    TIMER("do_init_parall");
++++
++++    int length = users.get_emb_length();
++++    Embedding* new_user = new Embedding(length);
++++    int user_idx = users.append(new_user);
++++
++++    std::vector<std::thread*> threads;
++++    for (int item_index: inst.payloads) {
++++        std::thread* t = new std::thread(
++++            [&, item_index]() {
++++                Embedding* item_emb = items.get_embedding(item_index);
++++
++++                Embedding* user = new Embedding(new_user);
++++                Embedding* item = new Embedding(item_emb);
++++                EmbeddingGradient* gradient = cold_start(user, item);
++++                delete user, item;
++++
++++                users.update_embedding(user_idx, gradient, 0.01);
++++                delete gradient;
++++            }
++++        );
++++        threads.push_back(t);
++++    }
++++    for (std::thread* t: threads) {
++++        t->join();
++++        delete t;
++++    }
++++}
++++
++++void Server::do_update(Instruction inst) {
++++    TIMER("do_update");
++++
++++    std::cout << "do_update" << std::endl;
++++    int user_idx = inst.payloads[0];
++++    int item_idx = inst.payloads[1];
++++    int label = inst.payloads[2];
++++
++++    Embedding* user_emb = users.get_embedding(user_idx);
++++    Embedding* item_emb = items.get_embedding(item_idx);
++++
++++    EmbeddingGradient* gradient = calc_gradient(user_emb, item_emb, label);
++++    users.update_embedding(user_idx, gradient, 0.01);
++++    delete gradient;
++++
++++    gradient = calc_gradient(item_emb, user_emb, label);
++++    items.update_embedding(item_idx, gradient, 0.001);
++++    delete gradient;
++++}
++++
++++void Server::do_update_safe(Instruction inst) {
++++    TIMER("do_update_safe");
++++
++++    int user_idx = inst.payloads[0];
++++    int item_idx = inst.payloads[1];
++++    int label = inst.payloads[2];
++++
++++    Embedding* user_emb = users.get_embedding(user_idx);
++++    Embedding* item_emb = items.get_embedding(item_idx);
++++
++++    auto user = new Embedding(user_emb);
++++    auto item = new Embedding(item_emb);
++++    EmbeddingGradient* gradient = calc_gradient(user, item, label);
++++    delete user, item;
++++
++++    users.update_embedding(user_idx, gradient, 0.01);
++++    delete gradient;
++++
++++    user = new Embedding(user_emb);
++++    item = new Embedding(item_emb);
++++    gradient = calc_gradient(item, user, label);
++++    delete user, item;
++++
++++    items.update_embedding(item_idx, gradient, 0.001);
++++    delete gradient;
++++}
++++
++++void Server::do_update_epoch(Instruction inst) {
++++    int iter_idx = inst.payloads[3];
++++{
++++    std::unique_lock<std::mutex> lock(this->mux);
++++    while (!(this->epoch >= iter_idx || (this->epoch == iter_idx - 1 && this->num_threads == 0))) {
++++        this->cv.wait(lock);
++++    }
++++    if (this->epoch == iter_idx - 1 && this->num_threads == 0) {
++++        this->epoch = iter_idx;
++++    }
++++    this->num_threads++;
++++}
++++
++++    TIMER("do_update_inst");
++++
++++    int user_idx = inst.payloads[0];
++++    int item_idx = inst.payloads[1];
++++    int label = inst.payloads[2];
++++
++++    Embedding* user_emb = users.get_embedding(user_idx);
++++    Embedding* item_emb = items.get_embedding(item_idx);
++++
++++    auto user = new Embedding(user_emb);
++++    auto item = new Embedding(item_emb);
++++    EmbeddingGradient* gradient = calc_gradient(user, item, label);
++++    delete user, item;
++++
++++    users.update_embedding(user_idx, gradient, 0.01);
++++    delete gradient;
++++
++++    user = new Embedding(user_emb);
++++    item = new Embedding(item_emb);
++++    gradient = calc_gradient(item, user, label);
++++    delete user, item;
++++
++++    items.update_embedding(item_idx, gradient, 0.001);
++++    delete gradient;
++++
++++{
++++    std::unique_lock<std::mutex> lock(this->mux);
++++    this->num_threads--;
++++    this->cv.notify_all();
++++}
++++}
++++
++++Embedding* Server::do_recommend(Instruction inst) {
++++    TIMER("do_recommend");
++++
++++    int user_idx = inst.payloads[0];
++++    Embedding* user = users.get_embedding(user_idx);
++++
++++    std::vector<Embedding*> item_pool;
++++    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
++++        int item_idx = inst.payloads[i];
++++        item_pool.push_back(items.get_embedding(item_idx));
++++    }
++++
++++    Embedding* recommendation = recommend(user, item_pool);
++++    return recommendation;
++++}
++++
++++Embedding* Server::do_recommend_safe(Instruction inst) {
++++    TIMER("do_recommend_safe");
++++
++++    int user_idx = inst.payloads[0];
++++    Embedding* user = users.get_embedding(user_idx);
++++    std::lock_guard<std::mutex> lock(user->mux);
++++
++++    std::vector<Embedding*> item_pool;
++++    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
++++        int item_idx = inst.payloads[i];
++++        Embedding* item = items.get_embedding(item_idx);
++++        std::lock_guard<std::mutex> lock(item->mux);
++++        item_pool.push_back(item);
++++    }
++++
++++    Embedding* recommendation = recommend(user, item_pool);
++++    return recommendation;
++++}
++++
++++Embedding* Server::do_recommend_epoch(Instruction inst) {
++++    int iter_idx = inst.payloads[1];
++++{
++++    std::unique_lock<std::mutex> lock(this->mux);
++++    while (!(this->epoch > iter_idx | (this->epoch == iter_idx && this->num_threads == 0))) {
++++        this->cv.wait(lock);
++++    }
++++}
++++
++++    TIMER("do_recommend_epoch");
++++
++++    int user_idx = inst.payloads[0];
++++    Embedding* user = users.get_embedding(user_idx);
++++    std::lock_guard<std::mutex> lock(user->mux);
++++
++++    std::vector<Embedding*> item_pool;
++++    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
++++        int item_idx = inst.payloads[i];
++++        Embedding* item = items.get_embedding(item_idx);
++++        std::lock_guard<std::mutex> lock(item->mux);
++++        item_pool.push_back(item);
++++    }
++++
++++    Embedding* recommendation = recommend(user, item_pool);
++++    return recommendation;
++++}
++++
++++bool Server::operator==(Server& svr) {
++++    return this->users == svr.users && this->items == svr.items;
++++}
++++
++++} // namespace proj1
+++diff --git a/Thread-1/lib/server.h b/Thread-1/lib/server.h
+++new file mode 100644
+++index 0000000..c893a40
+++--- /dev/null
++++++ b/Thread-1/lib/server.h
+++@@ -0,0 +1,48 @@
++++#ifndef THREAD_LIB_SERVER_H_
++++#define THREAD_LIB_SERVER_H_
++++
++++#include <mutex>
++++#include <condition_variable>
++++#include "instruction.h"
++++#include "embedding.h"
++++
++++namespace proj1 {
++++
++++class Server {
++++public:
++++    Server(std::string user_filename, std::string item_filename) : users(user_filename), items(item_filename) {}
++++    Server(std::string user_filename, std::string item_filename, bool initParall, bool useLock, bool useEpoch)
++++        : users(user_filename), items(item_filename), initParall(initParall), useLock(useLock), useEpoch(useEpoch) {}
++++    void do_instruction(Instruction);
++++    void write_to_stdout();
++++
++++    void do_init(Instruction);
++++    void do_init_safe(Instruction);
++++    void do_init_parall(Instruction);
++++
++++    void do_update(Instruction);
++++    void do_update_safe(Instruction);
++++    void do_update_epoch(Instruction);
++++
++++    Embedding* do_recommend(Instruction);
++++    Embedding* do_recommend_safe(Instruction);
++++    Embedding* do_recommend_epoch(Instruction);
++++
++++    bool operator==(Server&);
++++
++++private:
++++    bool initParall = false;
++++    bool useLock = false;
++++    bool useEpoch = false;
++++
++++    int epoch = -1;
++++    int num_threads = 0; // number of update threads running in this epoch
++++    std::mutex mux;
++++    std::condition_variable cv;
++++
++++    EmbeddingHolder users;
++++    EmbeddingHolder items;
++++};
++++
++++} // namespace proj1
++++#endif // THREAD_LIB_SERVER_H_
+++diff --git a/Thread-1/lib/server_test.cc b/Thread-1/lib/server_test.cc
+++new file mode 100644
+++index 0000000..036212b
+++--- /dev/null
++++++ b/Thread-1/lib/server_test.cc
+++@@ -0,0 +1,53 @@
++++#include <gtest/gtest.h>
++++#include <vector>
++++
++++#include "server.h"
++++#include "embedding.h"
++++
++++namespace proj1 {
++++namespace testing {
++++
++++class ServerTest : public ::testing::Test {
++++protected:
++++    void SetUp() {
++++        server1 = new Server("data/q4.in", "data/q4.in");
++++        server2 = new Server("data/q4.in", "data/q4.in");
++++        server3 = new Server("data/q4.in", "data/q4.in");
++++
++++        inst_init = new Instruction("0 0 1 2 3 4 5 6 7 8");
++++        inst_update = new Instruction("1 7 5 0 0");
++++        inst_recommend = new Instruction("2 2 -1 4 5 6 3 7 9");
++++    }
++++    Server *server1, *server2, *server3;
++++    Instruction *inst_init, *inst_update, *inst_recommend;
++++};
++++
++++TEST_F(ServerTest, test_init) {
++++    server1->do_init(*inst_init);
++++    server2->do_init_safe(*inst_init);
++++    EXPECT_EQ((*server1) == (*server2), true);
++++}
++++
++++TEST_F(ServerTest, test_update) {
++++    server1->do_update(*inst_update);
++++    server2->do_update_safe(*inst_update);
++++    server3->do_update_epoch(*inst_update);
++++    EXPECT_EQ((*server1) == (*server2), true);
++++    EXPECT_EQ((*server2) == (*server3), true);
++++}
++++
++++TEST_F(ServerTest, test_recommend) {
++++    Embedding* emb1 = server1->do_recommend(*inst_recommend);
++++    Embedding* emb2 = server2->do_recommend_safe(*inst_recommend);
++++    Embedding* emb3 = server3->do_recommend_epoch(*inst_recommend);
++++    EXPECT_EQ((*emb1) == (*emb2), true);
++++    EXPECT_EQ((*emb2) == (*emb3), true);
++++}
++++    
++++} // namespace testing
++++} // namespace proj1
++++
++++int main(int argc, char** argv) {
++++    testing::InitGoogleTest(&argc, argv);
++++    return RUN_ALL_TESTS();
++++}
+++diff --git a/Thread-1/lib/utils.cc b/Thread-1/lib/utils.cc
+++index 3427314..a440602 100644
+++--- a/Thread-1/lib/utils.cc
++++++ b/Thread-1/lib/utils.cc
+++@@ -8,7 +8,9 @@
+++ namespace proj1 {
+++ 
+++ void a_slow_function(int seconds) {
+++-    //std::this_thread::sleep_for(std::chrono::seconds(seconds));
++++    if (slow_function) {
++++        std::this_thread::sleep_for(std::chrono::timescale(seconds));
++++    }
+++ }
+++ 
+++ double sigmoid(double x) {
+++@@ -39,7 +41,7 @@ AutoTimer::AutoTimer(std::string name) :
+++ AutoTimer::~AutoTimer() {
+++     auto end = std::chrono::high_resolution_clock::now();
+++     auto dur = std::chrono::duration_cast<std::chrono::microseconds>(end - m_beg);
+++-    std::cout << m_name << " : " << dur.count() << " usec\n";
++++    std::cout << m_name + " : " + std::to_string(dur.count()) + " usec\n";
+++ }
+++ 
+++ } // namespace proj1
+++diff --git a/Thread-1/lib/utils.h b/Thread-1/lib/utils.h
+++index 9f85001..398acbe 100644
+++--- a/Thread-1/lib/utils.h
++++++ b/Thread-1/lib/utils.h
+++@@ -6,6 +6,10 @@
+++ #include <iostream>
+++ #include <chrono>  // for AutoTimer function
+++ 
++++// slow_function
++++#define slow_function true
++++#define timescale seconds
++++
+++ // For colored outputs in terminal
+++ #define RST  "\x1B[0m"
+++ #define KRED  "\x1B[31m"
+++diff --git a/Thread-1/q0_my.cc b/Thread-1/q0_my.cc
+++new file mode 100644
+++index 0000000..f7f992a
+++--- /dev/null
++++++ b/Thread-1/q0_my.cc
+++@@ -0,0 +1,29 @@
++++#include <vector>
++++#include <tuple>
++++
++++#include <string>   // string
++++#include <chrono>   // timer
++++
++++#include "lib/utils.h"
++++#include "lib/server.h"
++++#include "lib/instruction.h"
++++
++++int main(int argc, char *argv[]) {
++++
++++    proj1::Server server("data/q0.in", "data/q0.in");
++++
++++    proj1::Instructions instructions = proj1::read_instructrions("data/q0_instruction.tsv");
++++
++++    {
++++        proj1::AutoTimer timer("q0");  // using this to print out timing of the block
++++        // Run all the instructions
++++        for (proj1::Instruction inst: instructions) {
++++            server.do_instruction(inst);
++++        }
++++    }
++++
++++    // Write the result
++++    server.write_to_stdout();
++++
++++    return 0;
++++}
+++diff --git a/Thread-1/q1.cc b/Thread-1/q1.cc
+++index 974ad23..395470a 100644
+++--- a/Thread-1/q1.cc
++++++ b/Thread-1/q1.cc
+++@@ -1,5 +1,39 @@
+++-#include <iostream> // cout, endl
++++#include <vector>
++++#include <tuple>
++++
++++#include <string>   // string
++++#include <chrono>   // timer
++++#include <thread>
++++#include <vector>
++++
++++#include "lib/utils.h"
++++#include "lib/server.h"
++++#include "lib/instruction.h"
++++
+++ int main(int argc, char *argv[]) {
+++-    std::cout << "please implement this function\n";
+++-    exit(1);
+++-}
+++\ No newline at end of file
++++
++++    proj1::Server server("data/q1.in", "data/q1.in", false, true, false);
++++
++++    proj1::Instructions instructions = proj1::read_instructrions("data/q1_instruction.tsv");
++++
++++    {
++++        proj1::AutoTimer timer("q1");  // using this to print out timing of the block
++++        // Run all the instructions
++++
++++        std::vector<std::thread*> threads;
++++
++++        for (proj1::Instruction inst: instructions) {
++++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
++++            threads.push_back(t);
++++        }
++++        for (auto t: threads) {
++++            t->join();
++++            delete t;
++++        }
++++    }
++++
++++    // Write the result
++++    server.write_to_stdout();
++++
++++    return 0;
++++}
+++diff --git a/Thread-1/q2.cc b/Thread-1/q2.cc
+++index c4b7413..bdc561f 100644
+++--- a/Thread-1/q2.cc
++++++ b/Thread-1/q2.cc
+++@@ -1,4 +1,39 @@
+++-#include <iostream> // cout, endl
++++#include <vector>
++++#include <tuple>
++++
++++#include <string>   // string
++++#include <chrono>   // timer
++++#include <thread>
++++#include <vector>
++++
++++#include "lib/utils.h"
++++#include "lib/server.h"
++++#include "lib/instruction.h"
++++
+++ int main(int argc, char *argv[]) {
+++-    exit(1);
+++-}
+++\ No newline at end of file
++++
++++    proj1::Server server("data/q2.in", "data/q2.in", true, true, false);
++++
++++    proj1::Instructions instructions = proj1::read_instructrions("data/q2_instruction.tsv");
++++
++++    {
++++        proj1::AutoTimer timer("q2");  // using this to print out timing of the block
++++        // Run all the instructions
++++        
++++        std::vector<std::thread*> threads;
++++
++++        for (proj1::Instruction inst: instructions) {
++++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
++++            threads.push_back(t);
++++        }
++++        for (auto t: threads) {
++++            t->join();
++++            delete t;
++++        }
++++    }
++++
++++    // Write the result
++++    server.write_to_stdout();
++++
++++    return 0;
++++}
+++diff --git a/Thread-1/q3.cc b/Thread-1/q3.cc
+++index c4b7413..9a22363 100644
+++--- a/Thread-1/q3.cc
++++++ b/Thread-1/q3.cc
+++@@ -1,4 +1,39 @@
+++-#include <iostream> // cout, endl
++++#include <vector>
++++#include <tuple>
++++
++++#include <string>   // string
++++#include <chrono>   // timer
++++#include <thread>
++++#include <vector>
++++
++++#include "lib/utils.h"
++++#include "lib/server.h"
++++#include "lib/instruction.h"
++++
+++ int main(int argc, char *argv[]) {
+++-    exit(1);
+++-}
+++\ No newline at end of file
++++
++++    proj1::Server server("data/q3.in", "data/q3.in", true, true, true);
++++
++++    proj1::Instructions instructions = proj1::read_instructrions("data/q3_instruction.tsv");
++++
++++    {
++++        proj1::AutoTimer timer("q3");  // using this to print out timing of the block
++++        // Run all the instructions
++++        
++++        std::vector<std::thread*> threads;
++++
++++        for (proj1::Instruction inst: instructions) {
++++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
++++            threads.push_back(t);
++++        }
++++        for (auto t: threads) {
++++            t->join();
++++            delete t;
++++        }
++++    }
++++
++++    // Write the result
++++    server.write_to_stdout();
++++
++++    return 0;
++++}
+++diff --git a/Thread-1/q4.cc b/Thread-1/q4.cc
+++new file mode 100644
+++index 0000000..ab2ac15
+++--- /dev/null
++++++ b/Thread-1/q4.cc
+++@@ -0,0 +1,36 @@
++++#include <vector>
++++#include <tuple>
++++
++++#include <string>   // string
++++#include <chrono>   // timer
++++#include <thread>
++++#include <vector>
++++
++++#include "lib/utils.h"
++++#include "lib/server.h"
++++#include "lib/instruction.h"
++++
++++int main(int argc, char *argv[]) {
++++
++++    proj1::Server server("data/q4.in", "data/q4.in", true, true, true);
++++
++++    proj1::Instructions instructions = proj1::read_instructrions("data/q4_instruction.tsv");
++++
++++    {
++++        proj1::AutoTimer timer("q4");  // using this to print out timing of the block
++++        // Run all the instructions
++++        
++++        std::vector<std::thread*> threads;
++++
++++        for (proj1::Instruction inst: instructions) {
++++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
++++            threads.push_back(t);
++++        }
++++        for (auto t: threads) {
++++            t->join();
++++            delete t;
++++        }
++++    }
++++
++++    return 0;
++++}
++diff --git a/Thread-1/BUILD b/Thread-1/BUILD
++index 28f4114..02118cd 100644
++--- a/Thread-1/BUILD
+++++ b/Thread-1/BUILD
++@@ -1,5 +1,21 @@
++ ##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
++ 
+++cc_binary(
+++    name = "q0_my",
+++    srcs = [
+++        "q0_my.cc"
+++            ],
+++    deps = [
+++        "//lib:instruction_lib",
+++        "//lib:utils_lib",
+++        "//lib:server_lib"
+++    ],
+++    copts = [
+++        "-std=c++11",
+++    ],
+++    data = glob(["data/q0*"]),
+++)
+++
++ cc_binary(
++     name = "q0",
++     srcs = [
++@@ -29,6 +45,16 @@ cc_binary(
++     srcs = [
++         "q1.cc"
++             ],
+++    deps = [
+++        "//lib:instruction_lib",
+++        "//lib:utils_lib",
+++        "//lib:server_lib"
+++    ],
+++    copts = [
+++        "-std=c++11",
+++    ],
+++    linkopts = ["-lpthread"],
+++    data = glob(["data/q1*"]),
++ )
++ 
++ cc_binary(
++@@ -36,6 +62,16 @@ cc_binary(
++     srcs = [
++         "q2.cc"
++             ],
+++    deps = [
+++        "//lib:instruction_lib",
+++        "//lib:utils_lib",
+++        "//lib:server_lib"
+++    ],
+++    copts = [
+++        "-std=c++11",
+++    ],
+++    linkopts = ["-lpthread"],
+++    data = glob(["data/q2*"]),
++ )
++ 
++ cc_binary(
++@@ -43,6 +79,50 @@ cc_binary(
++     srcs = [
++         "q3.cc"
++             ],
+++    deps = [
+++        "//lib:instruction_lib",
+++        "//lib:utils_lib",
+++        "//lib:server_lib"
+++    ],
+++    copts = [
+++        "-std=c++11",
+++    ],
+++    linkopts = ["-lpthread"],
+++    data = glob(["data/q3*"]),
+++)
+++
+++cc_binary(
+++    name = "q4",
+++    srcs = [
+++        "q4.cc"
+++            ],
+++    deps = [
+++        "//lib:instruction_lib",
+++        "//lib:utils_lib",
+++        "//lib:server_lib"
+++    ],
+++    copts = [
+++        "-std=c++11",
+++    ],
+++    linkopts = ["-lpthread"],
+++    data = glob(["data/q4*"]),
+++)
+++
+++cc_binary(
+++    name = "q5",
+++    srcs = [
+++        "q5.cc"
+++            ],
+++    deps = [
+++        "//lib:instruction_lib",
+++        "//lib:utils_lib",
+++        "//lib:server_lib"
+++    ],
+++    copts = [
+++        "-std=c++11",
+++    ],
+++    linkopts = ["-lpthread"],
+++    data = glob(["data/q4*"]),
++ )
++ 
++ cc_test(
++diff --git a/Thread-1/README.md b/Thread-1/README.md
++index 52f2b01..0fb82c9 100644
++--- a/Thread-1/README.md
+++++ b/Thread-1/README.md
++@@ -1,28 +1,16 @@
++ # Project 1: Multi-thread Programming
++ 
++-This project uses a (oversimplified) machine learning inference system to allow
++-you to put some basic OS concepts into practice and learn how system-level
++-optimizations help improve performance. 
++-
++-Suppose you are hired by a company to improve the efficiency of the optimization
++-process of a recommender system. This recommender system represents the users
++-and items (i.e. goods offered by the E-commerce platform) as vectors, and uses
++-these embedding vectors to calculate the semantic similarities between
++-user-user, user-item and item-item pairs. Since you are a system expert, the
++-company hopes you can improve the efficiency of the embedding maintenance of
++-the recommender system.
+++This project uses a (oversimplified) machine learning inference system to allow you to put some basic OS concepts into practice and learn how system-level optimizations help improve performance.
+++
+++Suppose you are hired by a company to improve the efficiency of the optimization  process of a recommender system. This recommender system represents the users and items (i.e. goods offered by the E-commerce platform) as vectors, and uses these embedding vectors to calculate the semantic similarities between user-user, user-item and item-item pairs. Since you are a system expert, the company hopes you can improve the efficiency of the embedding maintenance of the recommender system.
++ 
++ ## Introduction
++ 
++-The AI algorithm engineers of the company explain the basics of the setup to
++-you, as follows.
+++The AI algorithm engineers of the company explain the basics of the setup to you, as follows.
++ 
++ ### Embedding Vectors
++ 
++-Embedding vectors represent the entities (either a user or an item). These
++-vectors are stored as rows in an embedding matrix. These embedding vectors have
++-a property that the product of two embedding vectors (maybe after some
++-processing) indicates the similarity of the two corresponding entities.
+++Embedding vectors represent the entities (either a user or an item). These vectors are stored as rows in an embedding matrix. These embedding vectors have a property that the product of two embedding vectors (maybe after some processing) indicates the similarity of the two corresponding entities.
++ 
++ ```bash
++ ...
++@@ -39,23 +27,13 @@ Three important operations on the embedding vectors are
++ 2. Updating the vectors after observing user activities (`update`).
++ 3. Recommend an item to a user from a list of items.
++ 
++-The embedding initialization is difficult, as there is few information about a
++-new entity. For a new user, a simple method is to randomly initialize the
++-embedding and run some cold start procedure (e.g. recommending some popular
++-item) to probe the user's interest. For a new item, we may expose them to highly
++-active users.
+++The embedding initialization is difficult, as there is few information about a new entity. For a new user, a simple method is to randomly initialize the embedding and run some cold start procedure (e.g. recommending some popular item) to probe the user's interest. For a new item, we may expose them to highly active users.
++ 
++-After observing some user activities, we gather information about the users'
++-interest and items' popularity. To encode this information into the embeddings,
++-we need to update the embedding vectors with some optimization method (e.g.
++-gradient descent) where we pull in the distance between similar entities and
++-push away those dissimilar entities.
+++After observing some user activities, we gather information about the users' interest and items' popularity. To encode this information into the embeddings, we need to update the embedding vectors with some optimization method (e.g. gradient descent) where we pull in the distance between similar entities and push away those dissimilar entities.
++ 
++ ## Embedding Holder
++ 
++-In this project, we utilize `EmbeddingHolder` (a collection of embeddings) as the database to store 
++-and update the company's data. Initially, we read data from `*.in` to create two basic `EmbeddingHolder` for **users**
++-and **items** respectively; our task is to update this database according to the incoming `Instruction`s.
+++In this project, we utilize `EmbeddingHolder` (a collection of embeddings) as the database to store and update the company's data. Initially, we read data from `*.in` to create two basic `EmbeddingHolder` for **users** and **items** respectively; our task is to update this database according to the incoming `Instruction`s.
++ 
++ ### Codebase
++ 
++@@ -88,35 +66,21 @@ The project directory looks like this:
++ 
++ ```
++ 
++-The source files in `lib/` implements the basic interfaces of the system. The
++-`lib/embedding.h` contains the main interface of the embedding matrix data
++-holder. The mentioned operations on the embedding matrix are implemented in
++-`lib/model.h`. `Instruction` is in `lib/instruction.h`. The utilities are in `lib/utils.h`.
++-You find these files belongs to the AI team and you should not 
++-modify them, and do your optimization all from the system level. 
+++The source files in `lib/` implements the basic interfaces of the system. The `lib/embedding.h` contains the main interface of the embedding matrix data holder. The mentioned operations on the embedding matrix are implemented in `lib/model.h`. `Instruction` is in `lib/instruction.h`. The utilities are in `lib/utils.h`. You find these files belongs to the AI team and you should not modify them, and do your optimization all from the system level.
++ 
++-The entrance of the program is in `q*.cc`.
++-You can modify everything in this project, except those tests in `lib`.
++-You should ensure that after your modification, it still passes the tests in `lib`.
+++The entrance of the program is in `q*.cc`. You can modify everything in this project, except those tests in `lib`. You should ensure that after your modification, it still passes the tests in `lib`.
++ 
++-The project builds with the bazel build system, as we discussed in the
++-discussion session. You should install bazel following the online documents and
++-read the BUILD and WORKSPACE files carefully to understand the dependencies and
++-code structure. 
+++The project builds with the bazel build system, as we discussed in the discussion session. You should install bazel following the online documents and read the BUILD and WORKSPACE files carefully to understand the dependencies and code structure.
++ 
++ ### Unit testing
++ 
++-Writing unit tests is an essential way to build and optimize system programs
++-and thus we would require that you include unit tests for all major functions
++-you write for your code. 
+++Writing unit tests is an essential way to build and optimize system programs and thus we would require that you include unit tests for all major functions you write for your code.
++ 
++-We have provided test cases in the libraries for you as examples. Please do not
++-modify these unit tests.  You can modify library code, and add your own test cases
++-to the library test, but make sure that after your modification, our provided test cases still pass.
+++We have provided test cases in the libraries for you as examples. Please do not modify these unit tests.  You can modify library code, and add your own test cases to the library test, but make sure that after your modification, our provided test cases still pass.
++ 
++ ### Format Checking
++ 
++- In this project we test the standard output stream for final grading, so make sure that you output the correct answer as you expect. We provide a format checking script in `format.cc`. You can modify it to test all output results of your submission. Run the format checking script after building it like this:
+++In this project we test the standard output stream for final grading, so make sure that you output the correct answer as you expect. We provide a format checking script in `format.cc`. You can modify it to test all output results of your submission. Run the format checking script after building it like this:
++ 
++ ```bash
++ bazel-bin/q0 |grep [OUTPUT] > format.out && bazel-bin/format
++@@ -124,25 +88,13 @@ bazel-bin/q0 |grep [OUTPUT] > format.out && bazel-bin/format
++ 
++ ### Instruction Files
++ 
++-The workload of the company comes as `Instruction`s with `order` and `payload`
++-fields. Both fields are integers. In this project, the `Instruction.order` is
++-either 0, 1 or 2, indicating the task of "init", "update" or "recommend". The workflow
++-of different task types are different as described bellow.
++-
++-- For **“init”**, you should first create a new embedding. The payload is a
++-  list of existing embedding indeces in the input matrix (`EmbeddingHolder`) that
++-  are used for cold  start (downstream applications may use them for interest
++-  probing). You should add this new  embedding into the `EmbeddingHolder` using
++-  `append`. Then you need to call `cold_start`  for each of the embedding
++-  indeces. Note that after `cold_start`, **only user embeddings are updated**
++-  (see `q0.cc` for example).
++-
++-- For **“update”**, the payload is `[user_idx, item_idx, label, (iter_idx)]`. You should invoke
++-  the `calc_gradient` on these two embedding vectors from `lib/model.h` and then
++-  call `update_embedding` from `lib/embedding.h` **on both the user and the items**
++-  (see`project/embedding.cc:run_q0` for example). The `iter_idx` indicates the
++-  epoch number of current update, see Task-3 for information.
++-- For **"recommend"**, the the payload is `[user_idx, iter_idx, item_idx1, item_idx2, item_idx3, item_idx4, ...]`. You should invoke the `recommend` on these embedding vectors from `lib/model.h` and then output the result. 
+++The workload of the company comes as `Instruction`s with `order` and `payload` fields. Both fields are integers. In this project, the `Instruction.order` is either 0, 1 or 2, indicating the task of "init", "update" or "recommend". The workflow of different task types are different as described bellow.
+++
+++- For **“init”**, you should first create a new embedding. The payload is a list of existing embedding indices in the input matrix (`EmbeddingHolder`) that are used for cold  start (downstream applications may use them for interest probing). You should add this new  embedding into the `EmbeddingHolder` using `append`. Then you need to call `cold_start`  for each of the embedding indices. Note that after `cold_start`, **only user embeddings are updated** (see `q0.cc` for example).
+++
+++- For **“update”**, the payload is `[user_idx, item_idx, label, (iter_idx)]`. You should invoke the `calc_gradient` on these two embedding vectors from `lib/model.h` and then call `update_embedding` from `lib/embedding.h` **on both the user and the items** (see`project/embedding.cc:run_q0` for example). The `iter_idx` indicates the epoch number of current update, see Task-3 for information.
+++
+++- For **"recommend"**, the the payload is `[user_idx, iter_idx, item_idx1, item_idx2, item_idx3, item_idx4, ...]`. You should invoke the `recommend` on these embedding vectors from `lib/model.h` and then output the result.
++ 
++ Note that NO provided functions are thread safe on their own.
++ 
++@@ -150,70 +102,51 @@ Note that NO provided functions are thread safe on their own.
++ 
++ For the following tasks, you should minimize duplicate code.  If there are code sharing among the following tasks, you should extract as much shared code as possible into separate `.h` and `.cc` library files, but not put everything into a single `.cc` file.  You should create your own `_test.cc` file for your library code.  20% of this project grade are reserved for good coding style (including the completeness of your own test cases).  
++ 
++-We recommend you to use the standard C++11 Threading to implement multi-threading.  However, please feel free to use any other
++-C++ threading library (such as `pthread`, or Intel's TBB to do the following task).  If you need external libraries, please include them in the `WORKSPACE` file and make them to install and build automatically.  The TAs are not obliged to manually install any libraries on the grading machine. 
+++We recommend you to use the standard C++11 Threading to implement multi-threading.  However, please feel free to use any other C++ threading library (such as `pthread`, or Intel's TBB to do the following task).  If you need external libraries, please include them in the `WORKSPACE` file and make them to install and build automatically.  The TAs are not obliged to manually install any libraries on the grading machine.
++ 
++ ## Submission instructions
++ 
++ You should create a `.diff` file of your latest commit from the latest commit of the main project on learn.tsinghua, as follows:
++ 
++ ```bash
++-git diff YOUR_COMMIT_SHA1 MAIN_REPO_COMMIT_SHA1 > ${STUDENT_ID_1}_${STUDENT_ID_2}.diff
+++git diff MAIN_REPO_COMMIT_SHA1 YOUR_COMMIT_SHA1 > ${STUDENT_ID_1}_${STUDENT_ID_2}.diff
++ ```
++ 
++ To test whether your `.diff` works, clone a new repo and call `git apply ${STUDENT_ID_1}_${STUDENT_ID_2}.diff` and see if your code still works.
++ 
++ ## Task-0: Play with bazel build, the code and sanity check
++ 
++-In this task, you need to understand the project structure, read the `q0.cc` code and 
++-the `project/BUILD` files, install bazel, build and run the provided sample program and tests. 
++-This task is not included for grading.  Just provided as an example for you to read.  If you need more information
++-on the Bazel build system, please refer to
++-https://docs.bazel.build/versions/main/tutorial/cpp.html
++-
+++In this task, you need to understand the project structure, read the `q0.cc` code and the `project/BUILD` files, install bazel, build and run the provided sample program and tests. This task is not included for grading.  Just provided as an example for you to read.  If you need more information on the Bazel build system, please refer to [https://docs.bazel.build/versions/main/tutorial/cpp.html]()
++ 
++-> **_NOTE:_** You can take this task's code as an example and benchmark for following tasks, 
++-but do not copy and paste this unoptimized code! Otherwise you will get penalized. Task-0 is not included in the final grading.
+++> **_NOTE:_** You can take this task's code as an example and benchmark for following tasks, but do not copy and paste this unoptimized code! Otherwise you will get penalized. Task-0 is not included in the final grading.
++ 
++ > **_NOTE:_** Your code is not required to output exactly the same answer as `q0.cc`. You just need to guarantee your code is thread-safe.
++ 
++ ## Task-1: Supporting concurrent users
++ 
++-At the beginning, the recommender system is new and has very few items or users.
++-Fortunately, the company attracts more and more users.  Thus, we need to modify the system
++-so that when multiple users come in at the same time, and send `Instruction`s concurrently
++-the system could behave correctly and efficiently. 
+++At the beginning, the recommender system is new and has very few items or users. Fortunately, the company attracts more and more users.  Thus, we need to modify the system so that when multiple users come in at the same time, and send `Instruction`s concurrently the system could behave correctly and efficiently.
++ 
++ **ToDo:**
++ 
++-In this task, your job is to process an `Instruction` set of "init" and "update". Considering that 
++-`cal_gradient`  is time-consuming (10s of seconds running time, mostly waiting for I/O), 
++-you should think of handling multiple `Instruction`s concurrently. Design 
++-a synchronization mechanism using locks to guarantee that your codes are thread-safe.  Output your final 
++-`EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()`.
+++In this task, your job is to process an `Instruction` set of "init" and "update". Considering that `cal_gradient`  is time-consuming (10s of seconds running time, mostly waiting for I/O), you should think of handling multiple `Instruction`s concurrently. Design a synchronization mechanism using locks to guarantee that your codes are thread-safe.  Output your final `EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()`.
++ 
++-Again, note that NO provided functions are thread safe on their own. Feel free to modify these functions
++-in the `lib/` directory, but do not modify existing test cases there (you can add your own test cases).
+++Again, note that NO provided functions are thread safe on their own. Feel free to modify these functions in the `lib/` directory, but do not modify existing test cases there (you can add your own test cases).
++ 
++ **Grading:**
++ 
++-You will be graded by both the correctness and efficiency of your calculation 
++-under heavy and arbitrary mixtures of incoming `Instruction`s.
+++You will be graded by both the correctness and efficiency of your calculation under heavy and arbitrary mixtures of incoming `Instruction`s.
++ 
++-> **_NOTE:_** In this task, a single `Instruction` only runs in a single thread (i.e. no internal parallelism within an `Instruction`). 
+++> **_NOTE:_** In this task, a single `Instruction` only runs in a single thread (i.e. no internal parallelism within an `Instruction`).
++ 
++ > **_NOTE:_** The correctness means thread-safety. We allow any order of updates, as long as it is thread-safe.
++ 
++ ## Task-2: Accelerate "Init" task through concurrency
++ 
++-Now the engineers find that it is still too slow to conduct each "init" task, as each of the task need to read multiple 
++-embeddings to perform the init.  
++-They hope to read and use these embeddings concurrently so shorten the time required to call a single "init".
++-We can further speed up the process by building an internally-concurrent "init" function.
+++Now the engineers find that it is still too slow to conduct each "init" task, as each of the task need to read multiple embeddings to perform the init. They hope to read and use these embeddings concurrently so shorten the time required to call a single "init". We can further speed up the process by building an internally-concurrent "init" function.
++ 
++ **ToDo:**
++ 
++-In this task, your job is to process an `Instruction` set of "init" and "update". You can start with your codes in Task-1. Try to conduct multiple `cold_start`  in parallel and update the newly initialized embedding collectively without violating **thread-safety**.  Output your final `EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()` function.  Note that you still need to support multiple concurrent users. 
+++In this task, your job is to process an `Instruction` set of "init" and "update". You can start with your codes in Task-1. Try to conduct multiple `cold_start`  in parallel and update the newly initialized embedding collectively without violating **thread-safety**.  Output your final `EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()` function.  Note that you still need to support multiple concurrent users.
++ 
++ **Grading:**
++ 
++@@ -221,11 +154,7 @@ You will be graded by the correctness and efficiency of your calculation.
++ 
++ ## Task-3: Supporting incremental embedding updates
++ 
++-Now the recommender system has many users and items. Everyday, the system
++-observes user activities and use them to update the embedding matrix for better
++-recommendation performance. In this task, you will need to implement the
++-updating process of the embedding matrix. The algorithm engineers of the company come up with a "genius" optimization
++-algorithm. This algorithm requires the optimizer to update the embeddings iteratively, and they call each iteration an *epoch*. This innovative epoch-based optimization differs from existing methods in that the calculation of later epochs depends on the results of earlier epochs. In this task, your job is to support this epoch-based update.
+++Now the recommender system has many users and items. Everyday, the system observes user activities and use them to update the embedding matrix for better recommendation performance. In this task, you will need to implement the updating process of the embedding matrix. The algorithm engineers of the company come up with a "genius" optimization algorithm. This algorithm requires the optimizer to update the embeddings iteratively, and they call each iteration an *epoch*. This innovative epoch-based optimization differs from existing methods in that the calculation of later epochs depends on the results of earlier epochs. In this task, your job is to support this epoch-based update.
++ 
++ **ToDo:**
++ 
++@@ -237,12 +166,7 @@ You will be graded by the correctness and efficiency of your calculation.
++ 
++ ## Task-4: Doing recommendation while updating the embedding
++ 
++-Except the maintenance of the recommender system, the company also needs  to generate recommendations for each user using the 
++-existing database. The recommendation should depend on the current version of data and not disturb the maintenance of the 
++-recommender system.  Note that when an embedding update is going on, you can not at the same time read the embedding, as the 
++-embedding update is not an atomic operation.  As the embedding update can take a long time, and can be quite frequent, 
++-you need to figure out a way to allow recommendation to execute without getting blocked by the updates, and at the same time
++-allowing the update to happen, and being able to use some quite recent updated embedding values for recommendation.  
+++Except the maintenance of the recommender system, the company also needs  to generate recommendations for each user using the existing database. The recommendation should depend on the current version of data and not disturb the maintenance of the recommender system.  Note that when an embedding update is going on, you can not at the same time read the embedding, as the embedding update is not an atomic operation.  As the embedding update can take a long time, and can be quite frequent, you need to figure out a way to allow recommendation to execute without getting blocked by the updates, and at the same time allowing the update to happen, and being able to use some quite recent updated embedding values for recommendation.  
++ 
++ **ToDo:**
++ 
++diff --git a/Thread-1/README.pdf b/Thread-1/README.pdf
++new file mode 100644
++index 0000000..f66b59f
++--- /dev/null
+++++ b/Thread-1/README.pdf
++@@ -0,0 +1,284 @@
+++Project 1: Multi-thread Programming
+++
+++This project uses a (oversimplified) machine learning inference system to allow you to put some
+++basic OS concepts into practice and learn how system-level optimizations help improve
+++performance.
+++
+++Suppose you are hired by a company to improve the efficiency of the optimization process of a
+++recommender system. This recommender system represents the users and items (i.e. goods
+++offered by the E-commerce platform) as vectors, and uses these embedding vectors to calculate
+++the semantic similarities between user-user, user-item and item-item pairs. Since you are a
+++system expert, the company hopes you can improve the efficiency of the embedding
+++maintenance of the recommender system.
+++
+++Introduction
+++
+++The AI algorithm engineers of the company explain the basics of the setup to you, as follows.
+++
+++Embedding Vectors
+++
+++Embedding vectors represent the entities (either a user or an item). These vectors are stored as
+++rows in an embedding matrix. These embedding vectors have a property that the product of two
+++embedding vectors (maybe after some processing) indicates the similarity of the two
+++corresponding entities.
+++
+++   1 ...
+++   2 # The following line illustrates the i-th row of the embedding matrix
+++   3 -0.6365,-0.1280,-0.7883,0.9397,0.2103,0.3158,0.9385,-0.0953,-0.4800,-0.7988
+++   4 ...
+++
+++Operations on Embedding Vectors
+++
+++Three important operations on the embedding vectors are
+++
+++   1. Initializing ( init_embedding ) the vectors on cold start ( cold_start ) ;
+++   2. Updating the vectors after observing user activities ( update ).
+++   3. Recommend an item to a user from a list of items.
+++
+++The embedding initialization is difficult, as there is few information about a new entity. For a new
+++user, a simple method is to randomly initialize the embedding and run some cold start procedure
+++(e.g. recommending some popular item) to probe the user's interest. For a new item, we may
+++expose them to highly active users.
+++
+++After observing some user activities, we gather information about the users' interest and items'
+++popularity. To encode this information into the embeddings, we need to update the embedding
+++vectors with some optimization method (e.g. gradient descent) where we pull in the distance
+++between similar entities and push away those dissimilar entities.
+++
+++Embedding Holder
+++In this project, we utilize EmbeddingHolder (a collection of embeddings) as the database to store
+++and update the company's data. Initially, we read data from *.in to create two basic
+++EmbeddingHolder for users and items respectively; our task is to update this database according
+++to the incoming Instruction s.
+++
+++Codebase
+++
+++The project directory looks like this:
+++
+++     1.
+++     2 ├── benchmark.cc
+++     3 ├── BUILD
+++     4 ├── format.cc
+++     5 ├── lib
+++     6 │ ├── BUILD
+++     7 │ ├── embedding.cc
+++     8 │ ├── embedding.h
+++     9 │ ├── embedding_test.cc
+++   10 │ ├── instruction.cc
+++   11 │ ├── instruction.h
+++   12 │ ├── model.cc
+++   13 │ ├── model.h
+++   14 │ ├── model_test.cc
+++   15 │ ├── utils.cc
+++   16 │ ├── utils.h
+++   17 │ └── util_test.cc
+++   18 ├── q0.cc
+++   19 ├── q1.cc
+++   20 ├── q2.cc
+++   21 ├── q3.cc
+++   22 ├── README.md
+++   23 └── WORKSPACE
+++   24
+++
+++The source files in lib/ implements the basic interfaces of the system. The lib/embedding.h
+++contains the main interface of the embedding matrix data holder. The mentioned operations on
+++the embedding matrix are implemented in lib/model.h . Instruction is in
+++lib/instruction.h . The utilities are in lib/utils.h . You find these files belongs to the AI team
+++and you should not modify them, and do your optimization all from the system level.
+++
+++The entrance of the program is in q*.cc . You can modify everything in this project, except those
+++tests in lib . You should ensure that after your modification, it still passes the tests in lib .
+++
+++The project builds with the bazel build system, as we discussed in the discussion session. You
+++should install bazel following the online documents and read the BUILD and WORKSPACE files
+++carefully to understand the dependencies and code structure.
+++
+++Unit testing
+++
+++Writing unit tests is an essential way to build and optimize system programs and thus we would
+++require that you include unit tests for all major functions you write for your code.
+++
+++We have provided test cases in the libraries for you as examples. Please do not modify these unit
+++tests. You can modify library code, and add your own test cases to the library test, but make sure
+++that after your modification, our provided test cases still pass.
+++Format Checking
+++
+++In this project we test the standard output stream for final grading, so make sure that you output
+++the correct answer as you expect. We provide a format checking script in format.cc . You can
+++modify it to test all output results of your submission. Run the format checking script after
+++building it like this:
+++
+++   1 bazel-bin/q0 |grep [OUTPUT] > format.out && bazel-bin/format
+++
+++Instruction Files
+++
+++The workload of the company comes as Instruction s with order and payload fields. Both
+++fields are integers. In this project, the Instruction.order is either 0, 1 or 2, indicating the task of
+++"init", "update" or "recommend". The workflow of different task types are different as described
+++bellow.
+++
+++      For “init”, you should first create a new embedding. The payload is a list of existing
+++      embedding indices in the input matrix ( EmbeddingHolder ) that are used for cold start
+++      (downstream applications may use them for interest probing). You should add this new
+++      embedding into the EmbeddingHolder using append . Then you need to call cold_start for
+++      each of the embedding indices. Note that after cold_start , only user embeddings are
+++      updated (see q0.cc for example).
+++      For “update”, the payload is [user_idx, item_idx, label, (iter_idx)] . You should
+++      invoke the calc_gradient on these two embedding vectors from lib/model.h and then
+++      call update_embedding from lib/embedding.h on both the user and the items
+++      (see project/embedding.cc:run_q0 for example). The iter_idx indicates the epoch
+++      number of current update, see Task-3 for information.
+++      For "recommend", the the payload is [user_idx, iter_idx, item_idx1, item_idx2,
+++      item_idx3, item_idx4, ...] . You should invoke the recommend on these embedding
+++      vectors from lib/model.h and then output the result.
+++
+++Note that NO provided functions are thread safe on their own.
+++
+++Other coding instructions
+++
+++For the following tasks, you should minimize duplicate code. If there are code sharing among the
+++following tasks, you should extract as much shared code as possible into separate .h and .cc
+++library files, but not put everything into a single .cc file. You should create your own _test.cc
+++file for your library code. 20% of this project grade are reserved for good coding style (including
+++the completeness of your own test cases).
+++
+++We recommend you to use the standard C++11 Threading to implement multi-threading.
+++However, please feel free to use any other C++ threading library (such as pthread , or Intel's TBB
+++to do the following task). If you need external libraries, please include them in the WORKSPACE file
+++and make them to install and build automatically. The TAs are not obliged to manually install any
+++libraries on the grading machine.
+++
+++Submission instructions
+++
+++You should create a .diff file of your latest commit from the latest commit of the main project
+++on learn.tsinghua, as follows:
+++   1 git diff YOUR_COMMIT_SHA1 MAIN_REPO_COMMIT_SHA1 >
+++         ${STUDENT_ID_1}_${STUDENT_ID_2}.diff
+++
+++To test whether your .diff works, clone a new repo and call git apply
+++${STUDENT_ID_1}_${STUDENT_ID_2}.diff and see if your code still works.
+++
+++Task-0: Play with bazel build, the code and sanity
+++check
+++
+++In this task, you need to understand the project structure, read the q0.cc code and the
+++project/BUILD files, install bazel, build and run the provided sample program and tests. This
+++task is not included for grading. Just provided as an example for you to read. If you need more
+++information on the Bazel build system, please refer to
+++
+++    NOTE: You can take this task's code as an example and benchmark for following tasks, but
+++    do not copy and paste this unoptimized code! Otherwise you will get penalized. Task-0 is not
+++    included in the final grading.
+++
+++    NOTE: Your code is not required to output exactly the same answer as q0.cc . You just need
+++    to guarantee your code is thread-safe.
+++
+++Task-1: Supporting concurrent users
+++
+++At the beginning, the recommender system is new and has very few items or users. Fortunately,
+++the company attracts more and more users. Thus, we need to modify the system so that when
+++multiple users come in at the same time, and send Instruction s concurrently the system could
+++behave correctly and efficiently.
+++
+++ToDo:
+++
+++In this task, your job is to process an Instruction set of "init" and "update". Considering that
+++cal_gradient is time-consuming (10s of seconds running time, mostly waiting for I/O), you
+++should think of handling multiple Instruction s concurrently. Design a synchronization
+++mechanism using locks to guarantee that your codes are thread-safe. Output your final
+++EmbeddingHolder of 1) users and 2) items using the provided
+++EmbeddingHolder::write_to_stdout() .
+++
+++Again, note that NO provided functions are thread safe on their own. Feel free to modify these
+++functions in the lib/ directory, but do not modify existing test cases there (you can add your
+++own test cases).
+++
+++Grading:
+++
+++You will be graded by both the correctness and efficiency of your calculation under heavy and
+++arbitrary mixtures of incoming Instruction s.
+++
+++    NOTE: In this task, a single Instruction only runs in a single thread (i.e. no internal
+++    parallelism within an Instruction ).
+++
+++    NOTE: The correctness means thread-safety. We allow any order of updates, as long as it is
+++    thread-safe.
+++
+++Task-2: Accelerate "Init" task through concurrency
+++Now the engineers find that it is still too slow to conduct each "init" task, as each of the task need
+++to read multiple embeddings to perform the init. They hope to read and use these embeddings
+++concurrently so shorten the time required to call a single "init". We can further speed up the
+++process by building an internally-concurrent "init" function.
+++
+++ToDo:
+++
+++In this task, your job is to process an Instruction set of "init" and "update". You can start with
+++your codes in Task-1. Try to conduct multiple cold_start in parallel and update the newly
+++initialized embedding collectively without violating thread-safety. Output your final
+++EmbeddingHolder of 1) users and 2) items using the provided
+++EmbeddingHolder::write_to_stdout() function. Note that you still need to support multiple
+++concurrent users.
+++
+++Grading:
+++
+++You will be graded by the correctness and efficiency of your calculation.
+++
+++Task-3: Supporting incremental embedding updates
+++
+++Now the recommender system has many users and items. Everyday, the system observes user
+++activities and use them to update the embedding matrix for better recommendation
+++performance. In this task, you will need to implement the updating process of the embedding
+++matrix. The algorithm engineers of the company come up with a "genius" optimization algorithm.
+++This algorithm requires the optimizer to update the embeddings iteratively, and they call each
+++iteration an epoch. This innovative epoch-based optimization differs from existing methods in that
+++the calculation of later epochs depends on the results of earlier epochs. In this task, your job is to
+++support this epoch-based update.
+++
+++ToDo:
+++
+++In this task, you should deal with the data dependency among Instruction s. The input
+++Instruction set contains both "init" and "update" tasks. The iter_idx s are in ascending order,
+++and takes nonnegative integer values starting from 0. One update instruction should be
+++executed only after all update instructions with smaller iter_idx s are completed to guarantee
+++the dependency correctness (using data from the last iteration as input). You can start with your
+++codes in Task-2 and try to make all update execution parallel and thread-safety. Output your final
+++EmbeddingHolder of 1) users and 2) items using EmbeddingHolder::write_to_stdout() .
+++
+++Grading:
+++
+++You will be graded by the correctness and efficiency of your calculation.
+++
+++Task-4: Doing recommendation while updating the
+++embedding
+++
+++Except the maintenance of the recommender system, the company also needs to generate
+++recommendations for each user using the existing database. The recommendation should
+++depend on the current version of data and not disturb the maintenance of the recommender
+++system. Note that when an embedding update is going on, you can not at the same time read the
+++embedding, as the embedding update is not an atomic operation. As the embedding update can
+++take a long time, and can be quite frequent, you need to figure out a way to allow
+++recommendation to execute without getting blocked by the updates, and at the same time
+++allowing the update to happen, and being able to use some quite recent updated embedding
+++values for recommendation.
+++ToDo:
+++
+++In this task, the input Instruction set contains all three types of tasks: "init", "update", and
+++"recommend". Note that the "recommend" instruction contains an iter_idx , and you should use
+++the embeddings after the updates with index iter_idx finish. A recommend instruction with
+++iter_idx=-1 can be scheduled before any updates. You can start with your codes in Task-3. You
+++should output the recommend result as soon as you get it by calling the provided
+++Embedding::write_to_stdout() (we accept all possible order of correct outputs). The delay of
+++recommender response will impact your final score. There is no need to output the final
+++EmbeddingHolder in this tasks.
+++
+++    NOTE: You should output your recommend results in a thread-safe manner, too.
+++
+++    NOTE: In this task, update instructions still have iter_idx constraints. Recommend
+++    instructions can be executed after update instructions with larger iter_idx .
+++
+++Grading:
+++
+++You will be graded by the correctness and delay of your recommendation (from the programs'
+++start to recommend result output), as well as being able to read the updated embedding after a
+++relatively short period of time.
+++
++\ No newline at end of file
++diff --git a/Thread-1/WORKSPACE b/Thread-1/WORKSPACE
++index 6760453..6d24ab2 100644
++--- a/Thread-1/WORKSPACE
+++++ b/Thread-1/WORKSPACE
++@@ -1,15 +1,15 @@
++-load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
++-
++-## google test dependency
++-http_archive(
++-  name = "gtest",
++-  urls = ["https://github.com.cnpmjs.org/google/googletest/archive/refs/tags/release-1.11.0.zip"],
++-  strip_prefix = "googletest-release-1.11.0",
++-)
++-## google benchmark dependency
++-http_archive(
++-  name = "gbench",
++-  urls = ["https://github.com.cnpmjs.org/google/benchmark/archive/refs/tags/v1.6.0.zip"],
++-  strip_prefix = "benchmark-1.6.0",
++-  sha256 = "3da225763533aa179af8438e994842be5ca72e4a7fed4d7976dc66c8c4502f58"
++-)
+++load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
+++
+++## google test dependency
+++http_archive(
+++  name = "gtest",
+++  urls = ["https://github.com.cnpmjs.org/google/googletest/archive/refs/tags/release-1.11.0.zip"],
+++  strip_prefix = "googletest-release-1.11.0",
+++)
+++## google benchmark dependency
+++http_archive(
+++  name = "gbench",
+++  urls = ["https://github.com.cnpmjs.org/google/benchmark/archive/refs/tags/v1.6.0.zip"],
+++  strip_prefix = "benchmark-1.6.0",
+++  sha256 = "3da225763533aa179af8438e994842be5ca72e4a7fed4d7976dc66c8c4502f58"
+++)
++diff --git a/Thread-1/benchmark.cc b/Thread-1/benchmark.cc
++index 43b1f43..2c5fc84 100644
++--- a/Thread-1/benchmark.cc
+++++ b/Thread-1/benchmark.cc
++@@ -1,23 +1,23 @@
++-/*
++- * This file provides an example of how to do automatic benchmark.  Feel free
++- * to modify and use this tool.
++- */
++-
++-#include <benchmark/benchmark.h>
++-
++-static void BM_StringCreation(benchmark::State& state) {
++-  for (auto _ : state)
++-    std::string empty_string;
++-}
++-// Register the function as a benchmark
++-BENCHMARK(BM_StringCreation);
++-
++-// Define another benchmark
++-static void BM_StringCopy(benchmark::State& state) {
++-  std::string x = "hello";
++-  for (auto _ : state)
++-    std::string copy(x);
++-}
++-BENCHMARK(BM_StringCopy);
++-
+++/*
+++ * This file provides an example of how to do automatic benchmark.  Feel free
+++ * to modify and use this tool.
+++ */
+++
+++#include <benchmark/benchmark.h>
+++
+++static void BM_StringCreation(benchmark::State& state) {
+++  for (auto _ : state)
+++    std::string empty_string;
+++}
+++// Register the function as a benchmark
+++BENCHMARK(BM_StringCreation);
+++
+++// Define another benchmark
+++static void BM_StringCopy(benchmark::State& state) {
+++  std::string x = "hello";
+++  for (auto _ : state)
+++    std::string copy(x);
+++}
+++BENCHMARK(BM_StringCopy);
+++
++ BENCHMARK_MAIN();
++\ No newline at end of file
++diff --git a/Thread-1/data/q0.in b/Thread-1/data/q0.in
++index a7e4563..f9a8604 100644
++--- a/Thread-1/data/q0.in
+++++ b/Thread-1/data/q0.in
++@@ -1,20 +1,20 @@
++--0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
++-0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
++--0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
++-0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
++--0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
++-0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
++--0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
++--0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
++-0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
++-0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
++-0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
++-0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
++-0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
++-0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
++-0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
++-0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
++--0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
++-0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
++-0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
++--0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
+++-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
+++0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
+++-0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
+++0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
+++-0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
+++0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
+++-0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
+++-0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
+++0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
+++0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
+++0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
+++0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
+++0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
+++0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
+++0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
+++0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
+++-0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
+++0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
+++0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
+++-0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
++diff --git a/Thread-1/data/q0_instruction.tsv b/Thread-1/data/q0_instruction.tsv
++index 7447456..65e950a 100644
++--- a/Thread-1/data/q0_instruction.tsv
+++++ b/Thread-1/data/q0_instruction.tsv
++@@ -1,20 +1,20 @@
++-1 3 5 1
++-1 1 2 0
++-1 7 5 0
++-1 2 9 1
++-0 0 1 2 3 4 5 6 7 8
++-0 7 3 5 9
++-1 1 2 0
++-1 0 6 1
++-2 7 -1 1 5 6
++-1 4 5 0
++-1 3 8 1
++-0 5 6 2 9
++-0 1 2 3 5 7 8 9
++-1 3 7 1
++-1 8 9 0
++-2 8 -1 3 2 4 6
++-2 3 -1 1 7 8 9
++-1 1 3 1
++-1 2 4 0
+++1 3 5 1
+++1 1 2 0
+++1 7 5 0
+++1 2 9 1
+++0 0 1 2 3 4 5 6 7 8
+++0 7 3 5 9
+++1 1 2 0
+++1 0 6 1
+++2 7 -1 1 5 6
+++1 4 5 0
+++1 3 8 1
+++0 5 6 2 9
+++0 1 2 3 5 7 8 9
+++1 3 7 1
+++1 8 9 0
+++2 8 -1 3 2 4 6
+++2 3 -1 1 7 8 9
+++1 1 3 1
+++1 2 4 0
++ 2 2 -1 4 5 6 3 7 9
++\ No newline at end of file
++diff --git a/Thread-1/data/q1.in b/Thread-1/data/q1.in
++index a7e4563..f9a8604 100644
++--- a/Thread-1/data/q1.in
+++++ b/Thread-1/data/q1.in
++@@ -1,20 +1,20 @@
++--0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
++-0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
++--0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
++-0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
++--0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
++-0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
++--0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
++--0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
++-0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
++-0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
++-0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
++-0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
++-0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
++-0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
++-0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
++-0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
++--0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
++-0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
++-0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
++--0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
+++-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
+++0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
+++-0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
+++0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
+++-0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
+++0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
+++-0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
+++-0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
+++0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
+++0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
+++0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
+++0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
+++0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
+++0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
+++0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
+++0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
+++-0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
+++0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
+++0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
+++-0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
++diff --git a/Thread-1/data/q1_instruction.tsv b/Thread-1/data/q1_instruction.tsv
++index c1f5312..8caae94 100644
++--- a/Thread-1/data/q1_instruction.tsv
+++++ b/Thread-1/data/q1_instruction.tsv
++@@ -1,11 +1,11 @@
++-0 0 1 2 3 4 5 6 7 8
++-0 7 3 5 9
++-1 1 3 0
++-0 8 4 2 0
++-1 7 3 1
++-1 4 5 1
++-1 3 6 0
++-1 9 7 0
++-0 5 6 2 9
++-0 1 2 3 5 7 8 9
+++0 0 1 2 3 4 5 6 7 8
+++0 7 3 5 9
+++1 1 3 0
+++0 8 4 2 0
+++1 7 3 1
+++1 4 5 1
+++1 3 6 0
+++1 9 7 0
+++0 5 6 2 9
+++0 1 2 3 5 7 8 9
++ 1 7 8 1
++\ No newline at end of file
++diff --git a/Thread-1/data/q2.in b/Thread-1/data/q2.in
++index a7e4563..f9a8604 100644
++--- a/Thread-1/data/q2.in
+++++ b/Thread-1/data/q2.in
++@@ -1,20 +1,20 @@
++--0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
++-0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
++--0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
++-0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
++--0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
++-0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
++--0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
++--0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
++-0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
++-0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
++-0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
++-0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
++-0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
++-0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
++-0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
++-0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
++--0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
++-0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
++-0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
++--0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
+++-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
+++0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
+++-0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
+++0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
+++-0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
+++0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
+++-0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
+++-0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
+++0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
+++0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
+++0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
+++0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
+++0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
+++0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
+++0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
+++0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
+++-0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
+++0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
+++0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
+++-0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
++diff --git a/Thread-1/data/q2_instruction.tsv b/Thread-1/data/q2_instruction.tsv
++index c1f5312..8caae94 100644
++--- a/Thread-1/data/q2_instruction.tsv
+++++ b/Thread-1/data/q2_instruction.tsv
++@@ -1,11 +1,11 @@
++-0 0 1 2 3 4 5 6 7 8
++-0 7 3 5 9
++-1 1 3 0
++-0 8 4 2 0
++-1 7 3 1
++-1 4 5 1
++-1 3 6 0
++-1 9 7 0
++-0 5 6 2 9
++-0 1 2 3 5 7 8 9
+++0 0 1 2 3 4 5 6 7 8
+++0 7 3 5 9
+++1 1 3 0
+++0 8 4 2 0
+++1 7 3 1
+++1 4 5 1
+++1 3 6 0
+++1 9 7 0
+++0 5 6 2 9
+++0 1 2 3 5 7 8 9
++ 1 7 8 1
++\ No newline at end of file
++diff --git a/Thread-1/data/q3.in b/Thread-1/data/q3.in
++index a7e4563..f9a8604 100644
++--- a/Thread-1/data/q3.in
+++++ b/Thread-1/data/q3.in
++@@ -1,20 +1,20 @@
++--0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
++-0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
++--0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
++-0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
++--0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
++-0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
++--0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
++--0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
++-0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
++-0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
++-0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
++-0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
++-0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
++-0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
++-0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
++-0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
++--0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
++-0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
++-0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
++--0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
+++-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
+++0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
+++-0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
+++0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
+++-0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
+++0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
+++-0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
+++-0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
+++0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
+++0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
+++0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
+++0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
+++0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
+++0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
+++0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
+++0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
+++-0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
+++0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
+++0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
+++-0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
++diff --git a/Thread-1/data/q3_instruction.tsv b/Thread-1/data/q3_instruction.tsv
++index b2fcc3e..ba24d97 100644
++--- a/Thread-1/data/q3_instruction.tsv
+++++ b/Thread-1/data/q3_instruction.tsv
++@@ -1,16 +1,16 @@
++-1 3 5 1 0
++-1 1 2 0 0
++-1 7 5 0 0
++-0 0 1 2 3 4 5 6 7 8
++-0 7 3 5 9
++-1 2 9 1 0
++-1 1 2 0 1
++-1 0 6 1 1
++-0 5 6 2 9
++-0 1 2 3 5 7 8 9
++-1 4 5 0 1
++-1 3 8 1 1
++-1 3 7 1 2
++-1 8 9 0 2
++-1 1 3 1 2
+++1 3 5 1 0
+++1 1 2 0 0
+++1 7 5 0 0
+++0 0 1 2 3 4 5 6 7 8
+++0 7 3 5 9
+++1 2 9 1 0
+++1 1 2 0 1
+++1 0 6 1 1
+++0 5 6 2 9
+++0 1 2 3 5 7 8 9
+++1 4 5 0 1
+++1 3 8 1 1
+++1 3 7 1 2
+++1 8 9 0 2
+++1 1 3 1 2
++ 1 2 4 0 2
++\ No newline at end of file
++diff --git a/Thread-1/data/q4.in b/Thread-1/data/q4.in
++index a7e4563..f9a8604 100644
++--- a/Thread-1/data/q4.in
+++++ b/Thread-1/data/q4.in
++@@ -1,20 +1,20 @@
++--0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
++-0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
++--0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
++-0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
++--0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
++-0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
++--0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
++--0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
++-0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
++-0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
++-0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
++-0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
++-0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
++-0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
++-0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
++-0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
++--0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
++-0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
++-0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
++--0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
+++-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
+++0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
+++-0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
+++0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
+++-0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
+++0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
+++-0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
+++-0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
+++0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
+++0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
+++0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
+++0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
+++0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
+++0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
+++0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
+++0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
+++-0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
+++0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
+++0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
+++-0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
++diff --git a/Thread-1/data/q4_instruction.tsv b/Thread-1/data/q4_instruction.tsv
++index 57d9916..2dc12d6 100644
++--- a/Thread-1/data/q4_instruction.tsv
+++++ b/Thread-1/data/q4_instruction.tsv
++@@ -1,20 +1,20 @@
++-1 3 5 1 0
++-1 1 2 0 0
++-1 7 5 0 0
++-1 2 9 1 0
++-0 0 1 2 3 4 5 6 7 8
++-0 7 3 5 9
++-1 1 2 0 1
++-1 0 6 1 1
++-2 7 0 0 1 5 6
++-1 4 5 0 1
++-1 3 8 1 1
++-0 5 6 2 9
++-0 1 2 3 5 7 8 9
++-1 3 7 1 2
++-1 8 9 0 2
++-2 8 1 0 3 2 4 6
++-2 3 2 1 7 8 9
++-1 1 3 1 2
++-1 2 4 0 2
+++1 3 5 1 0
+++1 1 2 0 0
+++1 7 5 0 0
+++1 2 9 1 0
+++0 0 1 2 3 4 5 6 7 8
+++0 7 3 5 9
+++1 1 2 0 1
+++1 0 6 1 1
+++2 7 0 0 1 5 6
+++1 4 5 0 1
+++1 3 8 1 1
+++0 5 6 2 9
+++0 1 2 3 5 7 8 9
+++1 3 7 1 2
+++1 8 9 0 2
+++2 8 1 0 3 2 4 6
+++2 3 2 1 7 8 9
+++1 1 3 1 2
+++1 2 4 0 2
++ 2 2 -1 4 5 6 3 7 9
++\ No newline at end of file
++diff --git a/Thread-1/lib/BUILD b/Thread-1/lib/BUILD
++index 07eb930..c264255 100644
++--- a/Thread-1/lib/BUILD
+++++ b/Thread-1/lib/BUILD
++@@ -1,100 +1,130 @@
++-##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
++-
++-cc_library(
++-    name = "utils_lib",
++-    srcs = [
++-        "utils.cc",
++-        ],
++-    hdrs = [
++-        "utils.h",
++-        ],
++-	visibility = [
++-		"//visibility:public",
++-	],
++-)
++-
++-cc_test(
++-  name = "utils_lib_test",
++-  size = "small",
++-  srcs = ["util_test.cc"],
++-  deps = [
++-      "@gtest//:gtest_main",
++-	  ":utils_lib",
++-      ],
++-)
++-
++-cc_library(
++-    name = "embedding_lib",
++-    srcs = [
++-        "embedding.cc",
++-        ],
++-    hdrs = [
++-        "embedding.h",
++-        ],
++-	deps = [
++-        ":utils_lib"
++-    ],
++-	visibility = [
++-		"//visibility:public",
++-	],
++-)
++-
++-cc_test(
++-  name = "embedding_lib_test",
++-  size = "small",
++-  srcs = ["embedding_test.cc"],
++-  deps = [
++-      "@gtest//:gtest_main",
++-	  ":embedding_lib",
++-      ],
++-)
++-
++-cc_library(
++-    name = "instruction_lib",
++-    srcs = [
++-        "instruction.cc",
++-        ],
++-    hdrs = [
++-        "instruction.h",
++-        ],
++-	visibility = [
++-		"//visibility:public",
++-	],
++-)
++-
++-cc_test(
++-  name = "instruction_lib_test",
++-  size = "small",
++-  srcs = ["instruction_test.cc"],
++-  deps = [
++-      "@gtest//:gtest_main",
++-	  ":instruction_lib",
++-      ],
++-)
++-
++-cc_library(
++-    name = "model_lib",
++-    srcs = [
++-        "model.cc",
++-        ],
++-    hdrs = [
++-        "model.h",
++-        ],
++-	deps = [
++-        ":embedding_lib",
++-		":utils_lib",
++-    ],
++-	visibility = [
++-		"//visibility:public",
++-	],
++-)
++-
++-cc_test(
++-  name = "model_lib_test",
++-  size = "large",
++-  srcs = ["model_test.cc"],
++-  deps = [
++-      "@gtest//:gtest_main",
++-	  ":model_lib",
++-      ],
+++##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
+++
+++cc_library(
+++    name = "server_lib",
+++    srcs = [
+++        "server.cc",
+++        ],
+++    hdrs = [
+++        "server.h",
+++        ],
+++    deps = [
+++        ":embedding_lib",
+++		":instruction_lib",
+++        ":model_lib",
+++        ":utils_lib",
+++    ],
+++	visibility = [
+++		"//visibility:public",
+++	],
+++)
+++
+++cc_test(
+++  name = "server_lib_test",
+++  size = "small",
+++  srcs = ["server_test.cc"],
+++  deps = [
+++      "@gtest//:gtest_main",
+++	  ":server_lib",
+++      ":embedding_lib",
+++      ],
+++)
+++
+++cc_library(
+++    name = "utils_lib",
+++    srcs = [
+++        "utils.cc",
+++        ],
+++    hdrs = [
+++        "utils.h",
+++        ],
+++	visibility = [
+++		"//visibility:public",
+++	],
+++)
+++
+++cc_test(
+++  name = "utils_lib_test",
+++  size = "small",
+++  srcs = ["util_test.cc"],
+++  deps = [
+++      "@gtest//:gtest_main",
+++	  ":utils_lib",
+++      ],
+++)
+++
+++cc_library(
+++    name = "embedding_lib",
+++    srcs = [
+++        "embedding.cc",
+++        ],
+++    hdrs = [
+++        "embedding.h",
+++        ],
+++	deps = [
+++        ":utils_lib"
+++    ],
+++	visibility = [
+++		"//visibility:public",
+++	],
+++)
+++
+++cc_test(
+++  name = "embedding_lib_test",
+++  size = "small",
+++  srcs = ["embedding_test.cc"],
+++  deps = [
+++      "@gtest//:gtest_main",
+++	  ":embedding_lib",
+++      ],
+++)
+++
+++cc_library(
+++    name = "instruction_lib",
+++    srcs = [
+++        "instruction.cc",
+++        ],
+++    hdrs = [
+++        "instruction.h",
+++        ],
+++	visibility = [
+++		"//visibility:public",
+++	],
+++)
+++
+++cc_test(
+++  name = "instruction_lib_test",
+++  size = "small",
+++  srcs = ["instruction_test.cc"],
+++  deps = [
+++      "@gtest//:gtest_main",
+++	  ":instruction_lib",
+++      ],
+++)
+++
+++cc_library(
+++    name = "model_lib",
+++    srcs = [
+++        "model.cc",
+++        ],
+++    hdrs = [
+++        "model.h",
+++        ],
+++	deps = [
+++        ":embedding_lib",
+++		":utils_lib",
+++    ],
+++	visibility = [
+++		"//visibility:public",
+++	],
+++)
+++
+++cc_test(
+++  name = "model_lib_test",
+++  size = "large",
+++  srcs = ["model_test.cc"],
+++  deps = [
+++      "@gtest//:gtest_main",
+++	  ":model_lib",
+++      ],
++ )
++\ No newline at end of file
++diff --git a/Thread-1/lib/embedding.cc b/Thread-1/lib/embedding.cc
++index 966a76d..2e833e7 100644
++--- a/Thread-1/lib/embedding.cc
+++++ b/Thread-1/lib/embedding.cc
++@@ -1,7 +1,9 @@
+++
++ #include <fstream>
++ #include <iostream>
++ #include <sstream>
++ #include <cmath>
+++#include <mutex>
++ 
++ #include "utils.h"
++ #include "embedding.h"
++@@ -23,11 +25,23 @@ Embedding::Embedding(int length, double* data) {
++ }
++ 
++ Embedding::Embedding(Embedding* origin) {
+++    std::lock_guard<std::mutex> lock(origin->mux);
++ 	int length = origin->get_length();
++     embbedingAssert(length > 0, "Non-positive length encountered!", NON_POSITIVE_LEN);
++     double* oldData = origin->get_data();
++     double* newData = new double[length];
++-    for(int i = 0; i<length; i++)newData[i] = oldData[i];
+++    for(int i = 0; i<length; i++) newData[i] = oldData[i];
+++    this->length = length;
+++    this->data = newData;
+++}
+++
+++Embedding::Embedding(Embedding const& origin) {
+++    std::lock_guard<std::mutex> lock(origin.mux);
+++	int length = origin.length;
+++    embbedingAssert(length > 0, "Non-positive length encountered!", NON_POSITIVE_LEN);
+++    double* oldData = origin.data;
+++    double* newData = new double[length];
+++    for(int i = 0; i<length; i++) newData[i] = oldData[i];
++     this->length = length;
++     this->data = newData;
++ }
++@@ -58,6 +72,8 @@ void Embedding::update(Embedding* gradient, double stepsize) {
++ }
++ 
++ std::string Embedding::to_string() {
+++    std::lock_guard<std::mutex> lock(this->mux);
+++
++     std::string res;
++     for (int i = 0; i < this->length; ++i) {
++         if (i > 0) res += ',';
++@@ -71,7 +87,7 @@ void Embedding::write_to_stdout() {
++     std::cout << prefix << this->to_string() << '\n';
++ }
++ 
++-Embedding Embedding::operator+(const Embedding &another) {
+++Embedding Embedding::operator+(Embedding &another) {
++     double* data = new double[this->length];
++     for (int i = 0; i < this->length; ++i) {
++         data[i] = this->data[i] + another.data[i];
++@@ -87,7 +103,7 @@ Embedding Embedding::operator+(const double value) {
++     return Embedding(this->length, data);
++ }
++ 
++-Embedding Embedding::operator-(const Embedding &another) {
+++Embedding Embedding::operator-(Embedding &another) {
++     double* data = new double[this->length];
++     for (int i = 0; i < this->length; ++i) {
++         data[i] = this->data[i] - another.data[i];
++@@ -103,7 +119,7 @@ Embedding Embedding::operator-(const double value) {
++     return Embedding(this->length, data);
++ }
++ 
++-Embedding Embedding::operator*(const Embedding &another) {
+++Embedding Embedding::operator*(Embedding &another) {
++     double* data = new double[this->length];
++     for (int i = 0; i < this->length; ++i) {
++         data[i] = this->data[i] * another.data[i];
++@@ -119,7 +135,7 @@ Embedding Embedding::operator*(const double value) {
++     return Embedding(this->length, data);
++ }
++ 
++-Embedding Embedding::operator/(const Embedding &another) {
+++Embedding Embedding::operator/(Embedding &another) {
++     double* data = new double[this->length];
++     for (int i = 0; i < this->length; ++i) {
++         data[i] = this->data[i] / another.data[i];
++@@ -135,7 +151,7 @@ Embedding Embedding::operator/(const double value) {
++     return Embedding(this->length, data);
++ }
++ 
++-bool Embedding::operator==(const Embedding &another) {
+++bool Embedding::operator==(Embedding &another) {
++     for (int i = 0; i < this->length; ++i) {
++         if(fabs(this->data[i]-another.data[i])>1.0e-6)return false;
++     }
++@@ -174,20 +190,26 @@ EmbeddingMatrix EmbeddingHolder::read(std::string filename) {
++ }
++ 
++ int EmbeddingHolder::append(Embedding* data) {
+++    std::lock_guard<std::mutex> lock(this->mux);
+++
++     int indx = this->emb_matx.size();
++     embbedingAssert(
++-        data->get_length() == this->emb_matx[0]->get_length(),
+++        indx == 0 | data->get_length() == this->emb_matx[0]->get_length(),
++         "Embedding to append has a different length!", LEN_MISMATCH
++     );
++     this->emb_matx.push_back(data);
+++
+++    this->cv.notify_all();
++     return indx;
++ }
++ 
++ void EmbeddingHolder::write(std::string filename) {
+++    std::lock_guard<std::mutex> lock(this->mux);
+++
++     std::ofstream ofs(filename);
++     if (ofs.is_open()) {
++         for (Embedding* emb: this->emb_matx) {
++-            ofs << emb->to_string() << '\n';
+++            ofs << emb->to_string() + '\n';
++         }
++         ofs.close();
++     } else {
++@@ -196,9 +218,11 @@ void EmbeddingHolder::write(std::string filename) {
++ }
++ 
++ void EmbeddingHolder::write_to_stdout() {
+++    std::lock_guard<std::mutex> lock(this->mux);
+++
++     std::string prefix("[OUTPUT]");
++     for (Embedding* emb: this->emb_matx) {
++-        std::cout << prefix << emb->to_string() << '\n';
+++        std::cout << prefix + emb->to_string() + '\n';
++     }
++ }
++ 
++@@ -208,16 +232,45 @@ EmbeddingHolder::~EmbeddingHolder() {
++     }
++ }
++ 
++-void EmbeddingHolder::update_embedding(
++-        int idx, EmbeddingGradient* gradient, double stepsize) {
++-    this->emb_matx[idx]->update(gradient, stepsize);
+++void EmbeddingHolder::update_embedding(int idx, EmbeddingGradient* gradient, double stepsize) {
+++    Embedding* emb = this->get_embedding(idx);
+++    emb->lock();
+++    emb->update(gradient, stepsize);
+++    emb->unlock();
++ }
++ 
++-bool EmbeddingHolder::operator==(const EmbeddingHolder &another) {
++-    if (this->get_n_embeddings() != another.emb_matx.size())
+++Embedding* EmbeddingHolder::get_embedding(int idx) {
+++    std::unique_lock<std::mutex> lock(this->mux);
+++
+++    while (idx >= this->emb_matx.size()) {
+++        this->cv.wait(lock);
+++    }
+++    return this->emb_matx[idx];
+++}
+++
+++unsigned int EmbeddingHolder::get_n_embeddings() {
+++    std::lock_guard<std::mutex> lock(this->mux);
+++
+++    return this->emb_matx.size();
+++}
+++
+++int EmbeddingHolder::get_emb_length() {
+++    std::lock_guard<std::mutex> lock(this->mux);
+++
+++    return this->emb_matx.empty()? 0: this->emb_matx[0]->get_length();
+++}
+++
+++bool EmbeddingHolder::operator==(EmbeddingHolder &another) {
+++    std::lock_guard<std::mutex> lock(this->mux);
+++    std::lock_guard<std::mutex> lock1(another.mux);
+++
+++    if (this->emb_matx.size() != another.emb_matx.size())
++         return false;
+++
++     for (int i = 0; i < (int)this->emb_matx.size(); ++i) {
++-        if(!(*(this->emb_matx[i]) == *(another.get_embedding(i)))){
+++        std::lock_guard<std::mutex> lock2(this->emb_matx[i]->mux);
+++        std::lock_guard<std::mutex> lock3(another.emb_matx[i]->mux);
+++        if(!(*(this->emb_matx[i]) == *(another.emb_matx[i]))){
++         	return false;
++ 		}
++     }
++diff --git a/Thread-1/lib/embedding.h b/Thread-1/lib/embedding.h
++index 6e13d14..4a360c8 100644
++--- a/Thread-1/lib/embedding.h
+++++ b/Thread-1/lib/embedding.h
++@@ -1,8 +1,22 @@
++ #ifndef THREAD_LIB_EMBEDDING_H_
++ #define THREAD_LIB_EMBEDDING_H_
++ 
+++/**
+++ * Embedding:
+++ * Constructor and output method get lock automatically
+++ * get data, operaters will not get lock
+++ * 
+++ * only when do read-calc-write, should get wmux (then get mux when write),
+++ * so that thread only want to read also can read when calc,
+++ * thread also want to do read-calc-write cannot read
+++ * 
+++ * EmbeddingHolder: all methods are safe
+++*/
+++
++ #include <string>
++ #include <vector>
+++#include <mutex>
+++#include <condition_variable>
++ 
++ namespace proj1 {
++ 
++@@ -18,6 +32,7 @@ public:
++     Embedding(int, double*);
++     Embedding(int, std::string);
++     Embedding(Embedding*);
+++    Embedding(Embedding const&);
++     ~Embedding() { delete []this->data; }
++     double* get_data() { return this->data; }
++     int get_length() { return this->length; }
++@@ -25,15 +40,21 @@ public:
++     std::string to_string();
++     void write_to_stdout();
++     // Operators
++-    Embedding operator+(const Embedding&);
+++    Embedding operator+(Embedding&);
++     Embedding operator+(const double);
++-    Embedding operator-(const Embedding&);
+++    Embedding operator-(Embedding&);
++     Embedding operator-(const double);
++-    Embedding operator*(const Embedding&);
+++    Embedding operator*(Embedding&);
++     Embedding operator*(const double);
++-    Embedding operator/(const Embedding&);
+++    Embedding operator/(Embedding&);
++     Embedding operator/(const double);
++-    bool operator==(const Embedding&);
+++    bool operator==(Embedding&);
+++    //lock&unlock
+++    mutable std::mutex wmux;
+++    mutable std::mutex mux;
+++    void lock() {this->mux.lock();}
+++    void unlock() {this->mux.unlock();}
+++
++ private:
++     int length;
++     double* data;
++@@ -52,14 +73,18 @@ public:
++     void write(std::string filename);
++     int append(Embedding *data);
++     void update_embedding(int, EmbeddingGradient*, double);
++-    Embedding* get_embedding(int idx) const { return this->emb_matx[idx]; } 
++-    unsigned int get_n_embeddings() { return this->emb_matx.size(); }
++-    int get_emb_length() {
++-        return this->emb_matx.empty()? 0: this->get_embedding(0)->get_length();
++-    }
++-    bool operator==(const EmbeddingHolder&);
+++    Embedding* get_embedding(int idx);
+++    unsigned int get_n_embeddings();
+++    int get_emb_length();
+++    bool operator==(EmbeddingHolder&);
+++
++ private:
++     EmbeddingMatrix emb_matx;
+++    // lock&unlock
+++    mutable std::mutex mux;
+++    // void lock() {this->mux.lock();}
+++    // void unlock() {this->mux.unlock();}
+++    mutable std::condition_variable cv;
++ };
++ 
++ } // namespace proj1
++diff --git a/Thread-1/lib/embedding_test.cc b/Thread-1/lib/embedding_test.cc
++index 84fab0d..1f3a763 100644
++--- a/Thread-1/lib/embedding_test.cc
+++++ b/Thread-1/lib/embedding_test.cc
++@@ -1,67 +1,67 @@
++-#include <gtest/gtest.h>
++-#include <vector>
++-#include "embedding.h"
++-
++-
++-double embA[20] = {-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923};
++-double embB[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};
++-double embC[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};
++-
++-namespace proj1 {
++-namespace testing{
++-
++-class EmbeddingTest : public ::testing::Test {
++- protected:
++-  void SetUp() override {
++-    
++-	//double embC[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};	
++-	emb_testA = new Embedding(20, embA);  
++-	emb_testB = new Embedding(20, embB);   
++-	emb_testC = new Embedding(20, embC);   
++-	embhA.push_back(emb_testA);
++-	embhB.push_back(emb_testB);
++-	embhC.push_back(emb_testC);
++-	embh_testA = new EmbeddingHolder(embhA);
++-	embh_testB = new EmbeddingHolder(embhB);
++-	embh_testC = new EmbeddingHolder(embhC);
++-  }
++-  Embedding* emb_testA;
++-  Embedding* emb_testB;
++-  Embedding* emb_testC;
++-  std::vector<Embedding*>embhA;
++-  std::vector<Embedding*>embhB;
++-  std::vector<Embedding*>embhC;
++-  EmbeddingHolder* embh_testA;
++-  EmbeddingHolder* embh_testB;
++-  EmbeddingHolder* embh_testC;
++-};
++-
++-bool compare(Embedding* emb_test, double *data){
++-	double * tmp = emb_test->get_data();
++-	for(int i = 0; i<20; i++){
++-		if(tmp[i]!=data[i])return false;
++-	}
++-	return true;
++-}
++-
++-TEST_F(EmbeddingTest, test_embdedding){
++-	double emb[20] = {-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923};
++-	EXPECT_EQ(true, compare(emb_testA, emb));
++-	EXPECT_EQ((*emb_testB) == (*emb_testC), true);
++-	EXPECT_EQ((*emb_testB) == (*emb_testA), false);
++-	EXPECT_EQ((*emb_testC) == (*emb_testA), false);
++-}
++-
++-TEST_F(EmbeddingTest, test_embdeddingHolder){
++-	EXPECT_EQ((*embh_testB) == (*embh_testC), true);
++-	EXPECT_EQ((*embh_testB) == (*embh_testA), false);
++-	EXPECT_EQ((*embh_testC) == (*embh_testA), false);
++-}
++-
++-} // namespace testing
++-} // namespace proj1
++-
++-int main(int argc,char **argv){
++-  testing::InitGoogleTest(&argc,argv);
++-  return RUN_ALL_TESTS();
++-}
+++#include <gtest/gtest.h>
+++#include <vector>
+++#include "embedding.h"
+++
+++
+++double embA[20] = {-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923};
+++double embB[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};
+++double embC[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};
+++
+++namespace proj1 {
+++namespace testing{
+++
+++class EmbeddingTest : public ::testing::Test {
+++ protected:
+++  void SetUp() override {
+++    
+++	//double embC[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};	
+++	emb_testA = new Embedding(20, embA);  
+++	emb_testB = new Embedding(20, embB);   
+++	emb_testC = new Embedding(20, embC);   
+++	embhA.push_back(emb_testA);
+++	embhB.push_back(emb_testB);
+++	embhC.push_back(emb_testC);
+++	embh_testA = new EmbeddingHolder(embhA);
+++	embh_testB = new EmbeddingHolder(embhB);
+++	embh_testC = new EmbeddingHolder(embhC);
+++  }
+++  Embedding* emb_testA;
+++  Embedding* emb_testB;
+++  Embedding* emb_testC;
+++  std::vector<Embedding*>embhA;
+++  std::vector<Embedding*>embhB;
+++  std::vector<Embedding*>embhC;
+++  EmbeddingHolder* embh_testA;
+++  EmbeddingHolder* embh_testB;
+++  EmbeddingHolder* embh_testC;
+++};
+++
+++bool compare(Embedding* emb_test, double *data){
+++	double * tmp = emb_test->get_data();
+++	for(int i = 0; i<20; i++){
+++		if(tmp[i]!=data[i])return false;
+++	}
+++	return true;
+++}
+++
+++TEST_F(EmbeddingTest, test_embdedding){
+++	double emb[20] = {-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923};
+++	EXPECT_EQ(true, compare(emb_testA, emb));
+++	EXPECT_EQ((*emb_testB) == (*emb_testC), true);
+++	EXPECT_EQ((*emb_testB) == (*emb_testA), false);
+++	EXPECT_EQ((*emb_testC) == (*emb_testA), false);
+++}
+++
+++TEST_F(EmbeddingTest, test_embdeddingHolder){
+++	EXPECT_EQ((*embh_testB) == (*embh_testC), true);
+++	EXPECT_EQ((*embh_testB) == (*embh_testA), false);
+++	EXPECT_EQ((*embh_testC) == (*embh_testA), false);
+++}
+++
+++} // namespace testing
+++} // namespace proj1
+++
+++int main(int argc,char **argv){
+++  testing::InitGoogleTest(&argc,argv);
+++  return RUN_ALL_TESTS();
+++}
++diff --git a/Thread-1/lib/instruction.cc b/Thread-1/lib/instruction.cc
++index ddfc532..afddcf5 100644
++--- a/Thread-1/lib/instruction.cc
+++++ b/Thread-1/lib/instruction.cc
++@@ -1,31 +1,31 @@
++-#include <string>
++-#include <sstream>
++-#include <fstream>
++-#include "instruction.h"
++-
++-namespace proj1 {
++-
++-Instruction::Instruction(std::string line) {
++-    std::stringstream ss(line);
++-    int data;
++-    ss >> data;
++-    this->order = (InstructionOrder) data;
++-    while (ss >> data) {
++-        this->payloads.push_back(data);
++-    }
++-}
++-
++-Instructions read_instructrions(std::string filename) {
++-    std::ifstream ifs(filename);
++-    std::string line;
++-    Instructions data;
++-    if (ifs.is_open()) {
++-        while(std::getline(ifs, line)) {
++-            data.push_back(Instruction(line));
++-        }
++-        ifs.close();
++-    }
++-    return data;
++-}
++-
+++#include <string>
+++#include <sstream>
+++#include <fstream>
+++#include "instruction.h"
+++
+++namespace proj1 {
+++
+++Instruction::Instruction(std::string line) {
+++    std::stringstream ss(line);
+++    int data;
+++    ss >> data;
+++    this->order = (InstructionOrder) data;
+++    while (ss >> data) {
+++        this->payloads.push_back(data);
+++    }
+++}
+++
+++Instructions read_instructrions(std::string filename) {
+++    std::ifstream ifs(filename);
+++    std::string line;
+++    Instructions data;
+++    if (ifs.is_open()) {
+++        while(std::getline(ifs, line)) {
+++            data.push_back(Instruction(line));
+++        }
+++        ifs.close();
+++    }
+++    return data;
+++}
+++
++ } // namespace proj1
++\ No newline at end of file
++diff --git a/Thread-1/lib/instruction.h b/Thread-1/lib/instruction.h
++index 4aa34ea..f2058a8 100644
++--- a/Thread-1/lib/instruction.h
+++++ b/Thread-1/lib/instruction.h
++@@ -1,26 +1,26 @@
++-#ifndef THREAD_LIB_INSTRUCTION_H_
++-#define THREAD_LIB_INSTRUCTION_H_
++-
++-#include <string>
++-#include <vector>
++-
++-namespace proj1 {
++-
++-enum InstructionOrder {
++-    INIT_EMB = 0,
++-    UPDATE_EMB,
++-    RECOMMEND
++-};
++-
++-struct Instruction {
++-    Instruction(std::string);
++-    InstructionOrder order;
++-    std::vector<int> payloads;
++-};
++-
++-using Instructions = std::vector<Instruction>;
++-
++-Instructions read_instructrions(std::string);
++-
++-} // namespace proj1
+++#ifndef THREAD_LIB_INSTRUCTION_H_
+++#define THREAD_LIB_INSTRUCTION_H_
+++
+++#include <string>
+++#include <vector>
+++
+++namespace proj1 {
+++
+++enum InstructionOrder {
+++    INIT_EMB = 0,
+++    UPDATE_EMB,
+++    RECOMMEND
+++};
+++
+++struct Instruction {
+++    Instruction(std::string);
+++    InstructionOrder order;
+++    std::vector<int> payloads;
+++};
+++
+++using Instructions = std::vector<Instruction>;
+++
+++Instructions read_instructrions(std::string);
+++
+++} // namespace proj1
++ #endif  // THREAD_LIB_INSTRUCTION_H_
++\ No newline at end of file
++diff --git a/Thread-1/lib/model.cc b/Thread-1/lib/model.cc
++index 77d19ae..e857e98 100644
++--- a/Thread-1/lib/model.cc
+++++ b/Thread-1/lib/model.cc
++@@ -16,7 +16,6 @@ double similarity(Embedding* embA, Embedding* embB) {
++     return similarity;
++ }
++ 
++-// NOTE: do not rely on this exact implementation -- it may get modified.
++ EmbeddingGradient* calc_gradient(Embedding* embA, Embedding* embB, int label) {
++     /* For simplicity, here we just simulate the gradient backprop for:
++         1. a dot product between embeddings
++diff --git a/Thread-1/lib/model.h b/Thread-1/lib/model.h
++index d3be366..a86919b 100644
++--- a/Thread-1/lib/model.h
+++++ b/Thread-1/lib/model.h
++@@ -6,9 +6,6 @@
++ 
++ namespace proj1 {
++ 
++-/* NOTE: DO NOT rely on the implementation here. We may
++-         change the implemenation details.
++-*/
++ double similarity(Embedding* entityA, Embedding* entityB);
++ 
++ EmbeddingGradient* calc_gradient(Embedding* entityA, Embedding* entityB, int label);
++diff --git a/Thread-1/lib/model_test.cc b/Thread-1/lib/model_test.cc
++index e1f9c8b..20f0e73 100644
++--- a/Thread-1/lib/model_test.cc
+++++ b/Thread-1/lib/model_test.cc
++@@ -1,42 +1,42 @@
++-#include <gtest/gtest.h>
++-#include <chrono>
++-#include "model.h"
++-
++-namespace proj1 {
++-namespace testing{
++-
++-class ModelTest : public ::testing::Test {
++- protected:
++-  void SetUp() override {
++-    double embA[20] = {-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923};
++-    double embB[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};
++-	emb_testA = new Embedding(20, embA);  
++-	emb_testB = new Embedding(20, embB);   
++-  }
++-  Embedding* emb_testA;
++-  Embedding* emb_testB;
++-};
++-
++-TEST_F(ModelTest, test_calc_gradient){
++-	auto start = std::chrono::high_resolution_clock::now();
++-	calc_gradient(emb_testA, emb_testB, 1);
++-    auto end = std::chrono::high_resolution_clock::now();
++-    auto time_ellapsed = end - start;
++-	EXPECT_LT(10*1000, time_ellapsed.count());
++-}
++-
++-TEST_F(ModelTest, test_cold_start){
++-	auto start = std::chrono::high_resolution_clock::now();
++-	cold_start(emb_testA, emb_testB);
++-    auto end = std::chrono::high_resolution_clock::now();
++-    auto time_ellapsed = end - start;
++-	EXPECT_LT(20*1000, time_ellapsed.count());
++-}
++-
++-} // namespace testing
++-} // namespace proj1
++-
++-int main(int argc,char **argv){
++-  testing::InitGoogleTest(&argc,argv);
++-  return RUN_ALL_TESTS();
++-}
+++#include <gtest/gtest.h>
+++#include <chrono>
+++#include "model.h"
+++
+++namespace proj1 {
+++namespace testing{
+++
+++class ModelTest : public ::testing::Test {
+++ protected:
+++  void SetUp() override {
+++    double embA[20] = {-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923};
+++    double embB[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};
+++	emb_testA = new Embedding(20, embA);  
+++	emb_testB = new Embedding(20, embB);   
+++  }
+++  Embedding* emb_testA;
+++  Embedding* emb_testB;
+++};
+++
+++TEST_F(ModelTest, test_calc_gradient){
+++	auto start = std::chrono::high_resolution_clock::now();
+++	calc_gradient(emb_testA, emb_testB, 1);
+++    auto end = std::chrono::high_resolution_clock::now();
+++    auto time_ellapsed = end - start;
+++	EXPECT_LT(10*1000, time_ellapsed.count());
+++}
+++
+++TEST_F(ModelTest, test_cold_start){
+++	auto start = std::chrono::high_resolution_clock::now();
+++	cold_start(emb_testA, emb_testB);
+++    auto end = std::chrono::high_resolution_clock::now();
+++    auto time_ellapsed = end - start;
+++	EXPECT_LT(20*1000, time_ellapsed.count());
+++}
+++
+++} // namespace testing
+++} // namespace proj1
+++
+++int main(int argc,char **argv){
+++  testing::InitGoogleTest(&argc,argv);
+++  return RUN_ALL_TESTS();
+++}
++diff --git a/Thread-1/lib/server.cc b/Thread-1/lib/server.cc
++new file mode 100644
++index 0000000..cdc3234
++--- /dev/null
+++++ b/Thread-1/lib/server.cc
++@@ -0,0 +1,364 @@
+++
+++#include <vector>
+++#include <thread>
+++#include <iostream>
+++#include <mutex>
+++
+++#include "server.h"
+++#include "model.h"
+++#include "utils.h"
+++
+++#define TIMER(s) // proj1::AutoTimer timer(s)
+++
+++namespace proj1 {
+++
+++void Server::write_to_stdout() {
+++    users.write_to_stdout();
+++    items.write_to_stdout();
+++}
+++
+++void Server::do_instruction(Instruction inst) {
+++    switch(inst.order) {
+++        case INIT_EMB: {
+++            if (!useLock) {
+++                do_init(inst);
+++            } else if (!initParall) {
+++                do_init_safe(inst);
+++            } else {
+++                do_init_parall(inst);
+++            }
+++            break;
+++        }
+++        case UPDATE_EMB: {
+++            if (!useLock) {
+++                do_update(inst);
+++            } else if (!useEpoch) {
+++                do_update_safe(inst);
+++            } else {
+++                if (!changeInplace) {
+++                    do_update_epoch(inst);
+++                } else {
+++                    do_update_inplace(inst);
+++                }
+++            }
+++            break;
+++        }
+++        case RECOMMEND: {
+++            if (!useLock) {
+++                Embedding* emb = do_recommend(inst);
+++                emb->write_to_stdout();
+++            } else if (!useEpoch) {
+++                Embedding* emb = do_recommend_safe(inst);
+++                emb->write_to_stdout();
+++            } else {
+++                if (!changeInplace) {
+++                    Embedding* emb = do_recommend_epoch(inst);
+++                    emb->write_to_stdout();
+++                } else {
+++                    Embedding* emb = do_recommend_non_inplace(inst);
+++                    emb->write_to_stdout();
+++                }
+++            }
+++        }
+++    }
+++}
+++
+++void Server::do_init(Instruction inst) {
+++    TIMER("do_init");
+++
+++    int length = users.get_emb_length();
+++    Embedding* new_user = new Embedding(length);
+++    int user_idx = users.append(new_user);
+++
+++    for (int item_index: inst.payloads) {
+++        Embedding* item_emb = items.get_embedding(item_index);
+++
+++        EmbeddingGradient* gradient = cold_start(new_user, item_emb);
+++        users.update_embedding(user_idx, gradient, 0.01);
+++        delete gradient;
+++    }
+++}
+++
+++void Server::do_init_safe(Instruction inst) {
+++    TIMER("do_init_safe");
+++
+++    int length = users.get_emb_length();
+++    Embedding* new_user = new Embedding(length);
+++    int user_idx = users.append(new_user);
+++
+++    for (int item_index: inst.payloads) {
+++        Embedding* item_emb = items.get_embedding(item_index);
+++
+++        Embedding* user = new Embedding(new_user);
+++        Embedding* item = new Embedding(item_emb);
+++        EmbeddingGradient* gradient = cold_start(user, item);
+++        delete user, item;
+++
+++        users.update_embedding(user_idx, gradient, 0.01);
+++        delete gradient;
+++    }
+++}
+++
+++void Server::do_init_parall(Instruction inst) {
+++    TIMER("do_init_parall");
+++
+++    int length = users.get_emb_length();
+++    Embedding* new_user = new Embedding(length);
+++    int user_idx = users.append(new_user);
+++
+++    std::vector<std::thread*> threads;
+++    for (int item_index: inst.payloads) {
+++        std::thread* t = new std::thread(
+++            [&, item_index]() {
+++                Embedding* item_emb = items.get_embedding(item_index);
+++
+++                Embedding* user = new Embedding(new_user);
+++                Embedding* item = new Embedding(item_emb);
+++                EmbeddingGradient* gradient = cold_start(user, item);
+++                delete user, item;
+++
+++                users.update_embedding(user_idx, gradient, 0.01);
+++                delete gradient;
+++            }
+++        );
+++        threads.push_back(t);
+++    }
+++    for (std::thread* t: threads) {
+++        t->join();
+++        delete t;
+++    }
+++}
+++
+++void Server::do_update(Instruction inst) {
+++    TIMER("do_update");
+++
+++    std::cout << "do_update" << std::endl;
+++    int user_idx = inst.payloads[0];
+++    int item_idx = inst.payloads[1];
+++    int label = inst.payloads[2];
+++
+++    Embedding* user_emb = users.get_embedding(user_idx);
+++    Embedding* item_emb = items.get_embedding(item_idx);
+++
+++    EmbeddingGradient* gradient = calc_gradient(user_emb, item_emb, label);
+++    users.update_embedding(user_idx, gradient, 0.01);
+++    delete gradient;
+++
+++    gradient = calc_gradient(item_emb, user_emb, label);
+++    items.update_embedding(item_idx, gradient, 0.001);
+++    delete gradient;
+++}
+++
+++void Server::do_update_safe(Instruction inst) {
+++    TIMER("do_update_safe");
+++
+++    int user_idx = inst.payloads[0];
+++    int item_idx = inst.payloads[1];
+++    int label = inst.payloads[2];
+++
+++    Embedding* user_emb = users.get_embedding(user_idx);
+++    Embedding* item_emb = items.get_embedding(item_idx);
+++
+++    auto user = new Embedding(user_emb);
+++    auto item = new Embedding(item_emb);
+++    EmbeddingGradient* gradient = calc_gradient(user, item, label);
+++    delete user, item;
+++
+++    users.update_embedding(user_idx, gradient, 0.01);
+++    delete gradient;
+++
+++    user = new Embedding(user_emb);
+++    item = new Embedding(item_emb);
+++    gradient = calc_gradient(item, user, label);
+++    delete user, item;
+++
+++    items.update_embedding(item_idx, gradient, 0.001);
+++    delete gradient;
+++}
+++
+++void Server::do_update_epoch(Instruction inst) {
+++    int iter_idx = inst.payloads[3];
+++{
+++    std::unique_lock<std::mutex> lock(this->mux);
+++    while (!(this->epoch >= iter_idx || (this->epoch == iter_idx - 1 && this->num_threads == 0))) {
+++        this->cv.wait(lock);
+++    }
+++    if (this->epoch == iter_idx - 1 && this->num_threads == 0) {
+++        this->epoch = iter_idx;
+++    }
+++    this->num_threads++;
+++}
+++
+++    TIMER("do_update_epoch");
+++
+++    int user_idx = inst.payloads[0];
+++    int item_idx = inst.payloads[1];
+++    int label = inst.payloads[2];
+++
+++    Embedding* user_emb = users.get_embedding(user_idx);
+++    Embedding* item_emb = items.get_embedding(item_idx);
+++
+++    auto user = new Embedding(user_emb);
+++    auto item = new Embedding(item_emb);
+++    EmbeddingGradient* gradient = calc_gradient(user, item, label);
+++    delete user, item;
+++
+++    users.update_embedding(user_idx, gradient, 0.01);
+++    delete gradient;
+++
+++    user = new Embedding(user_emb);
+++    item = new Embedding(item_emb);
+++    gradient = calc_gradient(item, user, label);
+++    delete user, item;
+++
+++    items.update_embedding(item_idx, gradient, 0.001);
+++    delete gradient;
+++
+++{
+++    std::unique_lock<std::mutex> lock(this->mux);
+++    this->num_threads--;
+++    this->cv.notify_all();
+++}
+++}
+++
+++void Server::do_update_inplace(Instruction inst) {
+++    int iter_idx = inst.payloads[3];
+++{
+++    std::unique_lock<std::mutex> lock(this->mux);
+++    while (!(this->epoch >= iter_idx || (this->epoch == iter_idx - 1 && this->num_threads == 0))) {
+++        this->cv.wait(lock);
+++    }
+++    if (this->epoch == iter_idx - 1 && this->num_threads == 0) {
+++        this->epoch = iter_idx;
+++    }
+++    this->num_threads++;
+++}
+++
+++    TIMER("do_update_inplace");
+++
+++    int user_idx = inst.payloads[0];
+++    int item_idx = inst.payloads[1];
+++    int label = inst.payloads[2];
+++
+++    Embedding* user_emb = users.get_embedding(user_idx);
+++    Embedding* item_emb = items.get_embedding(item_idx);
+++
+++{
+++    std::lock_guard<std::mutex> userlock(user_emb->wmux);
+++    std::lock_guard<std::mutex> itemlock(item_emb->wmux);
+++    EmbeddingGradient* gradient = calc_gradient(user_emb, item_emb, label);
+++    users.update_embedding(user_idx, gradient, 0.01);
+++    delete gradient;
+++
+++    gradient = calc_gradient(item_emb, user_emb, label);
+++    items.update_embedding(item_idx, gradient, 0.001);
+++    delete gradient;
+++}
+++
+++{
+++    std::unique_lock<std::mutex> lock(this->mux);
+++    this->num_threads--;
+++    this->cv.notify_all();
+++}
+++}
+++
+++Embedding* Server::do_recommend(Instruction inst) {
+++    TIMER("do_recommend");
+++
+++    int user_idx = inst.payloads[0];
+++    Embedding* user = users.get_embedding(user_idx);
+++
+++    std::vector<Embedding*> item_pool;
+++    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
+++        int item_idx = inst.payloads[i];
+++        item_pool.push_back(items.get_embedding(item_idx));
+++    }
+++
+++    Embedding* recommendation = recommend(user, item_pool);
+++    return recommendation;
+++}
+++
+++Embedding* Server::do_recommend_safe(Instruction inst) {
+++    TIMER("do_recommend_safe");
+++
+++    int user_idx = inst.payloads[0];
+++    Embedding* user = users.get_embedding(user_idx);
+++    std::lock_guard<std::mutex> lock(user->mux);
+++
+++    std::vector<Embedding*> item_pool;
+++    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
+++        int item_idx = inst.payloads[i];
+++        Embedding* item = items.get_embedding(item_idx);
+++        std::lock_guard<std::mutex> lock(item->mux);
+++        item_pool.push_back(item);
+++    }
+++
+++    Embedding* recommendation = recommend(user, item_pool);
+++    return recommendation;
+++}
+++
+++Embedding* Server::do_recommend_epoch(Instruction inst) {
+++    int iter_idx = inst.payloads[1];
+++{
+++    std::unique_lock<std::mutex> lock(this->mux);
+++    while (!(this->epoch > iter_idx | (this->epoch == iter_idx && this->num_threads == 0))) {
+++        this->cv.wait(lock);
+++    }
+++}
+++
+++    TIMER("do_recommend_epoch");
+++
+++    int user_idx = inst.payloads[0];
+++    Embedding* user = users.get_embedding(user_idx);
+++    std::lock_guard<std::mutex> lock(user->mux);
+++
+++    std::vector<Embedding*> item_pool;
+++    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
+++        int item_idx = inst.payloads[i];
+++        Embedding* item = items.get_embedding(item_idx);
+++        std::lock_guard<std::mutex> lock(item->mux);
+++        item_pool.push_back(item);
+++    }
+++
+++    Embedding* recommendation = recommend(user, item_pool);
+++    return recommendation;
+++}
+++
+++Embedding* Server::do_recommend_non_inplace(Instruction inst) {
+++    int iter_idx = inst.payloads[1];
+++{
+++    std::unique_lock<std::mutex> lock(this->mux);
+++    while (!(this->epoch > iter_idx | (this->epoch == iter_idx && this->num_threads == 0))) {
+++        this->cv.wait(lock);
+++    }
+++}
+++
+++    TIMER("do_recommend_non_inplace");
+++
+++    int user_idx = inst.payloads[0];
+++    Embedding* user_emb = users.get_embedding(user_idx);
+++    Embedding* user = new Embedding(user_emb);
+++
+++    std::vector<Embedding*> item_pool;
+++    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
+++        int item_idx = inst.payloads[i];
+++        Embedding* item_emb = items.get_embedding(item_idx);
+++        Embedding* item = new Embedding(item_emb);
+++        item_pool.push_back(item);
+++    }
+++
+++    Embedding* recommendation = recommend(user, item_pool);
+++
+++    delete user;
+++    for(auto item : item_pool) {
+++        delete item;
+++    }
+++
+++    return recommendation;
+++}
+++
+++bool Server::operator==(Server& svr) {
+++    return this->users == svr.users && this->items == svr.items;
+++}
+++
+++} // namespace proj1
++diff --git a/Thread-1/lib/server.h b/Thread-1/lib/server.h
++new file mode 100644
++index 0000000..3c7f309
++--- /dev/null
+++++ b/Thread-1/lib/server.h
++@@ -0,0 +1,51 @@
+++#ifndef THREAD_LIB_SERVER_H_
+++#define THREAD_LIB_SERVER_H_
+++
+++#include <mutex>
+++#include <condition_variable>
+++#include "instruction.h"
+++#include "embedding.h"
+++
+++namespace proj1 {
+++
+++class Server {
+++public:
+++    Server(std::string user_filename, std::string item_filename) : users(user_filename), items(item_filename) {}
+++    Server(std::string user_filename, std::string item_filename, bool initParall, bool useLock, bool useEpoch, bool changeInplace)
+++        : users(user_filename), items(item_filename), initParall(initParall), useLock(useLock), useEpoch(useEpoch), changeInplace(changeInplace) {}
+++    void do_instruction(Instruction);
+++    void write_to_stdout();
+++
+++    void do_init(Instruction);
+++    void do_init_safe(Instruction);
+++    void do_init_parall(Instruction);
+++
+++    void do_update(Instruction);
+++    void do_update_safe(Instruction);
+++    void do_update_epoch(Instruction);
+++    void do_update_inplace(Instruction);
+++
+++    Embedding* do_recommend(Instruction);
+++    Embedding* do_recommend_safe(Instruction);
+++    Embedding* do_recommend_epoch(Instruction);
+++    Embedding* do_recommend_non_inplace(Instruction);
+++
+++    bool operator==(Server&);
+++
+++private:
+++    bool initParall = false;
+++    bool useLock = false;
+++    bool useEpoch = false;
+++    bool changeInplace = false;
+++
+++    int epoch = -1;
+++    int num_threads = 0; // number of update threads running in this epoch
+++    std::mutex mux;
+++    std::condition_variable cv;
+++
+++    EmbeddingHolder users;
+++    EmbeddingHolder items;
+++};
+++
+++} // namespace proj1
+++#endif // THREAD_LIB_SERVER_H_
++diff --git a/Thread-1/lib/server_test.cc b/Thread-1/lib/server_test.cc
++new file mode 100644
++index 0000000..036212b
++--- /dev/null
+++++ b/Thread-1/lib/server_test.cc
++@@ -0,0 +1,53 @@
+++#include <gtest/gtest.h>
+++#include <vector>
+++
+++#include "server.h"
+++#include "embedding.h"
+++
+++namespace proj1 {
+++namespace testing {
+++
+++class ServerTest : public ::testing::Test {
+++protected:
+++    void SetUp() {
+++        server1 = new Server("data/q4.in", "data/q4.in");
+++        server2 = new Server("data/q4.in", "data/q4.in");
+++        server3 = new Server("data/q4.in", "data/q4.in");
+++
+++        inst_init = new Instruction("0 0 1 2 3 4 5 6 7 8");
+++        inst_update = new Instruction("1 7 5 0 0");
+++        inst_recommend = new Instruction("2 2 -1 4 5 6 3 7 9");
+++    }
+++    Server *server1, *server2, *server3;
+++    Instruction *inst_init, *inst_update, *inst_recommend;
+++};
+++
+++TEST_F(ServerTest, test_init) {
+++    server1->do_init(*inst_init);
+++    server2->do_init_safe(*inst_init);
+++    EXPECT_EQ((*server1) == (*server2), true);
+++}
+++
+++TEST_F(ServerTest, test_update) {
+++    server1->do_update(*inst_update);
+++    server2->do_update_safe(*inst_update);
+++    server3->do_update_epoch(*inst_update);
+++    EXPECT_EQ((*server1) == (*server2), true);
+++    EXPECT_EQ((*server2) == (*server3), true);
+++}
+++
+++TEST_F(ServerTest, test_recommend) {
+++    Embedding* emb1 = server1->do_recommend(*inst_recommend);
+++    Embedding* emb2 = server2->do_recommend_safe(*inst_recommend);
+++    Embedding* emb3 = server3->do_recommend_epoch(*inst_recommend);
+++    EXPECT_EQ((*emb1) == (*emb2), true);
+++    EXPECT_EQ((*emb2) == (*emb3), true);
+++}
+++    
+++} // namespace testing
+++} // namespace proj1
+++
+++int main(int argc, char** argv) {
+++    testing::InitGoogleTest(&argc, argv);
+++    return RUN_ALL_TESTS();
+++}
++diff --git a/Thread-1/lib/util_test.cc b/Thread-1/lib/util_test.cc
++index 77e08a7..f23579b 100644
++--- a/Thread-1/lib/util_test.cc
+++++ b/Thread-1/lib/util_test.cc
++@@ -1,22 +1,22 @@
++-#include <gtest/gtest.h>
++-#include "utils.h"
++-
++-namespace proj1 {
++-namespace testing{
++-
++-
++-TEST(UtilTest, test_sigmoid) {
++-    EXPECT_NEAR(0.731059, sigmoid(1.0), 0.0001);   
++-}
++-
++-TEST(UtilTest, test_sigmoid_backward) {
++-    EXPECT_NEAR(0.196612, sigmoid_backward(1.0), 0.0001);   
++-}
++-
++-} // namespace testing
++-} // namespace proj1
++-
++-int main(int argc,char **argv){
++-  testing::InitGoogleTest(&argc,argv);
++-  return RUN_ALL_TESTS();
++-}
+++#include <gtest/gtest.h>
+++#include "utils.h"
+++
+++namespace proj1 {
+++namespace testing{
+++
+++
+++TEST(UtilTest, test_sigmoid) {
+++    EXPECT_NEAR(0.731059, sigmoid(1.0), 0.0001);   
+++}
+++
+++TEST(UtilTest, test_sigmoid_backward) {
+++    EXPECT_NEAR(0.196612, sigmoid_backward(1.0), 0.0001);   
+++}
+++
+++} // namespace testing
+++} // namespace proj1
+++
+++int main(int argc,char **argv){
+++  testing::InitGoogleTest(&argc,argv);
+++  return RUN_ALL_TESTS();
+++}
++diff --git a/Thread-1/lib/utils.cc b/Thread-1/lib/utils.cc
++index 3427314..465e117 100644
++--- a/Thread-1/lib/utils.cc
+++++ b/Thread-1/lib/utils.cc
++@@ -1,45 +1,47 @@
++-#include <cmath>
++-#include <string>
++-#include <iostream>
++-#include <chrono>
++-#include <thread>
++-#include "utils.h"
++-
++-namespace proj1 {
++-
++-void a_slow_function(int seconds) {
++-    //std::this_thread::sleep_for(std::chrono::seconds(seconds));
++-}
++-
++-double sigmoid(double x) {
++-    return 1.0 / (1.0 + exp(-x));
++-}
++-
++-double sigmoid_backward(double x) {
++-    double y = sigmoid(x);
++-    return y * (1.0 - y);
++-}
++-
++-double binary_cross_entropy(double y_true, double y_pred) {
++-    double eps = 1e-8;
++-    return y_true * log(eps + y_pred) \
++-        + (1.0 - y_true) * log(1.0 - y_pred + eps);
++-}
++-
++-double binary_cross_entropy_backward(double y_true, double y_pred) {
++-    double eps = 1e-8;
++-    return (y_true - y_pred) / (eps + (1.0 - y_pred) * y_pred);
++-}
++-
++-AutoTimer::AutoTimer(std::string name) : 
++-        m_name(std::move(name)),
++-        m_beg(std::chrono::high_resolution_clock::now()) { 
++-    }
++-
++-AutoTimer::~AutoTimer() {
++-    auto end = std::chrono::high_resolution_clock::now();
++-    auto dur = std::chrono::duration_cast<std::chrono::microseconds>(end - m_beg);
++-    std::cout << m_name << " : " << dur.count() << " usec\n";
++-}
++-
++-} // namespace proj1
+++#include <cmath>
+++#include <string>
+++#include <iostream>
+++#include <chrono>
+++#include <thread>
+++#include "utils.h"
+++
+++namespace proj1 {
+++
+++void a_slow_function(int seconds) {
+++    if (slow_function) {
+++        std::this_thread::sleep_for(std::chrono::timescale(seconds));
+++    }
+++}
+++
+++double sigmoid(double x) {
+++    return 1.0 / (1.0 + exp(-x));
+++}
+++
+++double sigmoid_backward(double x) {
+++    double y = sigmoid(x);
+++    return y * (1.0 - y);
+++}
+++
+++double binary_cross_entropy(double y_true, double y_pred) {
+++    double eps = 1e-8;
+++    return y_true * log(eps + y_pred) \
+++        + (1.0 - y_true) * log(1.0 - y_pred + eps);
+++}
+++
+++double binary_cross_entropy_backward(double y_true, double y_pred) {
+++    double eps = 1e-8;
+++    return (y_true - y_pred) / (eps + (1.0 - y_pred) * y_pred);
+++}
+++
+++AutoTimer::AutoTimer(std::string name) : 
+++        m_name(std::move(name)),
+++        m_beg(std::chrono::high_resolution_clock::now()) { 
+++    }
+++
+++AutoTimer::~AutoTimer() {
+++    auto end = std::chrono::high_resolution_clock::now();
+++    auto dur = std::chrono::duration_cast<std::chrono::microseconds>(end - m_beg);
+++    std::cout << m_name + " : " + std::to_string(dur.count()) + " usec\n";
+++}
+++
+++} // namespace proj1
++diff --git a/Thread-1/lib/utils.h b/Thread-1/lib/utils.h
++index 9f85001..55486c9 100644
++--- a/Thread-1/lib/utils.h
+++++ b/Thread-1/lib/utils.h
++@@ -1,64 +1,68 @@
++-#ifndef THREAD_LIB_UTILS_H_
++-#define THREAD_LIB_UTILS_H_
++-
++-#include <string>
++-#include <vector>
++-#include <iostream>
++-#include <chrono>  // for AutoTimer function
++-
++-// For colored outputs in terminal
++-#define RST  "\x1B[0m"
++-#define KRED  "\x1B[31m"
++-#define KGRN  "\x1B[32m"
++-#define KYEL  "\x1B[33m"
++-#define KBLU  "\x1B[34m"
++-#define KMAG  "\x1B[35m"
++-#define KCYN  "\x1B[36m"
++-#define KWHT  "\x1B[37m"
++-
++-#define FRED(x) KRED x RST
++-#define FGRN(x) KGRN x RST
++-#define FYEL(x) KYEL x RST
++-#define FBLU(x) KBLU x RST
++-#define FMAG(x) KMAG x RST
++-#define FCYN(x) KCYN x RST
++-#define FWHT(x) KWHT x RST
++-
++-#define BOLD(x) "\x1B[1m" x RST
++-#define UNDL(x) "\x1B[4m" x RST
++-
++-namespace proj1 {
++-
++-// TODO(xuw): better to define this as a enum type
++-static const int kOrderInit = 0;
++-static const int kOrderUpdate = 1;
++-
++-template <class T>
++-inline void embbedingAssert(bool condition, char const *msg, T error) {
++-    if (!condition) {
++-        std::cerr << msg << std::endl;
++-        throw error;
++-    }
++-}
++-
++-void a_slow_function(int seconds);
++-
++-double sigmoid(double x);
++-
++-double sigmoid_backward(double x);
++-
++-double binary_cross_entropy(double y_true, double y_pred);
++-
++-double binary_cross_entropy_backward(double y_true, double y_pred);
++-
++-class AutoTimer {
++- public:
++-  AutoTimer(std::string name);
++-  ~AutoTimer(); 
++- private:
++-  std::string m_name;
++-  std::chrono::time_point<std::chrono::high_resolution_clock> m_beg;
++-};
++-
++-} // namespace proj1
++-#endif // THREAD_LIB_UTILS_H_
+++#ifndef THREAD_LIB_UTILS_H_
+++#define THREAD_LIB_UTILS_H_
+++
+++#include <string>
+++#include <vector>
+++#include <iostream>
+++#include <chrono>  // for AutoTimer function
+++
+++// slow_function
+++#define slow_function true
+++#define timescale seconds
+++
+++// For colored outputs in terminal
+++#define RST  "\x1B[0m"
+++#define KRED  "\x1B[31m"
+++#define KGRN  "\x1B[32m"
+++#define KYEL  "\x1B[33m"
+++#define KBLU  "\x1B[34m"
+++#define KMAG  "\x1B[35m"
+++#define KCYN  "\x1B[36m"
+++#define KWHT  "\x1B[37m"
+++
+++#define FRED(x) KRED x RST
+++#define FGRN(x) KGRN x RST
+++#define FYEL(x) KYEL x RST
+++#define FBLU(x) KBLU x RST
+++#define FMAG(x) KMAG x RST
+++#define FCYN(x) KCYN x RST
+++#define FWHT(x) KWHT x RST
+++
+++#define BOLD(x) "\x1B[1m" x RST
+++#define UNDL(x) "\x1B[4m" x RST
+++
+++namespace proj1 {
+++
+++// TODO(xuw): better to define this as a enum type
+++static const int kOrderInit = 0;
+++static const int kOrderUpdate = 1;
+++
+++template <class T>
+++inline void embbedingAssert(bool condition, char const *msg, T error) {
+++    if (!condition) {
+++        std::cerr << msg << std::endl;
+++        throw error;
+++    }
+++}
+++
+++void a_slow_function(int seconds);
+++
+++double sigmoid(double x);
+++
+++double sigmoid_backward(double x);
+++
+++double binary_cross_entropy(double y_true, double y_pred);
+++
+++double binary_cross_entropy_backward(double y_true, double y_pred);
+++
+++class AutoTimer {
+++ public:
+++  AutoTimer(std::string name);
+++  ~AutoTimer(); 
+++ private:
+++  std::string m_name;
+++  std::chrono::time_point<std::chrono::high_resolution_clock> m_beg;
+++};
+++
+++} // namespace proj1
+++#endif // THREAD_LIB_UTILS_H_
++diff --git a/Thread-1/q0.cc b/Thread-1/q0.cc
++index 7e51849..77525f5 100644
++--- a/Thread-1/q0.cc
+++++ b/Thread-1/q0.cc
++@@ -1,92 +1,92 @@
++-#include <vector>
++-#include <tuple>
++-
++-#include <string>   // string
++-#include <chrono>   // timer
++-#include <iostream> // cout, endl
++-
++-#include "lib/utils.h"
++-#include "lib/model.h" 
++-#include "lib/embedding.h" 
++-#include "lib/instruction.h"
++-
++-namespace proj1 {
++-
++-void run_one_instruction(Instruction inst, EmbeddingHolder* users, EmbeddingHolder* items) {
++-    switch(inst.order) {
++-        case INIT_EMB: {
++-            // We need to init the embedding
++-            int length = users->get_emb_length();
++-            Embedding* new_user = new Embedding(length);
++-            int user_idx = users->append(new_user);
++-            for (int item_index: inst.payloads) {
++-                Embedding* item_emb = items->get_embedding(item_index);
++-                // Call cold start for downstream applications, slow
++-                EmbeddingGradient* gradient = cold_start(new_user, item_emb);
++-                users->update_embedding(user_idx, gradient, 0.01);
++-                delete gradient;
++-            }
++-            break;
++-        }
++-        case UPDATE_EMB: {
++-            int user_idx = inst.payloads[0];
++-            int item_idx = inst.payloads[1];
++-            int label = inst.payloads[2];
++-            // You might need to add this state in other questions.
++-            // Here we just show you this as an example
++-            // int epoch = -1;
++-            //if (inst.payloads.size() > 3) {
++-            //    epoch = inst.payloads[3];
++-            //}
++-            Embedding* user = users->get_embedding(user_idx);
++-            Embedding* item = items->get_embedding(item_idx);
++-            EmbeddingGradient* gradient = calc_gradient(user, item, label);
++-            users->update_embedding(user_idx, gradient, 0.01);
++-            delete gradient;
++-            gradient = calc_gradient(item, user, label);
++-            items->update_embedding(item_idx, gradient, 0.001);
++-            delete gradient;
++-            break;
++-        }
++-        case RECOMMEND: {
++-            int user_idx = inst.payloads[0];
++-            Embedding* user = users->get_embedding(user_idx);
++-            std::vector<Embedding*> item_pool;
++-            int iter_idx = inst.payloads[1];
++-            for (unsigned int i = 2; i < inst.payloads.size(); ++i) {
++-                int item_idx = inst.payloads[i];
++-                item_pool.push_back(items->get_embedding(item_idx));
++-            }
++-            Embedding* recommendation = recommend(user, item_pool);
++-            recommendation->write_to_stdout();
++-            break;
++-        }
++-    }
++-
++-}
++-} // namespace proj1
++-
++-int main(int argc, char *argv[]) {
++-
++-    proj1::EmbeddingHolder* users = new proj1::EmbeddingHolder("data/q0.in");
++-    proj1::EmbeddingHolder* items = new proj1::EmbeddingHolder("data/q0.in");
++-    proj1::Instructions instructions = proj1::read_instructrions("data/q0_instruction.tsv");
++-    {
++-    proj1::AutoTimer timer("q0");  // using this to print out timing of the block
++-    // Run all the instructions
++-    for (proj1::Instruction inst: instructions) {
++-        proj1::run_one_instruction(inst, users, items);
++-    }
++-    }
++-
++-    // Write the result
++-    users->write_to_stdout();
++-    items->write_to_stdout();
++-
++-    // We only need to delete the embedding holders, as the pointers are all
++-    // pointing at the emb_matx of the holders.
++-    delete users;
++-    delete items;
++-
++-    return 0;
++-}
+++#include <vector>
+++#include <tuple>
+++
+++#include <string>   // string
+++#include <chrono>   // timer
+++#include <iostream> // cout, endl
+++
+++#include "lib/utils.h"
+++#include "lib/model.h" 
+++#include "lib/embedding.h" 
+++#include "lib/instruction.h"
+++
+++namespace proj1 {
+++
+++void run_one_instruction(Instruction inst, EmbeddingHolder* users, EmbeddingHolder* items) {
+++    switch(inst.order) {
+++        case INIT_EMB: {
+++            // We need to init the embedding
+++            int length = users->get_emb_length();
+++            Embedding* new_user = new Embedding(length);
+++            int user_idx = users->append(new_user);
+++            for (int item_index: inst.payloads) {
+++                Embedding* item_emb = items->get_embedding(item_index);
+++                // Call cold start for downstream applications, slow
+++                EmbeddingGradient* gradient = cold_start(new_user, item_emb);
+++                users->update_embedding(user_idx, gradient, 0.01);
+++                delete gradient;
+++            }
+++            break;
+++        }
+++        case UPDATE_EMB: {
+++            int user_idx = inst.payloads[0];
+++            int item_idx = inst.payloads[1];
+++            int label = inst.payloads[2];
+++            // You might need to add this state in other questions.
+++            // Here we just show you this as an example
+++            // int epoch = -1;
+++            //if (inst.payloads.size() > 3) {
+++            //    epoch = inst.payloads[3];
+++            //}
+++            Embedding* user = users->get_embedding(user_idx);
+++            Embedding* item = items->get_embedding(item_idx);
+++            EmbeddingGradient* gradient = calc_gradient(user, item, label);
+++            users->update_embedding(user_idx, gradient, 0.01);
+++            delete gradient;
+++            gradient = calc_gradient(item, user, label);
+++            items->update_embedding(item_idx, gradient, 0.001);
+++            delete gradient;
+++            break;
+++        }
+++        case RECOMMEND: {
+++            int user_idx = inst.payloads[0];
+++            Embedding* user = users->get_embedding(user_idx);
+++            std::vector<Embedding*> item_pool;
+++            int iter_idx = inst.payloads[1];
+++            for (unsigned int i = 2; i < inst.payloads.size(); ++i) {
+++                int item_idx = inst.payloads[i];
+++                item_pool.push_back(items->get_embedding(item_idx));
+++            }
+++            Embedding* recommendation = recommend(user, item_pool);
+++            recommendation->write_to_stdout();
+++            break;
+++        }
+++    }
+++
+++}
+++} // namespace proj1
+++
+++int main(int argc, char *argv[]) {
+++
+++    proj1::EmbeddingHolder* users = new proj1::EmbeddingHolder("data/q0.in");
+++    proj1::EmbeddingHolder* items = new proj1::EmbeddingHolder("data/q0.in");
+++    proj1::Instructions instructions = proj1::read_instructrions("data/q0_instruction.tsv");
+++    {
+++    proj1::AutoTimer timer("q0");  // using this to print out timing of the block
+++    // Run all the instructions
+++    for (proj1::Instruction inst: instructions) {
+++        proj1::run_one_instruction(inst, users, items);
+++    }
+++    }
+++
+++    // Write the result
+++    users->write_to_stdout();
+++    items->write_to_stdout();
+++
+++    // We only need to delete the embedding holders, as the pointers are all
+++    // pointing at the emb_matx of the holders.
+++    delete users;
+++    delete items;
+++
+++    return 0;
+++}
++diff --git a/Thread-1/q0_my.cc b/Thread-1/q0_my.cc
++new file mode 100644
++index 0000000..f7f992a
++--- /dev/null
+++++ b/Thread-1/q0_my.cc
++@@ -0,0 +1,29 @@
+++#include <vector>
+++#include <tuple>
+++
+++#include <string>   // string
+++#include <chrono>   // timer
+++
+++#include "lib/utils.h"
+++#include "lib/server.h"
+++#include "lib/instruction.h"
+++
+++int main(int argc, char *argv[]) {
+++
+++    proj1::Server server("data/q0.in", "data/q0.in");
+++
+++    proj1::Instructions instructions = proj1::read_instructrions("data/q0_instruction.tsv");
+++
+++    {
+++        proj1::AutoTimer timer("q0");  // using this to print out timing of the block
+++        // Run all the instructions
+++        for (proj1::Instruction inst: instructions) {
+++            server.do_instruction(inst);
+++        }
+++    }
+++
+++    // Write the result
+++    server.write_to_stdout();
+++
+++    return 0;
+++}
++diff --git a/Thread-1/q1.cc b/Thread-1/q1.cc
++index 974ad23..4476ad3 100644
++--- a/Thread-1/q1.cc
+++++ b/Thread-1/q1.cc
++@@ -1,5 +1,39 @@
++-#include <iostream> // cout, endl
++-int main(int argc, char *argv[]) {
++-    std::cout << "please implement this function\n";
++-    exit(1);
++-}
++\ No newline at end of file
+++#include <vector>
+++#include <tuple>
+++
+++#include <string>   // string
+++#include <chrono>   // timer
+++#include <thread>
+++#include <vector>
+++
+++#include "lib/utils.h"
+++#include "lib/server.h"
+++#include "lib/instruction.h"
+++
+++int main(int argc, char *argv[]) {
+++
+++    proj1::Server server("data/q1.in", "data/q1.in", false, true, false, false);
+++
+++    proj1::Instructions instructions = proj1::read_instructrions("data/q1_instruction.tsv");
+++
+++    {
+++        proj1::AutoTimer timer("q1");  // using this to print out timing of the block
+++        // Run all the instructions
+++
+++        std::vector<std::thread*> threads;
+++
+++        for (proj1::Instruction inst: instructions) {
+++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
+++            threads.push_back(t);
+++        }
+++        for (auto t: threads) {
+++            t->join();
+++            delete t;
+++        }
+++    }
+++
+++    // Write the result
+++    server.write_to_stdout();
+++
+++    return 0;
+++}
++diff --git a/Thread-1/q2.cc b/Thread-1/q2.cc
++index c4b7413..d4b0483 100644
++--- a/Thread-1/q2.cc
+++++ b/Thread-1/q2.cc
++@@ -1,4 +1,39 @@
++-#include <iostream> // cout, endl
++-int main(int argc, char *argv[]) {
++-    exit(1);
++-}
++\ No newline at end of file
+++#include <vector>
+++#include <tuple>
+++
+++#include <string>   // string
+++#include <chrono>   // timer
+++#include <thread>
+++#include <vector>
+++
+++#include "lib/utils.h"
+++#include "lib/server.h"
+++#include "lib/instruction.h"
+++
+++int main(int argc, char *argv[]) {
+++
+++    proj1::Server server("data/q2.in", "data/q2.in", true, true, false, false);
+++
+++    proj1::Instructions instructions = proj1::read_instructrions("data/q2_instruction.tsv");
+++
+++    {
+++        proj1::AutoTimer timer("q2");  // using this to print out timing of the block
+++        // Run all the instructions
+++        
+++        std::vector<std::thread*> threads;
+++
+++        for (proj1::Instruction inst: instructions) {
+++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
+++            threads.push_back(t);
+++        }
+++        for (auto t: threads) {
+++            t->join();
+++            delete t;
+++        }
+++    }
+++
+++    // Write the result
+++    server.write_to_stdout();
+++
+++    return 0;
+++}
++diff --git a/Thread-1/q3.cc b/Thread-1/q3.cc
++index c4b7413..f4ae4dd 100644
++--- a/Thread-1/q3.cc
+++++ b/Thread-1/q3.cc
++@@ -1,4 +1,39 @@
++-#include <iostream> // cout, endl
++-int main(int argc, char *argv[]) {
++-    exit(1);
++-}
++\ No newline at end of file
+++#include <vector>
+++#include <tuple>
+++
+++#include <string>   // string
+++#include <chrono>   // timer
+++#include <thread>
+++#include <vector>
+++
+++#include "lib/utils.h"
+++#include "lib/server.h"
+++#include "lib/instruction.h"
+++
+++int main(int argc, char *argv[]) {
+++
+++    proj1::Server server("data/q3.in", "data/q3.in", true, true, true, false);
+++
+++    proj1::Instructions instructions = proj1::read_instructrions("data/q3_instruction.tsv");
+++
+++    {
+++        proj1::AutoTimer timer("q3");  // using this to print out timing of the block
+++        // Run all the instructions
+++        
+++        std::vector<std::thread*> threads;
+++
+++        for (proj1::Instruction inst: instructions) {
+++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
+++            threads.push_back(t);
+++        }
+++        for (auto t: threads) {
+++            t->join();
+++            delete t;
+++        }
+++    }
+++
+++    // Write the result
+++    server.write_to_stdout();
+++
+++    return 0;
+++}
++diff --git a/Thread-1/q4.cc b/Thread-1/q4.cc
++new file mode 100644
++index 0000000..b9d6909
++--- /dev/null
+++++ b/Thread-1/q4.cc
++@@ -0,0 +1,36 @@
+++#include <vector>
+++#include <tuple>
+++
+++#include <string>   // string
+++#include <chrono>   // timer
+++#include <thread>
+++#include <vector>
+++
+++#include "lib/utils.h"
+++#include "lib/server.h"
+++#include "lib/instruction.h"
+++
+++int main(int argc, char *argv[]) {
+++
+++    proj1::Server server("data/q4.in", "data/q4.in", true, true, true, false);
+++
+++    proj1::Instructions instructions = proj1::read_instructrions("data/q4_instruction.tsv");
+++
+++    {
+++        proj1::AutoTimer timer("q4");  // using this to print out timing of the block
+++        // Run all the instructions
+++        
+++        std::vector<std::thread*> threads;
+++
+++        for (proj1::Instruction inst: instructions) {
+++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
+++            threads.push_back(t);
+++        }
+++        for (auto t: threads) {
+++            t->join();
+++            delete t;
+++        }
+++    }
+++
+++    return 0;
+++}
++diff --git a/Thread-1/q5.cc b/Thread-1/q5.cc
++new file mode 100644
++index 0000000..a55958e
++--- /dev/null
+++++ b/Thread-1/q5.cc
++@@ -0,0 +1,36 @@
+++#include <vector>
+++#include <tuple>
+++
+++#include <string>   // string
+++#include <chrono>   // timer
+++#include <thread>
+++#include <vector>
+++
+++#include "lib/utils.h"
+++#include "lib/server.h"
+++#include "lib/instruction.h"
+++
+++int main(int argc, char *argv[]) {
+++
+++    proj1::Server server("data/q4.in", "data/q4.in", true, true, true, true);
+++
+++    proj1::Instructions instructions = proj1::read_instructrions("data/q4_instruction.tsv");
+++
+++    {
+++        proj1::AutoTimer timer("q5");  // using this to print out timing of the block
+++        // Run all the instructions
+++        
+++        std::vector<std::thread*> threads;
+++
+++        for (proj1::Instruction inst: instructions) {
+++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
+++            threads.push_back(t);
+++        }
+++        for (auto t: threads) {
+++            t->join();
+++            delete t;
+++        }
+++    }
+++
+++    return 0;
+++}
++diff --git a/Thread-2/boat/.bazeliskrc b/Thread-2/boat/.bazeliskrc
++new file mode 100644
++index 0000000..f81d3f7
++--- /dev/null
+++++ b/Thread-2/boat/.bazeliskrc
++@@ -0,0 +1 @@
+++USE_BAZEL_VERSION=4.2.1
++diff --git a/Thread-2/boat/.gitignore b/Thread-2/boat/.gitignore
++new file mode 100644
++index 0000000..f16988d
++--- /dev/null
+++++ b/Thread-2/boat/.gitignore
++@@ -0,0 +1,3 @@
+++bazel-*
+++.idea
+++.vscode
++\ No newline at end of file
++diff --git a/Thread-2/boat/BUILD b/Thread-2/boat/BUILD
++new file mode 100644
++index 0000000..4114431
++--- /dev/null
+++++ b/Thread-2/boat/BUILD
++@@ -0,0 +1,62 @@
+++##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
+++
+++cc_library(
+++    name = "boatGrader_lib",
+++    srcs = [
+++        "boatGrader.cc",
+++        ],
+++    hdrs = [
+++        "boatGrader.h",
+++        ],
+++    copts = [
+++        # "/std:c++20",
+++        # "/03",
+++        "-std=c++2a",
+++        "-O3"
+++    ],
+++	visibility = [
+++		"//visibility:public",
+++	],
+++)
+++
+++cc_library(
+++    name = "boat_lib",
+++    srcs = [
+++        "boat.cc",
+++        ],
+++    hdrs = [
+++        "boat.h",
+++        ],
+++	deps = [
+++        ":boatGrader_lib"
+++    ],
+++    copts = [
+++        # "/std:c++20",
+++        # "/03",
+++        "-std=c++2a",
+++        "-O3"
+++    ],
+++	visibility = [
+++		"//visibility:public",
+++	],
+++)
+++
+++cc_binary(
+++    name = "main",
+++    srcs = [
+++        "main.cc"
+++            ],
+++	deps = [
+++        ":boatGrader_lib",
+++		":boat_lib"
+++    ],
+++    copts = [
+++        # "/std:c++20",
+++        # "/03",
+++        "-std=c++2a",
+++        "-O3"
+++    ],
+++	linkopts = [
+++        "-pthread",
+++    ],
+++)
++\ No newline at end of file
++diff --git a/Thread-2/boat/README.md b/Thread-2/boat/README.md
++new file mode 100644
++index 0000000..8e0643a
++--- /dev/null
+++++ b/Thread-2/boat/README.md
++@@ -0,0 +1,31 @@
+++# Boat Question
+++
+++[Background] This question is adapted from previous years.  It has nothing to do with the previous recommendation systems.  Please treat it as a separate question letting you write a thread model for a real-world simulator.  
+++
+++A number of Hawaiian adults and children are trying to get from Oahu to Molokai. Unfortunately, they have only one boat that can carry maximally two children or one adult (but **not** one child and one adult). The boat can be rowed back to Oahu, but it requires a pilot to do so.
+++
+++**Requirements:**
+++
+++Arrange a solution to transfer everyone from Oahu to Molokai. You may assume that there are **at least two children**.
+++
+++The method Boat.begin() should create a thread for each child or adult. We will refer to the thread that called Boat.begin() as the parent thread. Your mechanism cannot rely on knowing how many children or adults are present beforehand, although you are free to attempt to determine this among the threads (i.e. you can't pass the parameters adults and children in the method begin() to your threads, but you are free to have each thread increment shared variables to try and determine this value, if you wish).
+++
+++To show that the trip is properly synchronized, make calls to the appropriate BoatGrader methods every time someone crosses the channel. When a child pilots the boat from Oahu to Molokai, call ChildRowToMolokai. When a child rides as a passenger from Oahu to Molokai, call ChildRideToMolokai. Make sure that when a boat with two people on it crosses, the pilot calls the ...RowTo... method before the passenger calls the ...RideTo... method.
+++
+++Your solution must **have no busy waiting**, and it must eventually end. The simulation ends when the parent thread finishes running. Note that it is not necessary to terminate all the created threads -- you can leave them blocked waiting for a condition variable. While you cannot pass the number of threads created to the threads representing adults and children, you can and probably will need to use this number in begin() in order to determine when all the adults and children are across and you can return.
+++
+++The idea behind this task is to use **independent** threads to solve a problem. You are to program the logic that a child or an adult would follow if that person were in this situation. For example, it is reasonable to allow a person to see how many children or adults are on the same island they are on. A person could see whether the boat is at their island. A person can know which island they are on. All of this information may be stored with each individual thread or in shared variables. So a counter that holds the number of children on Oahu would be allowed, so long as only threads that represent people on Oahu could access it.
+++
+++What is not allowed is a thread that executes a **"top-down"** strategy for the simulation. For example, you may not create threads for children and adults, then have a controller thread simply send commands to them through communicators. The threads must act as if they were individuals. This also means you cannot serialize for any reason. Every person must be thinking, and acting, independently at all times.
+++
+++Information that is not possible **in the real world** is also not allowed. For example, a child on Molokai cannot magically see all of the people on Oahu. That child may remember the number of people that he or she has seen leaving, but the child may not view people on Oahu as if it were there. (Assume that the people do not have any technology other than a boat!)
+++
+++You will reach a point in your simulation where the adult and child threads believe that everyone is across on Molokai. At this point, you are allowed to do **one-way** communication from the adult/child threads to begin() (the parent thread) in order to inform it that the simulation may be over. It may be possible, however, that your adult and child threads are incorrect. Your simulation must handle this case without requiring explicit or implicit communication from begin() (the parent thread) to the adult/child threads.
+++
+++**ToDo:**
+++
+++Implement a class **Boat** in the files *boat.h* and *boat.cc* exposing the member function *Boat.begin()*. Your threads should call grading functions in *boatGrader.h* when making decisions. An example of interface usage in the final grading has been provided in *main.cc*.
+++
+++**Grading:**
+++
+++You will be graded by the correctness of your solution. Violation of design principles (refer to requirements) will result in demerit points.
++diff --git a/Thread-2/boat/README.pdf b/Thread-2/boat/README.pdf
++new file mode 100644
++index 0000000..fc65db6
++--- /dev/null
+++++ b/Thread-2/boat/README.pdf
++@@ -0,0 +1,71 @@
+++Boat Question
+++
+++[Background] This question is adapted from previous years. It has nothing to do with the
+++previous recommendation systems. Please treat it as a separate question letting you write a
+++thread model for a real-world simulator.
+++
+++A number of Hawaiian adults and children are trying to get from Oahu to Molokai. Unfortunately,
+++they have only one boat that can carry maximally two children or one adult (but not one child and
+++one adult). The boat can be rowed back to Oahu, but it requires a pilot to do so.
+++
+++Requirements:
+++
+++Arrange a solution to transfer everyone from Oahu to Molokai. You may assume that there are at
+++least two children.
+++
+++The method Boat.begin() should create a thread for each child or adult. We will refer to the thread
+++that called Boat.begin() as the parent thread. Your mechanism cannot rely on knowing how many
+++children or adults are present beforehand, although you are free to attempt to determine this
+++among the threads (i.e. you can't pass the parameters adults and children in the method begin()
+++to your threads, but you are free to have each thread increment shared variables to try and
+++determine this value, if you wish).
+++
+++To show that the trip is properly synchronized, make calls to the appropriate BoatGrader
+++methods every time someone crosses the channel. When a child pilots the boat from Oahu to
+++Molokai, call ChildRowToMolokai. When a child rides as a passenger from Oahu to Molokai, call
+++ChildRideToMolokai. Make sure that when a boat with two people on it crosses, the pilot calls the
+++...RowTo... method before the passenger calls the ...RideTo... method.
+++
+++Your solution must have no busy waiting, and it must eventually end. The simulation ends when
+++the parent thread finishes running. Note that it is not necessary to terminate all the created
+++threads -- you can leave them blocked waiting for a condition variable. While you cannot pass the
+++number of threads created to the threads representing adults and children, you can and probably
+++will need to use this number in begin() in order to determine when all the adults and children are
+++across and you can return.
+++
+++The idea behind this task is to use independent threads to solve a problem. You are to program
+++the logic that a child or an adult would follow if that person were in this situation. For example, it
+++is reasonable to allow a person to see how many children or adults are on the same island they
+++are on. A person could see whether the boat is at their island. A person can know which island
+++they are on. All of this information may be stored with each individual thread or in shared
+++variables. So a counter that holds the number of children on Oahu would be allowed, so long as
+++only threads that represent people on Oahu could access it.
+++
+++What is not allowed is a thread that executes a "top-down" strategy for the simulation. For
+++example, you may not create threads for children and adults, then have a controller thread simply
+++send commands to them through communicators. The threads must act as if they were
+++individuals. This also means you cannot serialize for any reason. Every person must be thinking,
+++and acting, independently at all times.
+++
+++Information that is not possible in the real world is also not allowed. For example, a child on
+++Molokai cannot magically see all of the people on Oahu. That child may remember the number of
+++people that he or she has seen leaving, but the child may not view people on Oahu as if it were
+++there. (Assume that the people do not have any technology other than a boat!)
+++You will reach a point in your simulation where the adult and child threads believe that everyone
+++is across on Molokai. At this point, you are allowed to do one-way communication from the
+++adult/child threads to begin() (the parent thread) in order to inform it that the simulation may be
+++over. It may be possible, however, that your adult and child threads are incorrect. Your simulation
+++must handle this case without requiring explicit or implicit communication from begin() (the
+++parent thread) to the adult/child threads.
+++
+++ToDo:
+++
+++Implement a class Boat in the files boat.h and boat.cc exposing the member function Boat.begin().
+++Your threads should call grading functions in boatGrader.h when making decisions. An example of
+++interface usage in the final grading has been provided in main.cc.
+++
+++Grading:
+++
+++You will be graded by the correctness of your solution. Violation of design principles (refer to
+++requirements) will result in demerit points.
+++
++\ No newline at end of file
++diff --git a/Thread-2/boat/WORKSPACE b/Thread-2/boat/WORKSPACE
++new file mode 100644
++index 0000000..6760453
++--- /dev/null
+++++ b/Thread-2/boat/WORKSPACE
++@@ -0,0 +1,15 @@
+++load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
+++
+++## google test dependency
+++http_archive(
+++  name = "gtest",
+++  urls = ["https://github.com.cnpmjs.org/google/googletest/archive/refs/tags/release-1.11.0.zip"],
+++  strip_prefix = "googletest-release-1.11.0",
+++)
+++## google benchmark dependency
+++http_archive(
+++  name = "gbench",
+++  urls = ["https://github.com.cnpmjs.org/google/benchmark/archive/refs/tags/v1.6.0.zip"],
+++  strip_prefix = "benchmark-1.6.0",
+++  sha256 = "3da225763533aa179af8438e994842be5ca72e4a7fed4d7976dc66c8c4502f58"
+++)
++diff --git a/Thread-2/boat/boat.cc b/Thread-2/boat/boat.cc
++new file mode 100644
++index 0000000..9292d1b
++--- /dev/null
+++++ b/Thread-2/boat/boat.cc
++@@ -0,0 +1,93 @@
+++#include <thread>
+++#include <vector>
+++#include <semaphore>
+++#include <unistd.h>
+++
+++#include "boat.h"
+++
+++namespace proj2{
+++int Oahu_child_counter = 0, Molokai_child_counter = 0, Oahu_adult_counter = 0;
+++bool isPilot = true;
+++bool isEnd = false;
+++
+++std::binary_semaphore ThreadStart(0);
+++std::binary_semaphore ChildToMolokai(0);
+++std::binary_semaphore AdultToMolokai(0);
+++std::binary_semaphore ChildToOahu(0);
+++std::binary_semaphore End(0);
+++	
+++Boat::Boat(){
+++}
+++
+++void Boat:: ChildThread(BoatGrader* bg){
+++    Oahu_child_counter++;
+++    bg->initializeChild();
+++    ThreadStart.release();
+++
+++    while(true){
+++        ChildToMolokai.acquire();
+++
+++        Oahu_child_counter--;
+++
+++        if(isPilot){
+++            isPilot = false;
+++            bg->ChildRowToMolokai();
+++            ChildToMolokai.release();
+++        } else {
+++            if (Oahu_child_counter == 0 && Oahu_adult_counter == 0) isEnd = true;
+++
+++            isPilot = true;
+++            bg->ChildRideToMolokai();
+++            Molokai_child_counter += 2;
+++
+++            if (isEnd) {
+++                End.release();
+++            } else {
+++                ChildToOahu.release();
+++            }
+++        }
+++
+++        ChildToOahu.acquire();
+++        Molokai_child_counter--;
+++        bg->ChildRowToOahu();
+++        Oahu_child_counter++;
+++        
+++        if (Oahu_child_counter >= 2) {
+++            ChildToMolokai.release();
+++        } else {
+++            AdultToMolokai.release();
+++        }
+++    }
+++}
+++
+++void Boat:: AdultThread(BoatGrader* bg){
+++    Oahu_adult_counter++;
+++    bg->initializeAdult();
+++    ThreadStart.release();
+++
+++    AdultToMolokai.acquire();
+++    Oahu_adult_counter--;
+++    bg->AdultRowToMolokai();
+++    ChildToOahu.release();
+++}
+++
+++void Boat:: begin(int adults, int children, BoatGrader *bg){
+++    std::vector<std::thread> threadList;
+++    for (int i = 0; i < adults; i++) {
+++        threadList.push_back(std::thread(proj2::Boat::AdultThread, bg));
+++        ThreadStart.acquire();
+++    }
+++    for (int i = 0; i < children; i++) {
+++        threadList.push_back(std::thread(proj2::Boat::ChildThread, bg));
+++        ThreadStart.acquire();
+++    }
+++
+++    ChildToMolokai.release();
+++    // ChildToMolokai.release();
+++    End.acquire();
+++
+++    for (int i = 0; i < threadList.size(); i++) {
+++        threadList[i].detach();
+++    }
+++} 
+++}
++\ No newline at end of file
++diff --git a/Thread-2/boat/boat.h b/Thread-2/boat/boat.h
++new file mode 100644
++index 0000000..980296d
++--- /dev/null
+++++ b/Thread-2/boat/boat.h
++@@ -0,0 +1,23 @@
+++#ifndef BOAT_H_
+++#define BOAT_H_
+++
+++#include<stdio.h>
+++#include <thread>
+++#include <mutex>
+++#include <semaphore>
+++#include <unistd.h>
+++
+++#include "boatGrader.h"
+++
+++namespace proj2{
+++class Boat{
+++public:
+++	Boat();
+++    ~Boat(){};
+++	void begin(int, int, BoatGrader*);
+++	static void ChildThread(BoatGrader*);
+++	static void AdultThread(BoatGrader*);
+++};
+++}
+++
+++#endif // BOAT_H_
++diff --git a/Thread-2/boat/boatGrader.cc b/Thread-2/boat/boatGrader.cc
++new file mode 100644
++index 0000000..a662361
++--- /dev/null
+++++ b/Thread-2/boat/boatGrader.cc
++@@ -0,0 +1,124 @@
+++#include<string>
+++
+++#include "boatGrader.h" 
+++
+++namespace proj2 {
+++	BoatGrader::BoatGrader(int i, int j){
+++		boatAssert(j >=2, "invalid children num", CONDITION_MISMATCH);
+++    	childrenInit = j;
+++    	adultInit=i;
+++        children_on_oahu = j;
+++        adults_on_oahu = i;
+++        children_on_molokai = 0;
+++        adults_on_molokai = 0;
+++        passenger_spaces = 1;
+++        passenger_to_oahu = 1;
+++        boat_on_oahu = true;
+++        error_occured = false;
+++    }
+++    void BoatGrader:: initializeChild(){
+++		printf("A child has been created.\n");
+++	}
+++	
+++	//NEW ADDITION FOR 2014
+++	void BoatGrader:: initializeAdult(){
+++		printf("An adult has been created.\n");
+++	}
+++
+++    /* ChildRowToMolokai should be called when a child pilots the boat
+++       from Oahu to Molokai */
+++    void BoatGrader:: ChildRowToMolokai() {
+++        boatAssert(children_on_oahu > 0 && boat_on_oahu && childrenInit > 0, "wrong Child rowing to Molokai.\n", CONDITION_MISMATCH);
+++        children_on_oahu--;
+++        children_on_molokai++;
+++        passenger_spaces++;
+++        boat_on_oahu = false;
+++		printf("**Child rowing to Molokai.\n");
+++    }
+++
+++    /* ChildRowToOahu should be called when a child pilots the boat
+++       from Molokai to Oahu*/
+++    void BoatGrader:: ChildRowToOahu() {
+++    	boatAssert(children_on_molokai > 0 && !boat_on_oahu && childrenInit > 0, "wrong Child rowing to Oahu.\n", CONDITION_MISMATCH);
+++        children_on_molokai--;
+++        children_on_oahu++;
+++        passenger_to_oahu++;
+++        boat_on_oahu = true;
+++		printf("**Child rowing to Oahu.\n");
+++    }
+++
+++    /* ChildRideToMolokai should be called when a child not piloting
+++       the boat disembarks on Molokai */
+++    void BoatGrader:: ChildRideToMolokai() {
+++    	boatAssert(children_on_oahu > 0 && passenger_spaces > 0 && childrenInit > 0, "wrong Child arrived on Molokai as a passenger.\n", CONDITION_MISMATCH);
+++        children_on_oahu--;
+++        children_on_molokai++;
+++        passenger_spaces--;
+++		printf("**Child arrived on Molokai as a passenger.\n");
+++    }
+++
+++    /* ChildRideToOahu should be called when a child not piloting
+++       the boat disembarks on Oahu */
+++    void BoatGrader:: ChildRideToOahu() {
+++    	boatAssert(children_on_molokai > 0 && passenger_to_oahu > 0 && childrenInit > 0, "wrong Child arrived on Oahu as a passenger.\n", CONDITION_MISMATCH);
+++        children_on_molokai--;
+++        children_on_oahu++;
+++        passenger_to_oahu--;
+++		printf("**Child arrived on Oahu as a passenger.\n");
+++    }
+++
+++    /* AdultRowToMolokai should be called when a adult pilots the boat
+++       from Oahu to Molokai */
+++    void BoatGrader:: AdultRowToMolokai() {
+++    	boatAssert(adults_on_oahu > 0 && boat_on_oahu && adultInit > 0, "wrong Adult rowing to Molokai.\n", CONDITION_MISMATCH);
+++        adults_on_oahu--;
+++        adults_on_molokai++;
+++        boat_on_oahu = false;
+++		printf("**Adult rowing to Molokai.\n");
+++    }
+++
+++    /* AdultRowToOahu should be called when a adult pilots the boat
+++       from Molokai to Oahu */
+++    void BoatGrader:: AdultRowToOahu() {
+++    	boatAssert(adults_on_molokai > 0 && !boat_on_oahu && adultInit > 0, "wrong Adult rowing to Oahu.\n", CONDITION_MISMATCH);
+++        adults_on_oahu++;
+++        adults_on_molokai--;
+++        boat_on_oahu = true;
+++		printf("**Adult rowing to Oahu.\n");
+++    }
+++
+++    /* AdultRideToMolokai should be called when an adult not piloting
+++       the boat disembarks on Molokai */
+++    void BoatGrader:: AdultRideToMolokai() {
+++    	boatAssert(false, "adult can not ride as passenger", ADULT_RIDE);
+++        error_occured = true;
+++		printf("**Adult arrived on Molokai as a passenger.\n");
+++    }
+++
+++    /* AdultRideToOahu should be called when an adult not piloting
+++       the boat disembarks on Oahu */
+++    void BoatGrader:: AdultRideToOahu() {
+++    	boatAssert(false, "adult can not ride as passenger", ADULT_RIDE);
+++        error_occured = true;
+++		printf("**Adult arrived on Oahu as a passenger.\n");
+++    }
+++    
+++
+++    int BoatGrader::adultsLeft() {
+++        return adults_on_oahu;
+++    }
+++
+++    int BoatGrader::childrenLeft() {
+++        return children_on_oahu;
+++    }
+++
+++    bool BoatGrader:: passed() {
+++        return children_on_oahu == 0 && adults_on_oahu == 0;
+++    }
+++
+++    int BoatGrader::points() {
+++        if(error_occured)
+++            return 0;
+++        return children_on_oahu != 0 || adults_on_oahu != 0 ? 1 : 2;
+++    }
+++}
++diff --git a/Thread-2/boat/boatGrader.h b/Thread-2/boat/boatGrader.h
++new file mode 100644
++index 0000000..fc14f71
++--- /dev/null
+++++ b/Thread-2/boat/boatGrader.h
++@@ -0,0 +1,104 @@
+++#ifndef BOAT_GRADER_H_
+++#define BOAT_GRADER_H_
+++
+++#include<stdio.h>
+++#include <iostream>
+++
+++
+++namespace proj2 {
+++	
+++enum BOAT_ERROR {
+++    CONDITION_MISMATCH = 0,
+++    ADULT_RIDE = 1,
+++    WRONG_ANSWER = 2
+++};	
+++
+++class BoatGrader {
+++
+++    /**
+++     * BoatGrader consists of functions to be called to show that
+++     * your solution is properly synchronized. This version simply
+++     * prints messages to standard out, so that you can watch it.
+++     * You cannot submit this file, as we will be using our own
+++     * version of it during grading.
+++
+++     * Note that this file includes all possible variants of how
+++     * someone can get from one island to another. Inclusion in
+++     * this class does not imply that any of the indicated actions
+++     * are a good idea or even allowed.
+++     */
+++public:
+++     
+++    template <class T>
+++	inline void boatAssert(bool condition, char const *msg, T error) {
+++	    if (!condition) {
+++	        std::cerr << msg << std::endl;
+++	        error_occured = true;
+++	        throw error;
+++	    }
+++	}
+++	
+++	BoatGrader(int i, int j);
+++   ~BoatGrader(){};
+++	
+++	void initializeChild();
+++	
+++	void initializeAdult();
+++
+++    /* ChildRowToMolokai should be called when a child pilots the boat
+++       from Oahu to Molokai */
+++    void ChildRowToMolokai() ;
+++
+++    /* ChildRowToOahu should be called when a child pilots the boat
+++       from Molokai to Oahu*/
+++    void ChildRowToOahu();
+++
+++    /* ChildRideToMolokai should be called when a child not piloting
+++       the boat disembarks on Molokai */
+++    void ChildRideToMolokai() ;
+++
+++    /* ChildRideToOahu should be called when a child not piloting
+++       the boat disembarks on Oahu */
+++    void ChildRideToOahu() ;
+++
+++    /* AdultRowToMolokai should be called when a adult pilots the boat
+++       from Oahu to Molokai */
+++    void AdultRowToMolokai() ;
+++
+++    /* AdultRowToOahu should be called when a adult pilots the boat
+++       from Molokai to Oahu */
+++    void AdultRowToOahu() ;
+++
+++    /* AdultRideToMolokai should be called when an adult not piloting
+++       the boat disembarks on Molokai */
+++    void AdultRideToMolokai() ;
+++
+++    /* AdultRideToOahu should be called when an adult not piloting
+++       the boat disembarks on Oahu */
+++    void AdultRideToOahu() ;
+++    
+++    int adultsLeft();
+++    
+++    int childrenLeft();
+++    
+++    bool passed();
+++    
+++    int points();
+++    
+++private:
+++	int childrenInit;
+++	int adultInit;
+++    int children_on_oahu;
+++    int adults_on_oahu;
+++    int children_on_molokai;
+++    int adults_on_molokai;
+++    int passenger_spaces;
+++    int passenger_to_oahu;
+++    bool boat_on_oahu;
+++    bool error_occured;
+++    
+++    
+++};
+++
+++}
+++#endif // BOAT_GRADER_H_
++diff --git a/Thread-2/boat/main.cc b/Thread-2/boat/main.cc
++new file mode 100644
++index 0000000..f083114
++--- /dev/null
+++++ b/Thread-2/boat/main.cc
++@@ -0,0 +1,26 @@
+++#include<stdio.h>
+++#include<string>
+++
+++#include "boat.h"
+++#include "boatGrader.h"
+++
+++int main(int argc, char *argv[]){
+++	if (argc < 3){
+++        printf("\nUsage %s [adult num] [children num] \n", argv[0]);
+++        exit(1);
+++    }
+++    int adults = atoi(argv[1]); // from string to int
+++    int children = atoi(argv[2]);
+++	proj2::BoatGrader* bg = new proj2::BoatGrader(adults,children); 
+++	proj2::Boat* boat = new proj2::Boat();
+++	boat->begin(adults,children, bg);
+++	int k = bg->childrenLeft();
+++	bg->boatAssert(k == 0, "Left children on oahu", proj2::WRONG_ANSWER);
+++	int l = bg->adultsLeft();
+++	bg->boatAssert(l == 0, "Left adults on oahu", proj2::WRONG_ANSWER);
+++	printf("pass the test!\n");
+++	delete bg;
+++	delete boat;
+++	return 0;
+++}
+++
++diff --git a/Thread-2/deadlock/.bazeliskrc b/Thread-2/deadlock/.bazeliskrc
++new file mode 100644
++index 0000000..f81d3f7
++--- /dev/null
+++++ b/Thread-2/deadlock/.bazeliskrc
++@@ -0,0 +1 @@
+++USE_BAZEL_VERSION=4.2.1
++diff --git a/Thread-2/deadlock/.gitignore b/Thread-2/deadlock/.gitignore
++new file mode 100644
++index 0000000..f16988d
++--- /dev/null
+++++ b/Thread-2/deadlock/.gitignore
++@@ -0,0 +1,3 @@
+++bazel-*
+++.idea
+++.vscode
++\ No newline at end of file
++diff --git a/Thread-2/deadlock/BUILD b/Thread-2/deadlock/BUILD
++new file mode 100644
++index 0000000..2d867c5
++--- /dev/null
+++++ b/Thread-2/deadlock/BUILD
++@@ -0,0 +1,20 @@
+++##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
+++
+++cc_binary(
+++    name = "main",
+++    srcs = [
+++        "main.cc"
+++            ],
+++    deps = [
+++        "//lib:resource_manager_lib",
+++        "//lib:utils_lib",
+++        "//lib:workload_lib",
+++        "//lib:thread_manager_lib"
+++    ],
+++    copts = [
+++        "-std=c++11",
+++    ],
+++    linkopts = [
+++        "-pthread",
+++    ]
+++)
++\ No newline at end of file
++diff --git a/Thread-2/deadlock/README.md b/Thread-2/deadlock/README.md
++new file mode 100644
++index 0000000..2fc5bd7
++--- /dev/null
+++++ b/Thread-2/deadlock/README.md
++@@ -0,0 +1,32 @@
+++# Deadlock Prevention/Recovery
+++
+++Real-world computation tasks usually require different resources to run, e.g. GPUs, disk spaces for caching dataset, and network bandwidth for communication. When multiple user tasks come with different resource requirements, deadlocks may happen and thus the program makes no progress. In this experiment, you should simulate a deadlock situation and either prevent it or detect and recover from it (we give you an deadlock example in `data/example.in`).
+++
+++## Codebase Introduction
+++
+++We consider four types of resources: GPU, Network, Memory, Disk. We provide a basic thread-safe implementation of a _resource manager_ `lib/resource_manager.h`, which holds a certain number of instances of each resource type. The resource manager assigns the resources to each user task (a thread with specified workload), and blocks the thread if it is in short of that type of resource. A user task, before/after any resource use, should call the resource manager with the `request` and `release` methods to access the resource. Other than the resource requests that might cause a deadlock,  these tasks are independent, and you do not need to consider other synchronization among these tasks. (Of course, the resource manager itself should be thread-safe).
+++
+++We also provide a simple implementation of a _thread manager_ in `lib/thread_manager.h`, with which you are able to create, kill, and restart the threads that have been killed. You can add any information you needed to the thread manager (see the hints in the code). Note that you should carefully account for the resources held by the thread after you kill it.
+++
+++In `lib/workload.h`, we provide an example user task that requests two resource types. Each user task requests two types of resources and uses them for an extended time period. In this experiment, you should not rely on this `workload` function, as we may adopt different implementation during testing. However, for any workload type, the worker thread will call `ResourceManager::budget_claim` to claim all resources it is going to use. The worker threads will eventually use all the resources they claim. It may also release some resources during processing. You are encouraged to add your own workload functions to test the correctness of your implementation under different circumstances.
+++
+++In the example `main.cc` and `workload.h`, we provide a deadlock case example. Each user task is represented as a sequence of integers (i.e., workload arguments, see `main.cc` and `workload.h` for details). The order of different tasks are arbitrary -- you can start them simultaneously or sequentially, as long as they are thread-safe.
+++
+++## TODO
+++
+++Given the initial number of instances of each resource type and the definition of each user task, your job is to run these tasks concurrently without deadlocks. To do this, you may prevent the deadlock from happening or recover from deadlocked threads by implementing a smart `ResourceManager`. Note that your implementation of the resource manager should not rely on the implementation of the workload.
+++
+++If you use a prevention method, in cases where two tasks cannot run concurrently, the resource manager should deny requests to a task, and the task that does not get the resource should wait until it gets the requested resource.  
+++
+++If you use a detect-and-recover scheme, the resource manager should detect deadlocks and recover by killing a thread. You can assume that all the threads are recoverable, as long as you correctly reclaim all resources managed by the resource manager.
+++
+++Your method should maximize the concurrency level to shorten the overall execution time and increase system utilization.  That is, you should do your best to allow all possible concurrently executable threads to run concurrently.
+++
+++You do not need to consider failure cases (i.e., a task fails in the middle because of user logic errors). I.e., you can safely assume that all tasks, if not deadlocked, will finish correctly and return the resource to the resource manager.
+++
+++## Grading
+++
+++We will use a mixture of user tasks to test your scheduler for the following two requirements:
+++
+++1. Correctness: all the tasks should eventually finish without deadlocks;
+++2. Performance: we will consider the time it takes for all the tasks. It should be significantly faster than running all tasks sequentially - and quite close to the theoretically best performance (i.e., an offline schedule that knows all the task behaviors previously and carefully schedule them so that no deadlock can happen).  
++diff --git a/Thread-2/deadlock/README.pdf b/Thread-2/deadlock/README.pdf
++new file mode 100644
++index 0000000..eb541f2
++--- /dev/null
+++++ b/Thread-2/deadlock/README.pdf
++@@ -0,0 +1,73 @@
+++Deadlock Prevention/Recovery
+++
+++Real-world computation tasks usually require different resources to run, e.g. GPUs, disk spaces
+++for caching dataset, and network bandwidth for communication. When multiple user tasks come
+++with different resource requirements, deadlocks may happen and thus the program makes no
+++progress. In this experiment, you should simulate a deadlock situation and either prevent it or
+++detect and recover from it (we give you an deadlock example in data/example.in ).
+++
+++Codebase Introduction
+++
+++We consider four types of resources: GPU, Network, Memory, Disk. We provide a basic thread-
+++safe implementation of a resource manager lib/resource_manager.h , which holds a certain
+++number of instances of each resource type. The resource manager assigns the resources to each
+++user task (a thread with specified workload), and blocks the thread if it is in short of that type of
+++resource. A user task, before/after any resource use, should call the resource manager with the
+++request and release methods to access the resource. Other than the resource requests that
+++might cause a deadlock, these tasks are independent, and you do not need to consider other
+++synchronization among these tasks. (Of course, the resource manager itself should be thread-
+++safe).
+++
+++We also provide a simple implementation of a thread manager in lib/thread_manager.h , with
+++which you are able to create, kill, and restart the threads that have been killed. You can add any
+++information you needed to the thread manager (see the hints in the code). Note that you should
+++carefully account for the resources held by the thread after you kill it.
+++
+++In lib/workload.h , we provide an example user task that requests two resource types. Each
+++user task requests two types of resources and uses them for an extended time period. In this
+++experiment, you should not rely on this workload function, as we may adopt different
+++implementation during testing. However, for any workload type, the worker thread will call
+++ResourceManager::budget_claim to claim all resources it is going to use. The worker threads will
+++eventually use all the resources they claim. It may also release some resources during processing.
+++You are encouraged to add your own workload functions to test the correctness of your
+++implementation under different circumstances.
+++
+++In the example main.cc and workload.h , we provide a deadlock case example. Each user task is
+++represented as a sequence of integers (i.e., workload arguments, see main.cc and workload.h
+++for details). The order of different tasks are arbitrary -- you can start them simultaneously or
+++sequentially, as long as they are thread-safe.
+++
+++TODO
+++
+++Given the initial number of instances of each resource type and the definition of each user task,
+++your job is to run these tasks concurrently without deadlocks. To do this, you may prevent the
+++deadlock from happening or recover from deadlocked threads by implementing a smart
+++ResourceManager . Note that your implementation of the resource manager should not rely on
+++the implementation of the workload.
+++
+++If you use a prevention method, in cases where two tasks cannot run concurrently, the resource
+++manager should deny requests to a task, and the task that does not get the resource should wait
+++until it gets the requested resource.
+++If you use a detect-and-recover scheme, the resource manager should detect deadlocks and
+++recover by killing a thread. You can assume that all the threads are recoverable, as long as you
+++correctly reclaim all resources managed by the resource manager.
+++
+++Your method should maximize the concurrency level to shorten the overall execution time and
+++increase system utilization. That is, you should do your best to allow all possible concurrently
+++executable threads to run concurrently.
+++
+++You do not need to consider failure cases (i.e., a task fails in the middle because of user logic
+++errors). I.e., you can safely assume that all tasks, if not deadlocked, will finish correctly and return
+++the resource to the resource manager.
+++
+++Grading
+++
+++We will use a mixture of user tasks to test your scheduler for the following two requirements:
+++
+++   1. Correctness: all the tasks should eventually finish without deadlocks;
+++   2. Performance: we will consider the time it takes for all the tasks. It should be significantly
+++
+++      faster than running all tasks sequentially - and quite close to the theoretically best
+++      performance (i.e., an offline schedule that knows all the task behaviors previously and
+++      carefully schedule them so that no deadlock can happen).
+++
++\ No newline at end of file
++diff --git a/Thread-2/deadlock/WORKSPACE b/Thread-2/deadlock/WORKSPACE
++new file mode 100644
++index 0000000..6760453
++--- /dev/null
+++++ b/Thread-2/deadlock/WORKSPACE
++@@ -0,0 +1,15 @@
+++load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
+++
+++## google test dependency
+++http_archive(
+++  name = "gtest",
+++  urls = ["https://github.com.cnpmjs.org/google/googletest/archive/refs/tags/release-1.11.0.zip"],
+++  strip_prefix = "googletest-release-1.11.0",
+++)
+++## google benchmark dependency
+++http_archive(
+++  name = "gbench",
+++  urls = ["https://github.com.cnpmjs.org/google/benchmark/archive/refs/tags/v1.6.0.zip"],
+++  strip_prefix = "benchmark-1.6.0",
+++  sha256 = "3da225763533aa179af8438e994842be5ca72e4a7fed4d7976dc66c8c4502f58"
+++)
++diff --git a/Thread-2/deadlock/data/example.in b/Thread-2/deadlock/data/example.in
++new file mode 100644
++index 0000000..567adc2
++--- /dev/null
+++++ b/Thread-2/deadlock/data/example.in
++@@ -0,0 +1,3 @@
+++10 10 10 10
+++0 1 5 6 3 3 0
+++1 0 5 6 3 3 0
++\ No newline at end of file
++diff --git a/Thread-2/deadlock/data/example0.in b/Thread-2/deadlock/data/example0.in
++new file mode 100644
++index 0000000..06f7e0a
++--- /dev/null
+++++ b/Thread-2/deadlock/data/example0.in
++@@ -0,0 +1,5 @@
+++10 10 10 10
+++0 1 4 4 2 2 0
+++0 1 4 4 2 2 0
+++0 1 4 4 2 2 1
+++0 1 4 4 2 2 1
++\ No newline at end of file
++diff --git a/Thread-2/deadlock/lib/BUILD b/Thread-2/deadlock/lib/BUILD
++new file mode 100644
++index 0000000..6e8ae89
++--- /dev/null
+++++ b/Thread-2/deadlock/lib/BUILD
++@@ -0,0 +1,90 @@
+++##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
+++
+++cc_library(
+++    name = "utils_lib",
+++    srcs = [
+++        "utils.cc",
+++        ],
+++    hdrs = [
+++        "utils.h",
+++        ],
+++	visibility = [
+++		"//visibility:public",
+++	],
+++)
+++
+++cc_test(
+++  name = "utils_lib_test",
+++  size = "small",
+++  srcs = ["util_test.cc"],
+++  deps = [
+++      "@gtest//:gtest_main",
+++	  ":utils_lib",
+++      ],
+++)
+++
+++cc_library(
+++    name = "resource_manager_lib",
+++    srcs = [
+++        "resource_manager.cc",
+++        ],
+++    hdrs = [
+++        "resource_manager.h",
+++        ],
+++  deps = [
+++	  ":thread_manager_lib",
+++      ],
+++	visibility = [
+++		"//visibility:public",
+++	],
+++)
+++
+++cc_test(
+++  name = "resource_manager_lib_test",
+++  size = "small",
+++  srcs = ["resource_manager_test.cc"],
+++  deps = [
+++      "@gtest//:gtest_main",
+++	  ":resource_manager_lib",
+++      ],
+++)
+++
+++cc_library(
+++    name = "workload_lib",
+++    srcs = [
+++        "workload.cc",
+++        ],
+++    hdrs = [
+++        "workload.h",
+++        ],
+++    deps = [
+++        ":resource_manager_lib",
+++        ":utils_lib",
+++    ],
+++	visibility = [
+++		"//visibility:public",
+++	],
+++)
+++
+++cc_test(
+++  name = "workload_lib_test",
+++  size = "small",
+++  srcs = ["workload_test.cc"],
+++  deps = [
+++      "@gtest//:gtest_main",
+++	  ":workload_lib",
+++      ],
+++)
+++
+++cc_library(
+++    name = "thread_manager_lib",
+++    srcs = [
+++        "thread_manager.cc",
+++        ],
+++    hdrs = [
+++        "thread_manager.h",
+++        ],
+++	visibility = [
+++		"//visibility:public",
+++	],
+++)
++\ No newline at end of file
++diff --git a/Thread-2/deadlock/lib/resource_manager.cc b/Thread-2/deadlock/lib/resource_manager.cc
++new file mode 100644
++index 0000000..ec7f4a2
++--- /dev/null
+++++ b/Thread-2/deadlock/lib/resource_manager.cc
++@@ -0,0 +1,156 @@
+++#include <stdio.h>
+++#include <mutex>
+++#include <thread>
+++#include <chrono>
+++#include <condition_variable>
+++#include "resource_manager.h"
+++
+++namespace proj2 {
+++
+++int ResourceManager::request(RESOURCE r, int amount) {
+++
+++    //改成总共只需要一个锁！
+++
+++
+++    std::thread::id this_id = std::this_thread::get_id();
+++    printf("%7d request %d : %d\n", debug_thread_id[this_id], r, amount);
+++
+++    if (amount <= 0)  {
+++        printf("%7d request with WRONG parameter.\n",debug_thread_id[this_id]);
+++        return 1;
+++    }
+++    
+++    // std::unique_lock<std::mutex> lk(this->resource_mutex[r]);
+++    std::unique_lock<std::mutex> lk(data_lock);
+++    while (true) {
+++        if (this->resource_cv[r].wait_for( lk,  std::chrono::milliseconds(100), 
+++            // [this, r, amount] { return this->resource_amount[r] >= amount; }
+++            [this, r, amount]{return this->check_security(r, amount);}
+++        )) {
+++            break;
+++        } else {
+++            auto this_id = std::this_thread::get_id();
+++            /* HINT: If you choose to detect the deadlock and recover, implement your code here to kill and restart threads. Note that you should release this thread's resources properly. */
+++            if (tmgr->is_killed(this_id)) {
+++                return -1;
+++            }
+++        }
+++    }
+++    printf("%7d get %d : %d\n", debug_thread_id[this_id], r, amount);
+++    this->resource_amount[r] -= amount;
+++    this->allocation[this_id][r] += amount;
+++    // this->available[r] -= amount;
+++    // this->resource_mutex[r].unlock();
+++    this->data_lock.unlock();
+++    return 0;
+++}
+++
+++
+++void ResourceManager::release(RESOURCE r, int amount) {
+++    std::thread::id this_id = std::this_thread::get_id();
+++    printf("%7d release %d : %d\n", debug_thread_id[this_id], r, amount);
+++    if (amount <= 0)  return;
+++    // std::unique_lock<std::mutex> lk(this->resource_mutex[r]);
+++    std::unique_lock<std::mutex> lk(data_lock);
+++    this->resource_amount[r] += amount;
+++    this->allocation[this_id][r] -= amount;
+++    this->resource_cv[r].notify_all();
+++}
+++
+++bool ResourceManager::check_security(RESOURCE r, int amount) {
+++
+++    std::map<RESOURCE, int> available;
+++    std::map<std::thread::id, int*> cur_allocation;
+++    available = resource_amount;
+++    cur_allocation = allocation;
+++
+++    std::thread::id this_id = std::this_thread::get_id();
+++    printf("%7d check %d : %d (now available %d %d %d %d)\n", debug_thread_id[this_id], r, amount, available[GPU], available[MEMORY], available[DISK], available[NETWORK]);
+++    // for (int n = 0; n < threadList.size(); n++) {
+++    //     printf("%7d check (cur_alloc %d : %d %d %d %d)\n", (*(uint32_t*)&this_id), (*(uint32_t*)&threadList[n]), allocation[threadList[n]][GPU], allocation[threadList[n]][MEMORY], allocation[threadList[n]][DISK], allocation[threadList[n]][NETWORK]);
+++    // }
+++
+++    if (available[r] < amount) {
+++        // printf("FAILED more than available\n");
+++        return false;
+++    }
+++    if (cur_allocation[this_id][r] + amount > max[this_id][r]) {
+++        // printf("FAILED more than max\n");
+++        return false;
+++    }
+++    // printf("\n");
+++
+++    available[r] -= amount;
+++    cur_allocation[this_id][r] += amount;
+++
+++
+++    for (int i = 0; i < threadList.size(); i++)
+++        unfinished[threadList[i]] = true;
+++
+++    bool done = false;
+++    while(!done){
+++        done = true;
+++        for (int n = 0; n < threadList.size(); n++) {
+++            if (!unfinished[threadList[n]]) continue;
+++            bool is_available = true;
+++            for (int i = 0; i < 4; i++) {
+++                // printf("%7d check (%d,%d) : max:%d, alloc:%d, avail:%d\n", (*(uint32_t*)&this_id), (*(uint32_t*)&threadList[n]), i, max[threadList[n]][i], allocation[threadList[n]][i], available[(proj2::RESOURCE)i]);
+++                if (max[threadList[n]][i] - cur_allocation[threadList[n]][i] > available[(proj2::RESOURCE)i]) {
+++                    is_available = false;
+++                    break;
+++                }
+++            }
+++            // printf("%7d check %d : %s\n", (*(uint32_t*)&this_id), (*(uint32_t*)&threadList[n]), is_available?"True":"False");
+++            if (is_available) {
+++                done = false;
+++                for (int i = 0; i < 4; i++) {
+++                    available[(proj2::RESOURCE)i] += cur_allocation[threadList[n]][i];
+++                }
+++                unfinished[threadList[n]] = false;
+++            }
+++        }
+++    }
+++
+++    available[r] += amount;
+++    cur_allocation[this_id][r] -= amount;
+++
+++    for (int n = 0; n < threadList.size(); n++) {
+++        if (unfinished[threadList[n]]) {
+++            // printf("%7d check FAILED\n", (*(uint32_t*)&this_id));
+++            return false;
+++        }
+++    }
+++
+++    // printf("%7d check PASS\n", debug_thread_id[this_id]);
+++    return true;
+++}
+++
+++
+++
+++void ResourceManager::budget_claim(std::map<RESOURCE, int> budget) {
+++    // This function is called when some workload starts.
+++    // The workload will eventually consume all resources it claimss
+++    std::thread::id this_id = std::this_thread::get_id();
+++
+++    this->total_thread++;
+++    debug_thread_id[this_id] = total_thread;
+++    printf("%7d Total thread: %d\n",debug_thread_id[this_id], this->total_thread);
+++
+++    this->threadList.push_back(this_id);
+++
+++    this->max[this_id] = new int [4];
+++    this->allocation[this_id] = new int [4];
+++
+++    for (int i = 0; i < 4; i++) {
+++        this->max[this_id][i] = 0;
+++        this->allocation[this_id][i] = 0;
+++    }
+++
+++    std::map<RESOURCE, int>::iterator iter;
+++    for (iter = budget.begin(); iter != budget.end(); iter++) {
+++        this->max[this_id][iter->first] = iter->second;
+++        // printf("%7d claim %d : %d\n", debug_thread_id[this_id], iter->first, iter->second);
+++    }
+++}
+++
+++} // namespace: proj2
++diff --git a/Thread-2/deadlock/lib/resource_manager.h b/Thread-2/deadlock/lib/resource_manager.h
++new file mode 100644
++index 0000000..d284013
++--- /dev/null
+++++ b/Thread-2/deadlock/lib/resource_manager.h
++@@ -0,0 +1,53 @@
+++#ifndef DEADLOCK_LIB_RESOURCE_MANAGER_H_
+++#define DEADLOCK_LIB_RESOURCE_MANAGER_H_
+++
+++#include <map>
+++#include <vector>
+++#include <mutex>
+++#include <thread>
+++#include <condition_variable>
+++#include "thread_manager.h"
+++
+++namespace proj2 {
+++
+++enum RESOURCE {
+++    GPU = 0,
+++    MEMORY,
+++    DISK,
+++    NETWORK
+++};
+++
+++class ResourceManager {
+++public:
+++    ResourceManager(ThreadManager *t, std::map<RESOURCE, int> init_count): \
+++        resource_amount(init_count), tmgr(t), total_thread(0) {
+++            std::map<RESOURCE, int>::iterator iter;
+++            for (iter = resource_amount.begin(); iter != resource_amount.end(); iter++)
+++                printf("Resource %d: %d\n", iter->first, iter->second);
+++    }
+++    void budget_claim(std::map<RESOURCE, int> budget);
+++    int request(RESOURCE, int amount);
+++    void release(RESOURCE, int amount);
+++private:
+++    bool check_security(RESOURCE, int amount);
+++
+++    std::vector<std::thread::id> threadList;
+++    std::map<std::thread::id, bool> unfinished;
+++    std::map<RESOURCE, int> resource_amount;
+++    std::map<RESOURCE, std::mutex> resource_mutex;
+++    std::map<RESOURCE, std::condition_variable> resource_cv;
+++    ThreadManager *tmgr;
+++
+++    std::mutex data_lock;
+++    std::map<std::thread::id, int*> max;
+++    // std::map<RESOURCE, int> available;
+++    std::map<std::thread::id, int*> allocation;
+++
+++    std::map<std::thread::id, int> debug_thread_id;
+++
+++    int total_thread;
+++};
+++
+++}  // namespce: proj2
+++
+++#endif
++\ No newline at end of file
++diff --git a/Thread-2/deadlock/lib/thread_manager.cc b/Thread-2/deadlock/lib/thread_manager.cc
++new file mode 100644
++index 0000000..b6d4db2
++--- /dev/null
+++++ b/Thread-2/deadlock/lib/thread_manager.cc
++@@ -0,0 +1,24 @@
+++#include "thread_manager.h"
+++
+++
+++namespace proj2 {
+++
+++void ThreadManager::kill(std::thread::id id) {
+++    /* NOTE: this function does not really kill the thread. This only
+++             marks the thread as dead. See the implementation in
+++             `resource_manager.cc` and `workload.cc` for an example
+++             of how to return from a killed thread.
+++    */
+++    this->running_status[id] = false;
+++    this->running_threads[id]->detach();
+++}
+++
+++std::thread* ThreadManager::rerun(std::thread::id id) {
+++    if (this->running_status[id]) {
+++        // The thread is still running, call kill first or handle error here?
+++    }
+++    // The parameters are recorded in the lambda functions, just call it
+++    return this->new_thread([this, id] {this->functions[id]();});
+++}
+++
+++}
++\ No newline at end of file
++diff --git a/Thread-2/deadlock/lib/thread_manager.h b/Thread-2/deadlock/lib/thread_manager.h
++new file mode 100644
++index 0000000..f0859bd
++--- /dev/null
+++++ b/Thread-2/deadlock/lib/thread_manager.h
++@@ -0,0 +1,43 @@
+++#ifndef DEADLOCK_LIB_THREAD_MANAGER_H_
+++#define DEADLOCK_LIB_THREAD_MANAGER_H_
+++
+++#include <map>
+++#include <thread>
+++#include <functional>
+++
+++namespace proj2 {
+++
+++// NOTE: ThreadManager is not thread-safe.
+++class ThreadManager {
+++public:
+++    ThreadManager() {}
+++    void kill(std::thread::id);
+++    std::thread* rerun(std::thread::id);
+++    template <class Fn, class... Args>
+++    std::thread* new_thread(Fn&& fn, Args&&... args);
+++    bool is_killed(std::thread::id id) { return !running_status[id]; }
+++private:
+++    std::map<std::thread::id, bool> running_status;
+++    std::map<std::thread::id, std::thread*> running_threads;
+++    std::map<std::thread::id, std::function<void()> > functions; 
+++};
+++
+++template <class Fn, class... Args>
+++std::thread* ThreadManager::new_thread(Fn&& fn, Args&&... args) {
+++    std::thread* th = new std::thread(fn, args...);
+++
+++    // Record this thread
+++    this->running_status[th->get_id()] = true;
+++    // Record this thread's running arguments for restart
+++    this->functions[th->get_id()] = [fn, args...] { (fn)(args...); };
+++    // Record this thread's pointer for further detach
+++    this->running_threads[th->get_id()] = th;
+++
+++    // HINT: You can record more information of the thread here if needed.
+++
+++    return th;
+++}
+++
+++}  // namespce: proj2
+++
+++#endif
++\ No newline at end of file
++diff --git a/Thread-2/deadlock/lib/utils.cc b/Thread-2/deadlock/lib/utils.cc
++new file mode 100644
++index 0000000..f27558c
++--- /dev/null
+++++ b/Thread-2/deadlock/lib/utils.cc
++@@ -0,0 +1,36 @@
+++#include <chrono>
+++#include <thread>
+++#include <cstdlib>
+++#include <string>
+++#include <vector>
+++#include <fstream>
+++#include <sstream>
+++#include <iostream>
+++#include "utils.h"
+++
+++namespace proj2 {
+++
+++void a_slow_function(int seconds) {
+++    std::this_thread::sleep_for(std::chrono::seconds(seconds));
+++}
+++
+++int randint(int lower, int upper) {
+++    return rand() % (upper - lower + 1) + lower;
+++}
+++
+++bool randbit() {
+++    return rand() % 2 > 0;
+++}
+++
+++AutoTimer::AutoTimer(std::string name) : 
+++        m_name(std::move(name)),
+++        m_beg(std::chrono::high_resolution_clock::now()) { 
+++    }
+++
+++AutoTimer::~AutoTimer() {
+++    auto end = std::chrono::high_resolution_clock::now();
+++    auto dur = std::chrono::duration_cast<std::chrono::microseconds>(end - m_beg);
+++    std::cout << m_name << " : " << dur.count() << " usec\n";
+++}
+++
+++}
++diff --git a/Thread-2/deadlock/lib/utils.h b/Thread-2/deadlock/lib/utils.h
++new file mode 100644
++index 0000000..da0aea9
++--- /dev/null
+++++ b/Thread-2/deadlock/lib/utils.h
++@@ -0,0 +1,28 @@
+++#ifndef DEADLOCK_LIB_UTILS_H_
+++#define DEADLOCK_LIB_UTILS_H_
+++
+++#include <string>
+++#include <tuple>
+++#include <vector>
+++#include <chrono>
+++
+++namespace proj2 {
+++
+++void a_slow_function(int seconds);
+++
+++int randint(int lower, int upper);  // sample int from [lower, upper]
+++
+++bool randbit();
+++
+++class AutoTimer {
+++ public:
+++  AutoTimer(std::string name);
+++  ~AutoTimer(); 
+++ private:
+++  std::string m_name;
+++  std::chrono::time_point<std::chrono::high_resolution_clock> m_beg;
+++};
+++
+++}  // namespace: proj2
+++
+++#endif
++\ No newline at end of file
++diff --git a/Thread-2/deadlock/lib/workload.cc b/Thread-2/deadlock/lib/workload.cc
++new file mode 100644
++index 0000000..0c60b46
++--- /dev/null
+++++ b/Thread-2/deadlock/lib/workload.cc
++@@ -0,0 +1,42 @@
+++#include <map>
+++#include <thread>
+++#include <utility>
+++#include "workload.h"
+++#include "resource_manager.h"
+++#include "utils.h"
+++
+++namespace proj2 {
+++
+++void workload(ResourceManager *mgr,
+++              RESOURCE rsc1, RESOURCE rsc2,
+++              int rsc1_amount, int rsc2_amount,
+++              int sleep_time1, int sleep_time2,
+++              int reverse_order) {
+++    // Inform the resource manager about resource budget
+++    std::map<RESOURCE, int> budget = {
+++        {rsc1, rsc1_amount}, {rsc2, rsc2_amount}
+++    };
+++    mgr->budget_claim(budget);
+++    // Randomness
+++    if (reverse_order < 0) {
+++        reverse_order = randbit();
+++    }
+++    if (reverse_order > 0) {
+++        std::swap(rsc1, rsc2);
+++        std::swap(rsc1_amount, rsc2_amount);
+++    }
+++    sleep_time1 = sleep_time1 < 0? randint(MIN_RUNNING_TIME, MAX_RUNNING_TIME): sleep_time1;
+++    sleep_time2 = sleep_time2 < 0? randint(MIN_RUNNING_TIME, MAX_RUNNING_TIME): sleep_time2;
+++
+++    // Request resource -> running -> request another -> running -> release
+++    if (mgr->request(rsc1, rsc1_amount) < 0)  // I'm killed
+++        return;
+++    a_slow_function(sleep_time1);
+++    if (mgr->request(rsc2, rsc2_amount) < 0) // I'm killed
+++        return;
+++    a_slow_function(sleep_time2);
+++    mgr->release(rsc1, rsc1_amount);
+++    mgr->release(rsc2, rsc2_amount);
+++}
+++
+++} // namespace: proj2
++diff --git a/Thread-2/deadlock/lib/workload.h b/Thread-2/deadlock/lib/workload.h
++new file mode 100644
++index 0000000..ad8e6cf
++--- /dev/null
+++++ b/Thread-2/deadlock/lib/workload.h
++@@ -0,0 +1,25 @@
+++#ifndef DEADLOCK_LIB_WORKLOAD_H_
+++#define DEADLOCK_LIB_WORKLOAD_H_
+++
+++#include <thread>
+++#include "resource_manager.h"
+++
+++namespace proj2 {
+++
+++const int MIN_RUNNING_TIME = 3;
+++const int MAX_RUNNING_TIME = 10;
+++
+++void workload(
+++    ResourceManager *mgr,
+++    RESOURCE rsc1,
+++    RESOURCE rsc2,
+++    int rsc1_amount,
+++    int rsc2_amount,
+++    int sleep_time1 = -1,  // -1 for random
+++    int sleep_time2 = -1,   // -1 for random
+++    int reverse_order = -1  // -1 for random, 1 for true, 0 for false
+++);  // workload will call mgr->budget_claim when started
+++
+++}  // namespce: proj2
+++
+++#endif
++\ No newline at end of file
++diff --git a/Thread-2/deadlock/main.cc b/Thread-2/deadlock/main.cc
++new file mode 100644
++index 0000000..51e3d5e
++--- /dev/null
+++++ b/Thread-2/deadlock/main.cc
++@@ -0,0 +1,81 @@
+++#include <thread>
+++#include <vector>
+++#include <string>
+++#include <fstream>
+++#include <sstream>
+++#include "lib/utils.h"
+++#include "lib/workload.h"
+++#include "lib/thread_manager.h"
+++#include "lib/resource_manager.h"
+++
+++namespace proj2 {
+++
+++std::map<RESOURCE, int> read_resource_budget(std::ifstream &ifs) {
+++    int amount;
+++    std::string line;
+++    std::map<RESOURCE, int> budget;
+++    if(std::getline(ifs, line)) {
+++        std::stringstream ss(line);
+++        for (RESOURCE r = GPU; r <= NETWORK; r = RESOURCE(r + 1)) {
+++            ss >> amount;
+++            budget[r] = amount;
+++        }
+++    }
+++    return budget;
+++}
+++
+++using Instruction = std::vector<int>;
+++
+++std::vector<Instruction> read_instruction(std::ifstream &ifs) {
+++    int value;
+++    std::string line;
+++    std::vector<Instruction> result;
+++    while(std::getline(ifs, line)) {
+++        Instruction inst;
+++        std::stringstream ss(line);
+++        while(ss >> value) {
+++            inst.push_back(value);
+++        }
+++        result.push_back(inst);
+++    }
+++    return result;
+++}
+++
+++void run_instruction(ResourceManager *mgr, Instruction inst) {
+++    auto rsc1 = static_cast<RESOURCE>(inst[0]);
+++    auto rsc2 = static_cast<RESOURCE>(inst[1]);
+++    int st1 = inst.size() > 4? inst[4]: -1;
+++    int st2 = inst.size() > 5? inst[5]: -1;
+++    int ro = inst.size() > 6? inst[6]: -1;
+++    workload(mgr, rsc1, rsc2, inst[2], inst[3], st1, st2, ro);
+++}
+++
+++}
+++
+++int main(int argc, char *argv[]) {
+++    // Read the data file
+++    std::string datafile(argc > 1? argv[1]: "data/example.in");
+++    std::ifstream ifs(datafile);
+++    if (!ifs.is_open())
+++        return 1;
+++    proj2::ThreadManager *tmgr = new proj2::ThreadManager();
+++    proj2::ResourceManager *rmgr = \
+++        new proj2::ResourceManager(tmgr, proj2::read_resource_budget(ifs));
+++    std::vector<proj2::Instruction> instructions = proj2::read_instruction(ifs);
+++    ifs.close();
+++    proj2::AutoTimer timer("deadlock");
+++
+++    // Run the instructions in parallel without deadlocks
+++    std::vector<std::thread*> pool;
+++    for (auto inst: instructions) {
+++        pool.push_back(tmgr->new_thread(&proj2::run_instruction, rmgr, inst));
+++    }
+++
+++    for (auto t: pool) {
+++        auto id = t->get_id();
+++        if (tmgr->is_killed(id)) continue;
+++        t->join();
+++    }
+++
+++    return 0;
+++}
+diff --git a/Thread-2/boat/.gitignore b/Thread-2/boat/.gitignore
+new file mode 100644
+index 0000000..f16988d
+--- /dev/null
++++ b/Thread-2/boat/.gitignore
+@@ -0,0 +1,3 @@
++bazel-*
++.idea
++.vscode
+\ No newline at end of file
+diff --git a/Thread-2/boat/BUILD b/Thread-2/boat/BUILD
+index a213add..4114431 100644
+--- a/Thread-2/boat/BUILD
++++ b/Thread-2/boat/BUILD
+@@ -8,6 +8,12 @@ cc_library(
+     hdrs = [
+         "boatGrader.h",
+         ],
++    copts = [
++        # "/std:c++20",
++        # "/03",
++        "-std=c++2a",
++        "-O3"
++    ],
+ 	visibility = [
+ 		"//visibility:public",
+ 	],
+@@ -23,6 +29,12 @@ cc_library(
+         ],
+ 	deps = [
+         ":boatGrader_lib"
++    ],
++    copts = [
++        # "/std:c++20",
++        # "/03",
++        "-std=c++2a",
++        "-O3"
+     ],
+ 	visibility = [
+ 		"//visibility:public",
+@@ -38,9 +50,11 @@ cc_binary(
+         ":boatGrader_lib",
+ 		":boat_lib"
+     ],
+-	copts = [
+-        "-O3",
+-        "-std=c++11",
++    copts = [
++        # "/std:c++20",
++        # "/03",
++        "-std=c++2a",
++        "-O3"
+     ],
+ 	linkopts = [
+         "-pthread",
+diff --git a/Thread-2/boat/README.pdf b/Thread-2/boat/README.pdf
+new file mode 100644
+index 0000000..fc65db6
+--- /dev/null
++++ b/Thread-2/boat/README.pdf
+@@ -0,0 +1,71 @@
++Boat Question
++
++[Background] This question is adapted from previous years. It has nothing to do with the
++previous recommendation systems. Please treat it as a separate question letting you write a
++thread model for a real-world simulator.
++
++A number of Hawaiian adults and children are trying to get from Oahu to Molokai. Unfortunately,
++they have only one boat that can carry maximally two children or one adult (but not one child and
++one adult). The boat can be rowed back to Oahu, but it requires a pilot to do so.
++
++Requirements:
++
++Arrange a solution to transfer everyone from Oahu to Molokai. You may assume that there are at
++least two children.
++
++The method Boat.begin() should create a thread for each child or adult. We will refer to the thread
++that called Boat.begin() as the parent thread. Your mechanism cannot rely on knowing how many
++children or adults are present beforehand, although you are free to attempt to determine this
++among the threads (i.e. you can't pass the parameters adults and children in the method begin()
++to your threads, but you are free to have each thread increment shared variables to try and
++determine this value, if you wish).
++
++To show that the trip is properly synchronized, make calls to the appropriate BoatGrader
++methods every time someone crosses the channel. When a child pilots the boat from Oahu to
++Molokai, call ChildRowToMolokai. When a child rides as a passenger from Oahu to Molokai, call
++ChildRideToMolokai. Make sure that when a boat with two people on it crosses, the pilot calls the
++...RowTo... method before the passenger calls the ...RideTo... method.
++
++Your solution must have no busy waiting, and it must eventually end. The simulation ends when
++the parent thread finishes running. Note that it is not necessary to terminate all the created
++threads -- you can leave them blocked waiting for a condition variable. While you cannot pass the
++number of threads created to the threads representing adults and children, you can and probably
++will need to use this number in begin() in order to determine when all the adults and children are
++across and you can return.
++
++The idea behind this task is to use independent threads to solve a problem. You are to program
++the logic that a child or an adult would follow if that person were in this situation. For example, it
++is reasonable to allow a person to see how many children or adults are on the same island they
++are on. A person could see whether the boat is at their island. A person can know which island
++they are on. All of this information may be stored with each individual thread or in shared
++variables. So a counter that holds the number of children on Oahu would be allowed, so long as
++only threads that represent people on Oahu could access it.
++
++What is not allowed is a thread that executes a "top-down" strategy for the simulation. For
++example, you may not create threads for children and adults, then have a controller thread simply
++send commands to them through communicators. The threads must act as if they were
++individuals. This also means you cannot serialize for any reason. Every person must be thinking,
++and acting, independently at all times.
++
++Information that is not possible in the real world is also not allowed. For example, a child on
++Molokai cannot magically see all of the people on Oahu. That child may remember the number of
++people that he or she has seen leaving, but the child may not view people on Oahu as if it were
++there. (Assume that the people do not have any technology other than a boat!)
++You will reach a point in your simulation where the adult and child threads believe that everyone
++is across on Molokai. At this point, you are allowed to do one-way communication from the
++adult/child threads to begin() (the parent thread) in order to inform it that the simulation may be
++over. It may be possible, however, that your adult and child threads are incorrect. Your simulation
++must handle this case without requiring explicit or implicit communication from begin() (the
++parent thread) to the adult/child threads.
++
++ToDo:
++
++Implement a class Boat in the files boat.h and boat.cc exposing the member function Boat.begin().
++Your threads should call grading functions in boatGrader.h when making decisions. An example of
++interface usage in the final grading has been provided in main.cc.
++
++Grading:
++
++You will be graded by the correctness of your solution. Violation of design principles (refer to
++requirements) will result in demerit points.
++
+\ No newline at end of file
+diff --git a/Thread-2/boat/boat.cc b/Thread-2/boat/boat.cc
+index 7acb29b..9292d1b 100644
+--- a/Thread-2/boat/boat.cc
++++ b/Thread-2/boat/boat.cc
+@@ -1,14 +1,93 @@
+ #include <thread>
+ #include <vector>
++#include <semaphore>
+ #include <unistd.h>
+ 
+ #include "boat.h"
+ 
+ namespace proj2{
++int Oahu_child_counter = 0, Molokai_child_counter = 0, Oahu_adult_counter = 0;
++bool isPilot = true;
++bool isEnd = false;
++
++std::binary_semaphore ThreadStart(0);
++std::binary_semaphore ChildToMolokai(0);
++std::binary_semaphore AdultToMolokai(0);
++std::binary_semaphore ChildToOahu(0);
++std::binary_semaphore End(0);
+ 	
+ Boat::Boat(){
+ }
+ 
+-void Boat:: begin(int a, int b, BoatGrader *bg){
++void Boat:: ChildThread(BoatGrader* bg){
++    Oahu_child_counter++;
++    bg->initializeChild();
++    ThreadStart.release();
++
++    while(true){
++        ChildToMolokai.acquire();
++
++        Oahu_child_counter--;
++
++        if(isPilot){
++            isPilot = false;
++            bg->ChildRowToMolokai();
++            ChildToMolokai.release();
++        } else {
++            if (Oahu_child_counter == 0 && Oahu_adult_counter == 0) isEnd = true;
++
++            isPilot = true;
++            bg->ChildRideToMolokai();
++            Molokai_child_counter += 2;
++
++            if (isEnd) {
++                End.release();
++            } else {
++                ChildToOahu.release();
++            }
++        }
++
++        ChildToOahu.acquire();
++        Molokai_child_counter--;
++        bg->ChildRowToOahu();
++        Oahu_child_counter++;
++        
++        if (Oahu_child_counter >= 2) {
++            ChildToMolokai.release();
++        } else {
++            AdultToMolokai.release();
++        }
++    }
++}
++
++void Boat:: AdultThread(BoatGrader* bg){
++    Oahu_adult_counter++;
++    bg->initializeAdult();
++    ThreadStart.release();
++
++    AdultToMolokai.acquire();
++    Oahu_adult_counter--;
++    bg->AdultRowToMolokai();
++    ChildToOahu.release();
++}
++
++void Boat:: begin(int adults, int children, BoatGrader *bg){
++    std::vector<std::thread> threadList;
++    for (int i = 0; i < adults; i++) {
++        threadList.push_back(std::thread(proj2::Boat::AdultThread, bg));
++        ThreadStart.acquire();
++    }
++    for (int i = 0; i < children; i++) {
++        threadList.push_back(std::thread(proj2::Boat::ChildThread, bg));
++        ThreadStart.acquire();
++    }
++
++    ChildToMolokai.release();
++    // ChildToMolokai.release();
++    End.acquire();
++
++    for (int i = 0; i < threadList.size(); i++) {
++        threadList[i].detach();
++    }
+ } 
+ }
+\ No newline at end of file
+diff --git a/Thread-2/boat/boat.h b/Thread-2/boat/boat.h
+index efa1462..980296d 100644
+--- a/Thread-2/boat/boat.h
++++ b/Thread-2/boat/boat.h
+@@ -4,6 +4,7 @@
+ #include<stdio.h>
+ #include <thread>
+ #include <mutex>
++#include <semaphore>
+ #include <unistd.h>
+ 
+ #include "boatGrader.h"
+@@ -14,6 +15,8 @@ public:
+ 	Boat();
+     ~Boat(){};
+ 	void begin(int, int, BoatGrader*);
++	static void ChildThread(BoatGrader*);
++	static void AdultThread(BoatGrader*);
+ };
+ }
+ 
+diff --git a/Thread-2/boat/main.cc b/Thread-2/boat/main.cc
+index e049b73..f083114 100644
+--- a/Thread-2/boat/main.cc
++++ b/Thread-2/boat/main.cc
+@@ -9,7 +9,7 @@ int main(int argc, char *argv[]){
+         printf("\nUsage %s [adult num] [children num] \n", argv[0]);
+         exit(1);
+     }
+-    int adults = atoi(argv[1]);
++    int adults = atoi(argv[1]); // from string to int
+     int children = atoi(argv[2]);
+ 	proj2::BoatGrader* bg = new proj2::BoatGrader(adults,children); 
+ 	proj2::Boat* boat = new proj2::Boat();
+diff --git a/Thread-2/deadlock/.gitignore b/Thread-2/deadlock/.gitignore
+new file mode 100644
+index 0000000..f16988d
+--- /dev/null
++++ b/Thread-2/deadlock/.gitignore
+@@ -0,0 +1,3 @@
++bazel-*
++.idea
++.vscode
+\ No newline at end of file
+diff --git a/Thread-2/deadlock/README.md b/Thread-2/deadlock/README.md
+index 474559c..2fc5bd7 100644
+--- a/Thread-2/deadlock/README.md
++++ b/Thread-2/deadlock/README.md
+@@ -1,83 +1,32 @@
+ # Deadlock Prevention/Recovery
+ 
+-Real-world computation tasks usually require different resources to run, e.g.
+-GPUs, disk spaces for caching dataset, and network bandwidth for communication.
+-When multiple user tasks come with different resource requirements, deadlocks may
+-happen and thus the program makes no progress.
+-In this experiment, you should simulate a deadlock situation and either prevent
+-it or detect and recover from it (we give you an deadlock example in `data/example.in`).
++Real-world computation tasks usually require different resources to run, e.g. GPUs, disk spaces for caching dataset, and network bandwidth for communication. When multiple user tasks come with different resource requirements, deadlocks may happen and thus the program makes no progress. In this experiment, you should simulate a deadlock situation and either prevent it or detect and recover from it (we give you an deadlock example in `data/example.in`).
+ 
+ ## Codebase Introduction
+ 
+-We consider four types of resources: GPU, Network, Memory, Disk.
+-We provide a basic thread-safe implementation of a _resource manager_
+-`lib/resource_manager.h`, which holds a certain number of instances of each
+-resource type. The resource manager assigns the resources to each user task
+-(a thread with specified workload), and blocks the thread if it is in short
+-of that type of resource. A user task, before/after any resource use, should
+-call the resource manager with the `request` and `release` methods to access
+-the resource. Other than the resource requests that might cause a deadlock, 
+-these tasks are independent, and you do not need to consider other
+-synchronization among these tasks. (Of course, the resource manager itself
+-should be thread-safe).
++We consider four types of resources: GPU, Network, Memory, Disk. We provide a basic thread-safe implementation of a _resource manager_ `lib/resource_manager.h`, which holds a certain number of instances of each resource type. The resource manager assigns the resources to each user task (a thread with specified workload), and blocks the thread if it is in short of that type of resource. A user task, before/after any resource use, should call the resource manager with the `request` and `release` methods to access the resource. Other than the resource requests that might cause a deadlock,  these tasks are independent, and you do not need to consider other synchronization among these tasks. (Of course, the resource manager itself should be thread-safe).
+ 
+-We also provide a simple implementation of a _thread manager_ in
+-`lib/thread_manager.h`, with which you are able to create, kill, and restart
+-the threads that have been killed. You can add any information you needed to
+-the thread manager (see the hints in the code). Note that you should carefully
+-account for the resources held by the thread after you kill it.
++We also provide a simple implementation of a _thread manager_ in `lib/thread_manager.h`, with which you are able to create, kill, and restart the threads that have been killed. You can add any information you needed to the thread manager (see the hints in the code). Note that you should carefully account for the resources held by the thread after you kill it.
+ 
+-In `lib/workload.h`, we provide an example user task that requests two resource
+-types. Each user task requests two types of resources and uses them for an
+-extended time period. In this experiment, you should not rely on this `workload`
+-function, as we may adopt different implementation during testing. However, for
+-any workload type, the worker thread will call `ResourceManager::budget_claim`
+-to claim all resources it is going to use. The worker threads will eventually
+-use all the resources they claim. It may also release some resources during
+-processing. You are encouraged to add your own workload functions to test the
+-correctness of your implementation under different circumstances.
++In `lib/workload.h`, we provide an example user task that requests two resource types. Each user task requests two types of resources and uses them for an extended time period. In this experiment, you should not rely on this `workload` function, as we may adopt different implementation during testing. However, for any workload type, the worker thread will call `ResourceManager::budget_claim` to claim all resources it is going to use. The worker threads will eventually use all the resources they claim. It may also release some resources during processing. You are encouraged to add your own workload functions to test the correctness of your implementation under different circumstances.
+ 
+-In the example `main.cc` and `workload.h`, we provide a deadlock case example.
+-Each user task is represented as a sequence of integers (i.e., workload
+-arguments, see `main.cc` and `workload.h` for details). The order of different
+-tasks are arbitrary -- you can start them simultaneously or sequentially,
+-as long as they are thread-safe.
++In the example `main.cc` and `workload.h`, we provide a deadlock case example. Each user task is represented as a sequence of integers (i.e., workload arguments, see `main.cc` and `workload.h` for details). The order of different tasks are arbitrary -- you can start them simultaneously or sequentially, as long as they are thread-safe.
+ 
+ ## TODO
+ 
+-Given the initial number of instances of each resource type and the definition
+-of each user task, your job is to run these tasks concurrently without deadlocks.
+-To do this, you may prevent the deadlock from happening or recover from
+-deadlocked threads by implementing a smart `ResourceManager`. Note that your
+-implementation of the resource manager should not rely on the implementation of
+-the workload.
++Given the initial number of instances of each resource type and the definition of each user task, your job is to run these tasks concurrently without deadlocks. To do this, you may prevent the deadlock from happening or recover from deadlocked threads by implementing a smart `ResourceManager`. Note that your implementation of the resource manager should not rely on the implementation of the workload.
+ 
+-If you use a prevention method, in cases where two tasks cannot run
+-concurrently, the resource manager should deny requests to a task, and the task
+-that does not get the resource should wait until it gets the requested resource.  
++If you use a prevention method, in cases where two tasks cannot run concurrently, the resource manager should deny requests to a task, and the task that does not get the resource should wait until it gets the requested resource.  
+ 
+-If you use a detect-and-recover scheme, the resource manager should detect
+-deadlocks and recover by killing a thread. You can assume that all the threads
+-are recoverable, as long as you correctly reclaim all resources managed by the
+-resource manager.
++If you use a detect-and-recover scheme, the resource manager should detect deadlocks and recover by killing a thread. You can assume that all the threads are recoverable, as long as you correctly reclaim all resources managed by the resource manager.
+ 
+-Your method should maximize the concurrency level to shorten the overall
+-execution time and increase system utilization.  That is, you should do your
+-best to allow all possible concurrently executable threads to run concurrently.
++Your method should maximize the concurrency level to shorten the overall execution time and increase system utilization.  That is, you should do your best to allow all possible concurrently executable threads to run concurrently.
+ 
+-You do not need to consider failure cases (i.e., a task fails in the middle
+-because of user logic errors). I.e., you can safely assume that all tasks, if
+-not deadlocked, will finish correctly and return the resource to the resource
+-manager.
++You do not need to consider failure cases (i.e., a task fails in the middle because of user logic errors). I.e., you can safely assume that all tasks, if not deadlocked, will finish correctly and return the resource to the resource manager.
+ 
+ ## Grading
+ 
+-We will use a mixture of user tasks to test your scheduler for the following
+-two requirements:
++We will use a mixture of user tasks to test your scheduler for the following two requirements:
+ 
+ 1. Correctness: all the tasks should eventually finish without deadlocks;
+-2. Performance: we will consider the time it takes for all the tasks. It should
+-    be significantly faster than running all tasks sequentially - and quite
+-    close to the theoretically best performance (i.e., an offline schedule that
+-    knows all the task behaviors previously and carefully schedule them so that
+-    no deadlock can happen).  
++2. Performance: we will consider the time it takes for all the tasks. It should be significantly faster than running all tasks sequentially - and quite close to the theoretically best performance (i.e., an offline schedule that knows all the task behaviors previously and carefully schedule them so that no deadlock can happen).  
+diff --git a/Thread-2/deadlock/README.pdf b/Thread-2/deadlock/README.pdf
+new file mode 100644
+index 0000000..eb541f2
+--- /dev/null
++++ b/Thread-2/deadlock/README.pdf
+@@ -0,0 +1,73 @@
++Deadlock Prevention/Recovery
++
++Real-world computation tasks usually require different resources to run, e.g. GPUs, disk spaces
++for caching dataset, and network bandwidth for communication. When multiple user tasks come
++with different resource requirements, deadlocks may happen and thus the program makes no
++progress. In this experiment, you should simulate a deadlock situation and either prevent it or
++detect and recover from it (we give you an deadlock example in data/example.in ).
++
++Codebase Introduction
++
++We consider four types of resources: GPU, Network, Memory, Disk. We provide a basic thread-
++safe implementation of a resource manager lib/resource_manager.h , which holds a certain
++number of instances of each resource type. The resource manager assigns the resources to each
++user task (a thread with specified workload), and blocks the thread if it is in short of that type of
++resource. A user task, before/after any resource use, should call the resource manager with the
++request and release methods to access the resource. Other than the resource requests that
++might cause a deadlock, these tasks are independent, and you do not need to consider other
++synchronization among these tasks. (Of course, the resource manager itself should be thread-
++safe).
++
++We also provide a simple implementation of a thread manager in lib/thread_manager.h , with
++which you are able to create, kill, and restart the threads that have been killed. You can add any
++information you needed to the thread manager (see the hints in the code). Note that you should
++carefully account for the resources held by the thread after you kill it.
++
++In lib/workload.h , we provide an example user task that requests two resource types. Each
++user task requests two types of resources and uses them for an extended time period. In this
++experiment, you should not rely on this workload function, as we may adopt different
++implementation during testing. However, for any workload type, the worker thread will call
++ResourceManager::budget_claim to claim all resources it is going to use. The worker threads will
++eventually use all the resources they claim. It may also release some resources during processing.
++You are encouraged to add your own workload functions to test the correctness of your
++implementation under different circumstances.
++
++In the example main.cc and workload.h , we provide a deadlock case example. Each user task is
++represented as a sequence of integers (i.e., workload arguments, see main.cc and workload.h
++for details). The order of different tasks are arbitrary -- you can start them simultaneously or
++sequentially, as long as they are thread-safe.
++
++TODO
++
++Given the initial number of instances of each resource type and the definition of each user task,
++your job is to run these tasks concurrently without deadlocks. To do this, you may prevent the
++deadlock from happening or recover from deadlocked threads by implementing a smart
++ResourceManager . Note that your implementation of the resource manager should not rely on
++the implementation of the workload.
++
++If you use a prevention method, in cases where two tasks cannot run concurrently, the resource
++manager should deny requests to a task, and the task that does not get the resource should wait
++until it gets the requested resource.
++If you use a detect-and-recover scheme, the resource manager should detect deadlocks and
++recover by killing a thread. You can assume that all the threads are recoverable, as long as you
++correctly reclaim all resources managed by the resource manager.
++
++Your method should maximize the concurrency level to shorten the overall execution time and
++increase system utilization. That is, you should do your best to allow all possible concurrently
++executable threads to run concurrently.
++
++You do not need to consider failure cases (i.e., a task fails in the middle because of user logic
++errors). I.e., you can safely assume that all tasks, if not deadlocked, will finish correctly and return
++the resource to the resource manager.
++
++Grading
++
++We will use a mixture of user tasks to test your scheduler for the following two requirements:
++
++   1. Correctness: all the tasks should eventually finish without deadlocks;
++   2. Performance: we will consider the time it takes for all the tasks. It should be significantly
++
++      faster than running all tasks sequentially - and quite close to the theoretically best
++      performance (i.e., an offline schedule that knows all the task behaviors previously and
++      carefully schedule them so that no deadlock can happen).
++
+\ No newline at end of file
+diff --git a/Thread-2/deadlock/data/example0.in b/Thread-2/deadlock/data/example0.in
+new file mode 100644
+index 0000000..06f7e0a
+--- /dev/null
++++ b/Thread-2/deadlock/data/example0.in
+@@ -0,0 +1,5 @@
++10 10 10 10
++0 1 4 4 2 2 0
++0 1 4 4 2 2 0
++0 1 4 4 2 2 1
++0 1 4 4 2 2 1
+\ No newline at end of file
+diff --git a/Thread-2/deadlock/lib/resource_manager.cc b/Thread-2/deadlock/lib/resource_manager.cc
+index 2231181..ec7f4a2 100644
+--- a/Thread-2/deadlock/lib/resource_manager.cc
++++ b/Thread-2/deadlock/lib/resource_manager.cc
+@@ -1,3 +1,4 @@
++#include <stdio.h>
+ #include <mutex>
+ #include <thread>
+ #include <chrono>
+@@ -7,42 +8,149 @@
+ namespace proj2 {
+ 
+ int ResourceManager::request(RESOURCE r, int amount) {
+-    if (amount <= 0)  return 1;
+ 
+-    std::unique_lock<std::mutex> lk(this->resource_mutex[r]);
++    //改成总共只需要一个锁！
++
++
++    std::thread::id this_id = std::this_thread::get_id();
++    printf("%7d request %d : %d\n", debug_thread_id[this_id], r, amount);
++
++    if (amount <= 0)  {
++        printf("%7d request with WRONG parameter.\n",debug_thread_id[this_id]);
++        return 1;
++    }
++    
++    // std::unique_lock<std::mutex> lk(this->resource_mutex[r]);
++    std::unique_lock<std::mutex> lk(data_lock);
+     while (true) {
+-        if (this->resource_cv[r].wait_for(
+-            lk, std::chrono::milliseconds(100),
+-            [this, r, amount] { return this->resource_amount[r] >= amount; }
++        if (this->resource_cv[r].wait_for( lk,  std::chrono::milliseconds(100), 
++            // [this, r, amount] { return this->resource_amount[r] >= amount; }
++            [this, r, amount]{return this->check_security(r, amount);}
+         )) {
+             break;
+         } else {
+             auto this_id = std::this_thread::get_id();
+-            /* HINT: If you choose to detect the deadlock and recover,
+-                     implement your code here to kill and restart threads.
+-                     Note that you should release this thread's resources
+-                     properly.
+-             */
++            /* HINT: If you choose to detect the deadlock and recover, implement your code here to kill and restart threads. Note that you should release this thread's resources properly. */
+             if (tmgr->is_killed(this_id)) {
+                 return -1;
+             }
+         }
+     }
++    printf("%7d get %d : %d\n", debug_thread_id[this_id], r, amount);
+     this->resource_amount[r] -= amount;
+-    this->resource_mutex[r].unlock();
++    this->allocation[this_id][r] += amount;
++    // this->available[r] -= amount;
++    // this->resource_mutex[r].unlock();
++    this->data_lock.unlock();
+     return 0;
+ }
+ 
++
+ void ResourceManager::release(RESOURCE r, int amount) {
++    std::thread::id this_id = std::this_thread::get_id();
++    printf("%7d release %d : %d\n", debug_thread_id[this_id], r, amount);
+     if (amount <= 0)  return;
+-    std::unique_lock<std::mutex> lk(this->resource_mutex[r]);
++    // std::unique_lock<std::mutex> lk(this->resource_mutex[r]);
++    std::unique_lock<std::mutex> lk(data_lock);
+     this->resource_amount[r] += amount;
++    this->allocation[this_id][r] -= amount;
+     this->resource_cv[r].notify_all();
+ }
+ 
++bool ResourceManager::check_security(RESOURCE r, int amount) {
++
++    std::map<RESOURCE, int> available;
++    std::map<std::thread::id, int*> cur_allocation;
++    available = resource_amount;
++    cur_allocation = allocation;
++
++    std::thread::id this_id = std::this_thread::get_id();
++    printf("%7d check %d : %d (now available %d %d %d %d)\n", debug_thread_id[this_id], r, amount, available[GPU], available[MEMORY], available[DISK], available[NETWORK]);
++    // for (int n = 0; n < threadList.size(); n++) {
++    //     printf("%7d check (cur_alloc %d : %d %d %d %d)\n", (*(uint32_t*)&this_id), (*(uint32_t*)&threadList[n]), allocation[threadList[n]][GPU], allocation[threadList[n]][MEMORY], allocation[threadList[n]][DISK], allocation[threadList[n]][NETWORK]);
++    // }
++
++    if (available[r] < amount) {
++        // printf("FAILED more than available\n");
++        return false;
++    }
++    if (cur_allocation[this_id][r] + amount > max[this_id][r]) {
++        // printf("FAILED more than max\n");
++        return false;
++    }
++    // printf("\n");
++
++    available[r] -= amount;
++    cur_allocation[this_id][r] += amount;
++
++
++    for (int i = 0; i < threadList.size(); i++)
++        unfinished[threadList[i]] = true;
++
++    bool done = false;
++    while(!done){
++        done = true;
++        for (int n = 0; n < threadList.size(); n++) {
++            if (!unfinished[threadList[n]]) continue;
++            bool is_available = true;
++            for (int i = 0; i < 4; i++) {
++                // printf("%7d check (%d,%d) : max:%d, alloc:%d, avail:%d\n", (*(uint32_t*)&this_id), (*(uint32_t*)&threadList[n]), i, max[threadList[n]][i], allocation[threadList[n]][i], available[(proj2::RESOURCE)i]);
++                if (max[threadList[n]][i] - cur_allocation[threadList[n]][i] > available[(proj2::RESOURCE)i]) {
++                    is_available = false;
++                    break;
++                }
++            }
++            // printf("%7d check %d : %s\n", (*(uint32_t*)&this_id), (*(uint32_t*)&threadList[n]), is_available?"True":"False");
++            if (is_available) {
++                done = false;
++                for (int i = 0; i < 4; i++) {
++                    available[(proj2::RESOURCE)i] += cur_allocation[threadList[n]][i];
++                }
++                unfinished[threadList[n]] = false;
++            }
++        }
++    }
++
++    available[r] += amount;
++    cur_allocation[this_id][r] -= amount;
++
++    for (int n = 0; n < threadList.size(); n++) {
++        if (unfinished[threadList[n]]) {
++            // printf("%7d check FAILED\n", (*(uint32_t*)&this_id));
++            return false;
++        }
++    }
++
++    // printf("%7d check PASS\n", debug_thread_id[this_id]);
++    return true;
++}
++
++
++
+ void ResourceManager::budget_claim(std::map<RESOURCE, int> budget) {
+     // This function is called when some workload starts.
+-    // The workload will eventually consume all resources it claims
++    // The workload will eventually consume all resources it claimss
++    std::thread::id this_id = std::this_thread::get_id();
++
++    this->total_thread++;
++    debug_thread_id[this_id] = total_thread;
++    printf("%7d Total thread: %d\n",debug_thread_id[this_id], this->total_thread);
++
++    this->threadList.push_back(this_id);
++
++    this->max[this_id] = new int [4];
++    this->allocation[this_id] = new int [4];
++
++    for (int i = 0; i < 4; i++) {
++        this->max[this_id][i] = 0;
++        this->allocation[this_id][i] = 0;
++    }
++
++    std::map<RESOURCE, int>::iterator iter;
++    for (iter = budget.begin(); iter != budget.end(); iter++) {
++        this->max[this_id][iter->first] = iter->second;
++        // printf("%7d claim %d : %d\n", debug_thread_id[this_id], iter->first, iter->second);
++    }
+ }
+ 
+ } // namespace: proj2
+diff --git a/Thread-2/deadlock/lib/resource_manager.h b/Thread-2/deadlock/lib/resource_manager.h
+index 54b45a6..d284013 100644
+--- a/Thread-2/deadlock/lib/resource_manager.h
++++ b/Thread-2/deadlock/lib/resource_manager.h
+@@ -2,6 +2,7 @@
+ #define DEADLOCK_LIB_RESOURCE_MANAGER_H_
+ 
+ #include <map>
++#include <vector>
+ #include <mutex>
+ #include <thread>
+ #include <condition_variable>
+@@ -19,15 +20,32 @@ enum RESOURCE {
+ class ResourceManager {
+ public:
+     ResourceManager(ThreadManager *t, std::map<RESOURCE, int> init_count): \
+-        resource_amount(init_count), tmgr(t) {}
++        resource_amount(init_count), tmgr(t), total_thread(0) {
++            std::map<RESOURCE, int>::iterator iter;
++            for (iter = resource_amount.begin(); iter != resource_amount.end(); iter++)
++                printf("Resource %d: %d\n", iter->first, iter->second);
++    }
+     void budget_claim(std::map<RESOURCE, int> budget);
+     int request(RESOURCE, int amount);
+     void release(RESOURCE, int amount);
+ private:
++    bool check_security(RESOURCE, int amount);
++
++    std::vector<std::thread::id> threadList;
++    std::map<std::thread::id, bool> unfinished;
+     std::map<RESOURCE, int> resource_amount;
+     std::map<RESOURCE, std::mutex> resource_mutex;
+     std::map<RESOURCE, std::condition_variable> resource_cv;
+     ThreadManager *tmgr;
++
++    std::mutex data_lock;
++    std::map<std::thread::id, int*> max;
++    // std::map<RESOURCE, int> available;
++    std::map<std::thread::id, int*> allocation;
++
++    std::map<std::thread::id, int> debug_thread_id;
++
++    int total_thread;
+ };
+ 
+ }  // namespce: proj2
diff --git a/Memory/2019012327_2019012328.zip b/Memory/2019012327_2019012328.zip
new file mode 100644
index 0000000000000000000000000000000000000000..7d0b5c9e36298d2c50fa38fd1800e69b4daba5d4
GIT binary patch
literal 123410
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

literal 0
HcmV?d00001

diff --git a/Memory/Memory Management.pdf b/Memory/Memory Management.pdf
new file mode 100644
index 0000000000000000000000000000000000000000..d6483426612beb1fdf9368d5a274efb12cc2c10c
GIT binary patch
literal 64737
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

literal 0
HcmV?d00001

diff --git a/Memory/Report.md b/Memory/Report.md
new file mode 100644
index 0000000..06a333d
--- /dev/null
+++ b/Memory/Report.md
@@ -0,0 +1,57 @@
+# OS Project : Memory Report
+
+陈泰杰 2019012328 & 段昌宇 2019012327
+
+### Q1
+
+| Task ID | Replacement Policy | Result (ms) |
+| :-----: | :----------------: | :---------: |
+|    1    |        FIFO        |      5      |
+|    2    |        FIFO        |     425     |
+|    3    |        FIFO        |     979     |
+
+### Q2
+
+| Task ID | Replacement Policy | Result (ms) |
+| :-----: | :----------------: | :---------: |
+|    1    |       CLOCK        |      5      |
+|    2    |       CLOCK        |     420     |
+|    3    |       CLOCK        |     735     |
+
+- We see that FIFO and CLOCK Replacement Policy has almost the same result. One probably reason is that, the number of virtual pages is much larger than the number of physical page, thus the miss rate is rather high no matter replacement policy.
+- CLOCL Policy is slightly better than FIFO Policy in Task 3, which implies that the LRU-liked CLOCL Policy can provide a better data reuse in some cases, such as matrix multiplication.
+
+### Q3
+
+| Task ID | # of Physical Page | FIFO Result (ms) | CLOCK Result (ms) |
+| :-----: | :----------------: | :--------------: | :---------------: |
+|    2    |         1          |       400        |        396        |
+|    2    |         2          |       386        |        401        |
+|    2    |         3          |       459        |        396        |
+|    2    |         4          |       404        |        412        |
+|    2    |         5          |       410        |        402        |
+|    2    |         6          |       469        |        410        |
+|    2    |         7          |       407        |        404        |
+|    2    |         8          |       402        |        412        |
+|    2    |         9          |       438        |        406        |
+|    2    |         10         |       406        |        407        |
+
+- Either 1 or 10 physical pages is too small for Task 2. Thus, we find little change in the results
+
+### Q4
+
+| Task ID | # of Thread | CLOCK Result (ms) |
+| :-----: | :---------: | :---------------: |
+|    4    |     10      |        100        |
+|    4    |     11      |        102        |
+|    4    |     12      |        112        |
+|    4    |     13      |        182        |
+|    4    |     14      |        254        |
+|    4    |     15      |        492        |
+|    4    |     16      |        711        |
+|    4    |     17      |        645        |
+|    4    |     18      |       1467        |
+|    4    |     19      |       1300        |
+|    4    |     20      |       1332        |
+
+- As the number of threads increases, so does the time required. This is due not only to the increased total workload, but also to the system spending more time switching between threads.
\ No newline at end of file
diff --git a/Memory/Report.pdf b/Memory/Report.pdf
new file mode 100644
index 0000000000000000000000000000000000000000..6c4759fd997ee97fbadc386ffa0e9199de388643
GIT binary patch
literal 29986
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

literal 0
HcmV?d00001

diff --git a/Memory/lib/array_list.cc b/Memory/lib/array_list.cc
index a9abedb..4f2fbd1 100644
--- a/Memory/lib/array_list.cc
+++ b/Memory/lib/array_list.cc
@@ -4,12 +4,21 @@
 
 namespace proj3 {
     ArrayList::ArrayList(size_t sz, MemoryManager* cur_mma, int id){
+        mma = cur_mma;
+        size = sz;
+        array_id = id;
     }
     int ArrayList::Read (unsigned long idx){
         //read the value in the virtual index of 'idx' from mma's memory space
+        size_t virtual_page_id = idx/PageSize;
+        size_t offset = idx%PageSize;
+        return mma->ReadPage(array_id, virtual_page_id, offset);
     }
     void ArrayList::Write (unsigned long idx, int value){
         //write 'value' in the virtual index of 'idx' into mma's memory space
+        size_t virtual_page_id = idx/PageSize;
+        size_t offset = idx%PageSize;
+        mma->WritePage(array_id, virtual_page_id, offset, value);
     }
     ArrayList::~ArrayList(){
     }
diff --git a/Memory/lib/memory_manager.cc b/Memory/lib/memory_manager.cc
index 9b29245..cb7acd8 100644
--- a/Memory/lib/memory_manager.cc
+++ b/Memory/lib/memory_manager.cc
@@ -1,61 +1,318 @@
 #include "memory_manager.h"
 
 #include "array_list.h"
+#include <iostream>
+#include <fstream>
 
 namespace proj3 {
     PageFrame::PageFrame(){
     }
     int& PageFrame::operator[] (unsigned long idx){
         //each page should provide random access like an array
+        return mem[idx];
     }
     void PageFrame::WriteDisk(std::string filename) {
         // write page content into disk files
+        // printf("disk write : %s, mem[1] = %d\n", filename, mem[1]);
+        std::string path = "disk-";
+        auto fin = fopen((path + filename + ".txt").c_str(), "w");
+        for (int i = 0; i < PageSize; i++) {
+            fprintf(fin, "%d\n", mem[i]);
+        }
+        fclose(fin);
     }
     void PageFrame::ReadDisk(std::string filename) {
         // read page content from disk files
+        // printf("disk read : %s\n", filename);
+        std::string path = "disk-";
+        auto fin = fopen((path + filename + ".txt").c_str(), "r");
+        if (fin==NULL) {
+            // printf("page not find. clear.\n");
+            Clear();
+        } else {
+            for (int i = 0; i < PageSize; i++) {
+                fscanf(fin, "%d", &mem[i]);
+            }
+            fclose(fin);
+        }
+    }
+    void PageFrame::Clear(){
+        for (int i = 0; i < PageSize; i++) mem[i] = 0;
     }
 
     PageInfo::PageInfo(){
+        holder = -1;
+        virtual_page_id = -1;
+        used = 0;
     }
     void PageInfo::SetInfo(int cur_holder, int cur_vid){
         //modify the page states
         //you can add extra parameters if needed
+        holder = cur_holder;
+        virtual_page_id = cur_vid;
     }
     void PageInfo::ClearInfo(){
         //clear the page states
         //you can add extra parameters if needed
+        holder = -1;
+        virtual_page_id = -1;
     }
 
-    int PageInfo::GetHolder(){}
-    int PageInfo::GetVid(){}
+    int PageInfo::GetHolder(){ return holder; }
+    int PageInfo::GetVid(){ return virtual_page_id; }
     
 
     MemoryManager::MemoryManager(size_t sz){
         //mma should build its memory space with given space size
         //you should not allocate larger space than 'sz' (the number of physical pages) 
+        next_array_id = 0;
+        mma_sz = sz;
+        free_list = 0;
+        mem = new PageFrame*[sz];
+        page_info = new PageInfo*[sz];
+        for (int i = 0; i < sz; i++){
+            auto *a_page = new PageFrame();
+            auto *a_pageinfo = new PageInfo();
+            mem[i] = a_page;
+            page_info[i] = a_pageinfo;
+            // M_CLOCK[i] = 0;
+            CLOCK_HAND = 0;
+        }
     }
     MemoryManager::~MemoryManager(){
+        for (int i = 0; i < mma_sz; i++){
+            delete mem[i];
+            delete page_info[i];
+        }
+        delete[] mem;
+        delete[] page_info;
     }
-    void MemoryManager::PageOut(int physical_page_id){
+    void MemoryManager::PageOut(int physical_page_id, int holder = -2, int virtual_page_id = -2){
         //swap out the physical page with the indx of 'physical_page_id out' into a disk file
+        auto a_page = mem[physical_page_id];
+        auto a_info = page_info[physical_page_id];
+        int a_holder = (holder != -2) ? holder : a_info->GetHolder();
+        int a_vid = (virtual_page_id != -2) ? virtual_page_id : a_info->GetVid();
+        if(a_holder == -1) return;
+        // page_map[a_info->GetHolder()][a_info->GetVid()] = -1;
+        auto filename = std::to_string(a_holder) + "-" + std::to_string(a_vid);
+        // printf("page out   : id %d, vid %d, phy %d\n", a_holder, a_vid, physical_page_id);
+        a_page->WriteDisk(filename);
+        // a_info->ClearInfo();
     }
     void MemoryManager::PageIn(int array_id, int virtual_page_id, int physical_page_id){
         //swap the target page from the disk file into a physical page with the index of 'physical_page_id out'
+        // printf("page in    : id %d, vid %d, phy %d\n", array_id, virtual_page_id, physical_page_id);
+        auto filename = std::to_string(array_id) + "-" + std::to_string(virtual_page_id);
+        auto phy_Page = mem[physical_page_id];
+        phy_Page->ReadDisk(filename);
+        // page_info[physical_page_id]->SetInfo(array_id, virtual_page_id);
     }
-    void MemoryManager::PageReplace(int array_id, int virtual_page_id){
+    int MemoryManager::PageReplace(int array_id, int virtual_page_id){
         //implement your page replacement policy here
+        // int phy_page_id = ReplacementPolicyClock();
+        return ReplacementPolicyClock();
+        // PageOut(phy_page_id);
+        // PageIn(array_id, virtual_page_id, phy_page_id);
+
+        // page_map[page_info[phy_page_id]->GetHolder()][page_info[phy_page_id]->GetVid()] = -1;
+        // page_map[array_id][virtual_page_id] = phy_page_id;
+        // page_info[phy_page_id]->SetInfo(array_id, virtual_page_id);
     }
     int MemoryManager::ReadPage(int array_id, int virtual_page_id, int offset){
         // for arrayList of 'array_id', return the target value on its virtual space
+        // if(offset==0) printf("read page  : id %d, vid %d, offset %d\n", array_id, virtual_page_id, offset);
+        mma_lock.lock();
+        bool need_replace = false;
+        int old_holder, old_virtual_page_id;
+        int phy_page_id = page_map[array_id][virtual_page_id];
+        if (phy_page_id == -1) {
+            need_replace = true;
+            phy_page_id = PageReplace(array_id, virtual_page_id);
+            old_holder = page_info[phy_page_id]->GetHolder();
+            old_virtual_page_id = page_info[phy_page_id]->GetVid();
+            page_map[old_holder][old_virtual_page_id] = -1;
+            page_map[array_id][virtual_page_id] = phy_page_id;
+            page_info[phy_page_id]->SetInfo(array_id, virtual_page_id);
+            // PageOut(phy_page_id, old_holder, old_virtual_page_id);
+            // PageIn(array_id, virtual_page_id, phy_page_id);
+        }
+        phy_page_id = page_map[array_id][virtual_page_id];
+        page_info[phy_page_id]->used = 1;
+        page_info[phy_page_id]->lock();
+        // mma_lock.unlock();
+        if (need_replace){
+            // printf("page out lock %d-%d\n", old_holder, old_virtual_page_id);
+            if (old_holder != -1) {
+                page_mutex[old_holder][old_virtual_page_id]->lock();
+                // PageOut(phy_page_id, old_holder, old_virtual_page_id);
+                // page_mutex[old_holder][old_virtual_page_id]->unlock();
+            }
+            // printf("page in  lock %d-%d\n", array_id, virtual_page_id);
+            page_mutex[array_id][virtual_page_id]->lock();
+            mma_lock.unlock();
+            if (old_holder != -1) {
+                PageOut(phy_page_id, old_holder, old_virtual_page_id);
+                page_mutex[old_holder][old_virtual_page_id]->unlock();
+            }
+            PageIn(array_id, virtual_page_id, phy_page_id);
+            page_mutex[array_id][virtual_page_id]->unlock();
+        } else {
+            mma_lock.unlock();
+        }
+        PageFrame* page = mem[phy_page_id];
+        int result = (*page)[offset];
+        page_info[phy_page_id]->unlock();
+        return result;
     }
     void MemoryManager::WritePage(int array_id, int virtual_page_id, int offset, int value){
         // for arrayList of 'array_id', write 'value' into the target position on its virtual space
+        // if(offset==0) printf("write page : id %d, vid %d, offset %d, value %d\n", array_id, virtual_page_id, offset, value);
+        mma_lock.lock();
+        bool need_replace = false;
+        int old_holder, old_virtual_page_id;
+        int phy_page_id = page_map[array_id][virtual_page_id];
+        if (phy_page_id == -1) {
+            need_replace = true;
+            // printf("write page need replace\n");
+            phy_page_id = PageReplace(array_id, virtual_page_id);
+            old_holder = page_info[phy_page_id]->GetHolder();
+            old_virtual_page_id = page_info[phy_page_id]->GetVid();
+            page_map[old_holder][old_virtual_page_id] = -1;
+            page_map[array_id][virtual_page_id] = phy_page_id;
+            page_info[phy_page_id]->SetInfo(array_id, virtual_page_id);
+            // PageOut(phy_page_id, old_holder, old_virtual_page_id);
+            // PageIn(array_id, virtual_page_id, phy_page_id);
+        }
+        // phy_page_id = page_map[array_id][virtual_page_id];
+        page_info[phy_page_id]->used = 1;
+        page_info[phy_page_id]->lock();
+        // mma_lock.unlock();
+        if (need_replace){
+            // printf("page out lock %d-%d\n", old_holder, old_virtual_page_id);
+            if (old_holder != -1) {
+                page_mutex[old_holder][old_virtual_page_id]->lock();
+                // PageOut(phy_page_id, old_holder, old_virtual_page_id);
+                // page_mutex[old_holder][old_virtual_page_id]->unlock();
+            }
+            // printf("page in  lock %d-%d\n", array_id, virtual_page_id);
+            page_mutex[array_id][virtual_page_id]->lock();
+            mma_lock.unlock();
+            if (old_holder != -1) {
+                PageOut(phy_page_id, old_holder, old_virtual_page_id);
+                page_mutex[old_holder][old_virtual_page_id]->unlock();
+            }
+            PageIn(array_id, virtual_page_id, phy_page_id);
+            page_mutex[array_id][virtual_page_id]->unlock();
+        } else {
+            mma_lock.unlock();
+        }
+        PageFrame* page = mem[phy_page_id];
+        (*page)[offset] = value;
+        page_info[phy_page_id]->unlock();
+    }
+    void MemoryManager::ClearPage(int array_id, int virtual_page_id){
+        int phy_Page_idx = page_map[array_id][virtual_page_id];
+        if (phy_Page_idx != -1) {
+            page_info[phy_Page_idx]->lock();
+            // mem[phy_Page_idx]->Clear();
+            page_info[phy_Page_idx]->ClearInfo();
+            PageOut(phy_Page_idx, array_id, virtual_page_id);
+            page_info[phy_Page_idx]->unlock();
+        }
+
+        auto filename = std::to_string(array_id) + "-" + std::to_string(virtual_page_id);
+        std::string path = "disk-";
+        auto fin = fopen((path + filename + ".txt").c_str(), "w");
+        if (fin != NULL) {
+            page_mutex[array_id][virtual_page_id]->lock();
+            for (int i = 0; i < PageSize; i++) {
+                fprintf(fin, "%d\n", 0);
+            }
+            page_mutex[array_id][virtual_page_id]->unlock();
+        }
+        fclose(fin);
     }
     ArrayList* MemoryManager::Allocate(size_t sz){
         // when an application requires for memory, create an ArrayList and record mappings from its virtual memory space to the physical memory space
+        mma_lock.lock();
+        int num_page = sz / PageSize;
+        if (sz % PageSize != 0) num_page ++;
+        ArrayList *a_ArrayList = new ArrayList(sz, this, next_array_id);
+        std::map<int, int> a_trans_map;
+        std::map<int, std::mutex*> a_page_mutex;
+        for (int i = 0; i < num_page; i++) {
+            a_trans_map[i] = -1;
+            a_page_mutex[i] = new std::mutex;
+        }
+        page_map[next_array_id] = a_trans_map;
+        page_mutex[next_array_id] = a_page_mutex;
+        // printf("allocate : id %d : size %d\n", next_array_id, sz);
+        next_array_id++;
+        mma_lock.unlock();
+        return a_ArrayList;
+
     }
     void MemoryManager::Release(ArrayList* arr){
         // an application will call release() function when destroying its arrayList
         // release the virtual space of the arrayList and erase the corresponding mappings
+        mma_lock.lock();
+        int array_id = arr->array_id;
+        // printf("release : %d\n", arr->array_id);
+        for (int i = 0; i < page_map[array_id].size(); i++) {
+            ClearPage(array_id, i);
+            delete page_mutex[array_id][i];
+        }
+        mma_lock.unlock();
+    }
+
+    int MemoryManager::get_empty_page(){
+        int dict = free_list;
+        for (int i = 0; i < mma_sz; i++){
+            if(dict % 2 == 0) {
+                free_list += 1<<i;
+                return i;
+            }
+            dict >>= 1;
+        }
+        return -1;
+    }
+
+    int MemoryManager::ReplacementPolicyFIFO(){
+        int empty_id = get_empty_page();
+        int phy_page_id = 0;
+        if(empty_id != -1){
+            phy_page_id = empty_id;
+            Q_FIFO.push(empty_id);
+        } else {
+            phy_page_id = Q_FIFO.front();
+            // PageOut(phy_page_id);
+            Q_FIFO.pop();
+            Q_FIFO.push(phy_page_id);
+        }
+        return phy_page_id;
+    }
+
+    int MemoryManager::ReplacementPolicyClock(){
+        int empty_id = get_empty_page();
+        int phy_page_id = 0;
+        if(empty_id != -1){
+            phy_page_id = empty_id;
+        } else {
+            while(true){
+                CLOCK_HAND++;
+                if(CLOCK_HAND == mma_sz) CLOCK_HAND = 0;
+
+
+                if(page_info[CLOCK_HAND]->used == 0){
+                    phy_page_id = CLOCK_HAND;
+                    // PageOut(phy_page_id);
+                    break;
+                } else {
+                    page_info[CLOCK_HAND]->used = 0;
+                }
+            }
+        }
+        return phy_page_id;
     }
 } // namespce: proj3
\ No newline at end of file
diff --git a/Memory/lib/memory_manager.h b/Memory/lib/memory_manager.h
index 59fcd35..f05c881 100644
--- a/Memory/lib/memory_manager.h
+++ b/Memory/lib/memory_manager.h
@@ -3,6 +3,8 @@
 
 #include <assert.h>
 #include <map>
+#include <mutex>
+#include <queue>
 #include <string>
 #include <cstdlib>
 #include<cstdio>
@@ -17,6 +19,7 @@ public:
     int& operator[] (unsigned long);
     void WriteDisk(std::string);
     void ReadDisk(std::string);
+    void Clear();
 private:
     int mem[PageSize];
 };
@@ -28,9 +31,14 @@ public:
     void ClearInfo();
     int GetHolder();
     int GetVid();
+    void lock() { page_lock.lock(); }
+    void unlock() { page_lock.unlock(); }
+    int used;
+
 private:
     int holder; //page holder id (array_id)
     int virtual_page_id; // page virtual #
+    mutable std::mutex page_lock;
     /*add your extra states here freely for implementation*/
 
 };
@@ -43,21 +51,31 @@ public:
     MemoryManager(size_t);
     int ReadPage(int array_id, int virtual_page_id, int offset);
     void WritePage(int array_id, int virtual_page_id, int offset, int value);
+    void ClearPage(int array_id, int virtual_page_id);
     ArrayList* Allocate(size_t);
     void Release(ArrayList*);
     ~MemoryManager();
 private:
     std::map<int, std::map<int, int>> page_map; // // mapping from ArrayList's virtual page # to physical page #
+    std::map<int, std::map<int, std::mutex*>> page_mutex;
     PageFrame** mem; // physical pages, using 'PageFrame* mem' is also acceptable 
-    PageInfo* page_info; // physical page info
-    unsigned int* free_list;  // use bitmap implementation to identify and search for free pages
+    PageInfo** page_info; // physical page info
+    unsigned int free_list;  // use bitmap implementation to identify and search for free pages
     int next_array_id;
     size_t mma_sz;
     /*add your extra states here freely for implementation*/
 
     void PageIn(int array_id, int virtual_page_id, int physical_page_id);
-    void PageOut(int physical_page_id);
-    void PageReplace(int array_id, int virtual_page_id);
+    void PageOut(int physical_page_id, int holder, int virtual_page_id);
+    int PageReplace(int array_id, int virtual_page_id);
+
+    int get_empty_page();
+    int ReplacementPolicyFIFO();
+    int ReplacementPolicyClock();
+    std::queue<int> Q_FIFO;
+    int CLOCK_HAND;
+
+    std::mutex mma_lock;
 };
 
 }  // namespce: proj3
diff --git a/Memory/mma_test.cc b/Memory/mma_test.cc
index 7b47db0..f97b167 100644
--- a/Memory/mma_test.cc
+++ b/Memory/mma_test.cc
@@ -120,6 +120,26 @@ TEST_F(MMATest,task4){
     }
 }
 
+TEST_F(MMATest, task5) {
+    std::vector<std::thread*> pool1;
+    for(int i = 0; i<thread_num; i++) {
+        pool1.push_back(new std::thread(&workload, mma, workload_sz_4));
+    }
+
+    for (auto t: pool1) {
+        t->join();
+    }
+
+    std::vector<std::thread*> pool;
+    for(int i = 0; i<thread_num; i++) {
+        pool.push_back(new std::thread(&workload, mma, workload_sz_4));
+    }
+
+    for (auto t: pool) {
+        t->join();
+    }
+}
+
 } // namespace testing
 } // namespace proj3
 
diff --git a/README.md b/README.md
index 858054e..b3acba7 100644
--- a/README.md
+++ b/README.md
@@ -1,12 +1,12 @@
-# Operating System 2021 Fall
-
-This public repository holds the projects of this semester. See the `README`
-in each project for details.
-
-## Note
-
-1. submit方法调整：每组提交一个diff文件到网络学堂，diff文件命名方式为学号1_学号2.diff，diff的生成方式见文档
-2. 答疑文档：关于project 1的相关问题请大家更新到[共享文档](https://docs.qq.com/doc/DQkpGelpuTlZJaWRB)，我们会定期解答文档上的问题
-3. 关于slow_function：在最终版本的提交中请大家打开utils中的slow_function，以保证通过所有的library test。（IMPORTANT：在library test中因为没有打开slow_function导致测试fail将被扣除50%的项目分数）
-4. 关于item更新：为了简单我们在之前的实现中省略了对item的更新（实际系统中item和user的更新频率和方式都有差异），然而这样隐式地移除了大部分数据间依赖，因此我们要求在更新时同时更新user和item的embedding，最后输出两个EmbeddingHolder，先user后item（注意输出也需要thread-safety）。
+# Operating System 2021 Fall
+
+This public repository holds the projects of this semester. See the `README`
+in each project for details.
+
+## Note
+
+1. submit方法调整：每组提交一个diff文件到网络学堂，diff文件命名方式为学号1_学号2.diff，diff的生成方式见文档
+2. 答疑文档：关于project 1的相关问题请大家更新到[共享文档](https://docs.qq.com/doc/DQkpGelpuTlZJaWRB)，我们会定期解答文档上的问题
+3. 关于slow_function：在最终版本的提交中请大家打开utils中的slow_function，以保证通过所有的library test。（IMPORTANT：在library test中因为没有打开slow_function导致测试fail将被扣除50%的项目分数）
+4. 关于item更新：为了简单我们在之前的实现中省略了对item的更新（实际系统中item和user的更新频率和方式都有差异），然而这样隐式地移除了大部分数据间依赖，因此我们要求在更新时同时更新user和item的embedding，最后输出两个EmbeddingHolder，先user后item（注意输出也需要thread-safety）。
 5. 关于大家在project 1中问的比较多的问题，我们这里统一回复一下：一是前两题的正确性，由于q1 q2指令之间没有执行依赖，因此最后的答案可能有多种，大家只要在保证thread safty的前提下得出任意一种答案即可通过测试；二是关于efficiency，我们会统计所有人的完成时间，排名后30%且慢于我们的参考实现（基础的并行实现，运行时间不公开）的提交我们会酌情扣分；三是关于test case，我们在这个project中不会提供auto test和benchmark，请大家自行设计case来验证代码的正确性
\ No newline at end of file
diff --git a/RPC/.bazeliskrc b/RPC/.bazeliskrc
new file mode 100644
index 0000000..f81d3f7
--- /dev/null
+++ b/RPC/.bazeliskrc
@@ -0,0 +1 @@
+USE_BAZEL_VERSION=4.2.1
diff --git a/RPC/.gitignore b/RPC/.gitignore
new file mode 100644
index 0000000..314f02b
--- /dev/null
+++ b/RPC/.gitignore
@@ -0,0 +1 @@
+*.txt
\ No newline at end of file
diff --git a/RPC/BUILD b/RPC/BUILD
new file mode 100644
index 0000000..865d44b
--- /dev/null
+++ b/RPC/BUILD
@@ -0,0 +1,20 @@
+##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
+
+
+cc_test(
+    name = "mma_test",
+    size = "small",
+    srcs = ["mma_test.cc"],
+    deps = [
+        "@gtest//:gtest_main",
+        "@com_github_grpc_grpc//:grpc++",
+        "//lib:mma_client_lib",
+        "//lib:mma_server_lib",
+        ],
+    copts = [
+        "-std=c++11",
+    ],
+    linkopts = [
+        "-pthread",
+    ]
+)
\ No newline at end of file
diff --git a/RPC/README.md b/RPC/README.md
new file mode 100644
index 0000000..3880d1e
--- /dev/null
+++ b/RPC/README.md
@@ -0,0 +1,55 @@
+# Remote Memory Management Service
+
+In this project, you will upgrade your memory manager from Project 3 and turn it into an in-memory storage server.   The server allows multiple clients to access it using RPC.  Specifically, we will use **grpc**, an open-source RPC system developed by Google. 
+
+The project's main goal is to let you get some hands-on experience on RPC.  You will learn how the framework works in general and similarities/differences from local procedure calls. 
+
+The server you develop will allow clients to create a "remote ArrayList", and use it using the same function calls as the local array in your project 3. 
+
+Your RPC client can allocate, access, and release memory from applications as requests to the server (i.e., manage `ArrayList` like `mma` in project 3); Moreover, there should be an RPC server holding the `mma` to receive and process these requests. 
+
+gRPC (gRPC Remote Procedure Calls), also known as Google Remote Procedure Call, is an open-source remote procedure call (RPC) system initially developed at Google. You can find a basic tutorial of grpc at 
+
+https://grpc.io/docs/languages/cpp/quickstart/ . 
+
+You can also download source codes from 
+https://github.com/grpc/grpc 
+for more details about grpc. 
+
+In this project, we will build and utilize grpc source codes by Bazel.  We have already added the necessary dependencies in your WORKSPACE file.  You do not need to change them.  Note that it might take a while to download all these dependencies the first time you build the project, but subsequent builds will be fast. 
+
+We can define a gRPC service (and its message structure) in a `.proto` file and automatically generate client and server codes. We use the proto3 version of the protocol buffers language in this project. You can find out more about protobuf at 
+
+https://developers.google.com/protocol-buffers/docs/proto3 
+
+and learn how to generate codes from a `.proto` file in 
+
+https://developers.google.com/protocol-buffers/docs/reference/cpp-generated 
+
+In this project, you do not have to manually generate and compile the protobuf's, as the Bazel rules will build them for you.  We have provided a  HelloWorld demo in the `demo` folder to help you understand the Bazel `BUILD` rules for a protobuf application.
+
+## Codebase Introduction
+
+The basic workload in this project is similar to the ones in project 3. The only difference is that the application `Allocate` and `Free` an `ArrayList` via your gRPC client instead of the `mma` directly. Similarly, an `ArrayList` should `read` / `write` its corresponding memory via the client. On the other hand, each test will set up a gRPC server initially listening to the local port 50051. This server will create a `mma` instance in its lifetime to manage local memory space. Your gRPC server should support two basic management interfaces: `RunServerUL` for server setup and `ShutdownServer` to close the server. We provide a basic skeleton of client/server in `mma_client.h` and `mma_server.h`. You can find more interfaces utilization examples in `mma_test.cc`.
+
+
+## TODO
+
+## Q1
+
+The first four tests in `mma_test.cc` are the same as in Project 3. Implement your gRPC client/server to pass these four tests. The page replacement algorithm should be the clock algorithm. First, you can copy your `mma` codes from project 3 to the `lib/`folder. Adjust some interfaces in your original implementation to adapt the `MemoryManager` and `ArrayList` implementation to RPC. To generate gRPC client/server codes, you should define your memory management service in `proto/mma.proto`. Your implementation should be thread-safe and support concurrency.  
+
+## Q2
+
+When the virtual memory space in use is far larger than the physical memory space of `mma`, thrashing happens and hurts system performance. To avoid thrashing, the memory management service should limit the virtual memory size and reject new incoming `Allocate` requests when existing virtual memory usage reaches the limits. Correspondingly, the client should wait and retry if its `Allocate` request fails until the required memory segment has been registered in the server. Implement this optimization and support an additional management interface: `RunServerL` for server setup with a given threshold of maximum virtual memory size. Pass the fifth test and observe its differences with `task4`.
+
+
+
+## Grading
+
+We will use extra workloads to test your codes, so your implementation should not rely on `mma_test.cc`. We grade with the following three requirements:
+
+1. Correctness: pass all tests in  `mma_test.cc` and extra tests;
+2. Performance: we will consider the time it takes to pass the tests. Your implementation should not be order-wisely slower than our basic benchmark.  
+
+We should apply your diff file to commit `fc85448` directly; otherwise, the TAs will not grade it. 
diff --git a/RPC/WORKSPACE b/RPC/WORKSPACE
new file mode 100644
index 0000000..5a1e506
--- /dev/null
+++ b/RPC/WORKSPACE
@@ -0,0 +1,43 @@
+load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
+
+## google test dependency
+http_archive(
+  name = "gtest",
+  urls = ["https://github.com.cnpmjs.org/google/googletest/archive/refs/tags/release-1.11.0.zip"],
+  strip_prefix = "googletest-release-1.11.0",
+)
+## google benchmark dependency
+http_archive(
+  name = "gbench",
+  urls = ["https://github.com.cnpmjs.org/google/benchmark/archive/refs/tags/v1.6.0.zip"],
+  strip_prefix = "benchmark-1.6.0",
+  sha256 = "3da225763533aa179af8438e994842be5ca72e4a7fed4d7976dc66c8c4502f58"
+)
+## protobuf dependency
+http_archive(
+    name = "rules_proto",
+    sha256 = "66bfdf8782796239d3875d37e7de19b1d94301e8972b3cbd2446b332429b4df1",
+    strip_prefix = "rules_proto-4.0.0",
+    urls = [
+        "https://mirror.bazel.build/github.com/bazelbuild/rules_proto/archive/refs/tags/4.0.0.tar.gz",
+        "https://github.com/bazelbuild/rules_proto/archive/refs/tags/4.0.0.tar.gz",
+    ],
+)
+load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies", "rules_proto_toolchains")
+rules_proto_dependencies()
+rules_proto_toolchains()
+
+
+### gRPC Rules for Bazel
+http_archive(
+    name = "com_github_grpc_grpc",
+    urls = [
+        "https://github.com.cnpmjs.org/grpc/grpc/archive/11f00485aa5ad422cfe2d9d90589158f46954101.tar.gz",
+    ],
+    strip_prefix = "grpc-11f00485aa5ad422cfe2d9d90589158f46954101",
+)
+load("@com_github_grpc_grpc//bazel:grpc_deps.bzl", "grpc_deps")
+grpc_deps()
+# Not mentioned in official docs... mentioned here https://github.com/grpc/grpc/issues/20511
+load("@com_github_grpc_grpc//bazel:grpc_extra_deps.bzl", "grpc_extra_deps")
+grpc_extra_deps()
\ No newline at end of file
diff --git a/RPC/demo/.bazeliskrc b/RPC/demo/.bazeliskrc
new file mode 100644
index 0000000..f81d3f7
--- /dev/null
+++ b/RPC/demo/.bazeliskrc
@@ -0,0 +1 @@
+USE_BAZEL_VERSION=4.2.1
diff --git a/RPC/demo/BUILD b/RPC/demo/BUILD
new file mode 100644
index 0000000..a53d3ed
--- /dev/null
+++ b/RPC/demo/BUILD
@@ -0,0 +1,21 @@
+cc_binary(
+    name = "greeter_client",
+    srcs = ["greeter_client.cc"],
+    defines = ["BAZEL_BUILD"],
+    deps = [
+        "@com_github_grpc_grpc//:grpc++",
+        "@com_github_grpc_grpc//:grpc++_reflection",
+        "//demo/proto:hw_grpc",
+    ],
+)
+
+cc_binary(
+    name = "greeter_server",
+    srcs = ["greeter_server.cc"],
+    defines = ["BAZEL_BUILD"],
+    deps = [
+        "@com_github_grpc_grpc//:grpc++",
+        "@com_github_grpc_grpc//:grpc++_reflection",
+        "//demo/proto:hw_grpc",
+    ],
+)
\ No newline at end of file
diff --git a/RPC/demo/WORKSPACE b/RPC/demo/WORKSPACE
new file mode 100644
index 0000000..5a1e506
--- /dev/null
+++ b/RPC/demo/WORKSPACE
@@ -0,0 +1,43 @@
+load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
+
+## google test dependency
+http_archive(
+  name = "gtest",
+  urls = ["https://github.com.cnpmjs.org/google/googletest/archive/refs/tags/release-1.11.0.zip"],
+  strip_prefix = "googletest-release-1.11.0",
+)
+## google benchmark dependency
+http_archive(
+  name = "gbench",
+  urls = ["https://github.com.cnpmjs.org/google/benchmark/archive/refs/tags/v1.6.0.zip"],
+  strip_prefix = "benchmark-1.6.0",
+  sha256 = "3da225763533aa179af8438e994842be5ca72e4a7fed4d7976dc66c8c4502f58"
+)
+## protobuf dependency
+http_archive(
+    name = "rules_proto",
+    sha256 = "66bfdf8782796239d3875d37e7de19b1d94301e8972b3cbd2446b332429b4df1",
+    strip_prefix = "rules_proto-4.0.0",
+    urls = [
+        "https://mirror.bazel.build/github.com/bazelbuild/rules_proto/archive/refs/tags/4.0.0.tar.gz",
+        "https://github.com/bazelbuild/rules_proto/archive/refs/tags/4.0.0.tar.gz",
+    ],
+)
+load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies", "rules_proto_toolchains")
+rules_proto_dependencies()
+rules_proto_toolchains()
+
+
+### gRPC Rules for Bazel
+http_archive(
+    name = "com_github_grpc_grpc",
+    urls = [
+        "https://github.com.cnpmjs.org/grpc/grpc/archive/11f00485aa5ad422cfe2d9d90589158f46954101.tar.gz",
+    ],
+    strip_prefix = "grpc-11f00485aa5ad422cfe2d9d90589158f46954101",
+)
+load("@com_github_grpc_grpc//bazel:grpc_deps.bzl", "grpc_deps")
+grpc_deps()
+# Not mentioned in official docs... mentioned here https://github.com/grpc/grpc/issues/20511
+load("@com_github_grpc_grpc//bazel:grpc_extra_deps.bzl", "grpc_extra_deps")
+grpc_extra_deps()
\ No newline at end of file
diff --git a/RPC/demo/greeter_client.cc b/RPC/demo/greeter_client.cc
new file mode 100644
index 0000000..06b12ff
--- /dev/null
+++ b/RPC/demo/greeter_client.cc
@@ -0,0 +1,108 @@
+/*
+ *
+ * Copyright 2015 gRPC authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+#include <iostream>
+#include <memory>
+#include <string>
+
+#include <grpcpp/grpcpp.h>
+
+#ifdef BAZEL_BUILD
+#include "demo/proto/helloworld.grpc.pb.h"
+#else
+#include "helloworld.grpc.pb.h"
+#endif
+
+using grpc::Channel;
+using grpc::ClientContext;
+using grpc::Status;
+using helloworld::Greeter;
+using helloworld::HelloReply;
+using helloworld::HelloRequest;
+
+class GreeterClient {
+ public:
+  GreeterClient(std::shared_ptr<Channel> channel)
+      : stub_(Greeter::NewStub(channel)) {}
+
+  // Assembles the client's payload, sends it and presents the response back
+  // from the server.
+  std::string SayHello(const std::string& user) {
+    // Data we are sending to the server.
+    HelloRequest request;
+    request.set_name(user);
+
+    // Container for the data we expect from the server.
+    HelloReply reply;
+
+    // Context for the client. It could be used to convey extra information to
+    // the server and/or tweak certain RPC behaviors.
+    ClientContext context;
+
+    // The actual RPC.
+    Status status = stub_->SayHello(&context, request, &reply);
+
+    // Act upon its status.
+    if (status.ok()) {
+      return reply.message();
+    } else {
+      std::cout << status.error_code() << ": " << status.error_message()
+                << std::endl;
+      return "RPC failed";
+    }
+  }
+
+ private:
+  std::unique_ptr<Greeter::Stub> stub_;
+};
+
+int main(int argc, char** argv) {
+  // Instantiate the client. It requires a channel, out of which the actual RPCs
+  // are created. This channel models a connection to an endpoint specified by
+  // the argument "--target=" which is the only expected argument.
+  // We indicate that the channel isn't authenticated (use of
+  // InsecureChannelCredentials()).
+  std::string target_str;
+  std::string arg_str("--target");
+  if (argc > 1) {
+    std::string arg_val = argv[1];
+    size_t start_pos = arg_val.find(arg_str);
+    if (start_pos != std::string::npos) {
+      start_pos += arg_str.size();
+      if (arg_val[start_pos] == '=') {
+        target_str = arg_val.substr(start_pos + 1);
+      } else {
+        std::cout << "The only correct argument syntax is --target="
+                  << std::endl;
+        return 0;
+      }
+    } else {
+      std::cout << "The only acceptable argument is --target=" << std::endl;
+      return 0;
+    }
+  } else {
+    target_str = "localhost:50051";
+  }
+  GreeterClient greeter(
+      grpc::CreateChannel(target_str, grpc::InsecureChannelCredentials()));
+  std::string user("world");
+  std::string reply = greeter.SayHello(user);
+  std::cout << "Greeter received: " << reply << std::endl;
+
+  return 0;
+}
diff --git a/RPC/demo/greeter_server.cc b/RPC/demo/greeter_server.cc
new file mode 100644
index 0000000..91f6b57
--- /dev/null
+++ b/RPC/demo/greeter_server.cc
@@ -0,0 +1,76 @@
+/*
+ *
+ * Copyright 2015 gRPC authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+#include <iostream>
+#include <memory>
+#include <string>
+
+#include <grpcpp/ext/proto_server_reflection_plugin.h>
+#include <grpcpp/grpcpp.h>
+#include <grpcpp/health_check_service_interface.h>
+
+#ifdef BAZEL_BUILD
+#include "demo/proto/helloworld.grpc.pb.h"
+#else
+#include "helloworld.grpc.pb.h"
+#endif
+
+using grpc::Server;
+using grpc::ServerBuilder;
+using grpc::ServerContext;
+using grpc::Status;
+using helloworld::Greeter;
+using helloworld::HelloReply;
+using helloworld::HelloRequest;
+
+// Logic and data behind the server's behavior.
+class GreeterServiceImpl final : public Greeter::Service {
+  Status SayHello(ServerContext* context, const HelloRequest* request,
+                  HelloReply* reply) override {
+    std::string prefix("Hello ");
+    reply->set_message(prefix + request->name());
+    return Status::OK;
+  }
+};
+
+void RunServer() {
+  std::string server_address("0.0.0.0:50051");
+  GreeterServiceImpl service;
+
+  grpc::EnableDefaultHealthCheckService(true);
+  grpc::reflection::InitProtoReflectionServerBuilderPlugin();
+  ServerBuilder builder;
+  // Listen on the given address without any authentication mechanism.
+  builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());
+  // Register "service" as the instance through which we'll communicate with
+  // clients. In this case it corresponds to an *synchronous* service.
+  builder.RegisterService(&service);
+  // Finally assemble the server.
+  std::unique_ptr<Server> server(builder.BuildAndStart());
+  std::cout << "Server listening on " << server_address << std::endl;
+
+  // Wait for the server to shutdown. Note that some other thread must be
+  // responsible for shutting down the server for this call to ever return.
+  server->Wait();
+}
+
+int main(int argc, char** argv) {
+  RunServer();
+
+  return 0;
+}
diff --git a/RPC/demo/proto/BUILD b/RPC/demo/proto/BUILD
new file mode 100644
index 0000000..4b95955
--- /dev/null
+++ b/RPC/demo/proto/BUILD
@@ -0,0 +1,23 @@
+package(default_visibility = ["//visibility:public"])
+
+load("@rules_proto//proto:defs.bzl", "proto_library")
+load("@com_github_grpc_grpc//bazel:cc_grpc_library.bzl", "cc_grpc_library")
+
+
+
+cc_grpc_library(
+    name = "hw_grpc",
+    srcs = [":hw_proto"],
+    grpc_only = True,
+    deps = [":hw_cc_proto"],
+)
+ 
+cc_proto_library(
+    name = "hw_cc_proto",
+    deps = [":hw_proto"],
+)
+ 
+proto_library(
+    name = "hw_proto",
+	srcs = ["helloworld.proto"],
+)
\ No newline at end of file
diff --git a/RPC/demo/proto/helloworld.proto b/RPC/demo/proto/helloworld.proto
new file mode 100644
index 0000000..be878ce
--- /dev/null
+++ b/RPC/demo/proto/helloworld.proto
@@ -0,0 +1,38 @@
+// Copyright 2015 gRPC authors.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+syntax = "proto3";
+
+option java_multiple_files = true;
+option java_package = "io.grpc.examples.helloworld";
+option java_outer_classname = "HelloWorldProto";
+option objc_class_prefix = "HLW";
+
+package helloworld;
+
+// The greeting service definition.
+service Greeter {
+  // Sends a greeting
+  rpc SayHello (HelloRequest) returns (HelloReply) {}
+}
+
+// The request message containing the user's name.
+message HelloRequest {
+  string name = 1;
+}
+
+// The response message containing the greetings
+message HelloReply {
+  string message = 1;
+}
diff --git a/RPC/lib/BUILD b/RPC/lib/BUILD
new file mode 100644
index 0000000..9f9323f
--- /dev/null
+++ b/RPC/lib/BUILD
@@ -0,0 +1,48 @@
+package(default_visibility = ["//visibility:public"])
+
+cc_library(
+    name = "mma_client_lib",
+    srcs = [
+        "mma_client.cc",
+        "array_list.cc",
+    ],
+    hdrs = [
+        "mma_client.h",
+        "array_list.h",
+        ],
+    defines = ["BAZEL_BUILD"],
+    deps = [
+        "@com_github_grpc_grpc//:grpc++",
+        "@com_github_grpc_grpc//:grpc++_reflection",
+        "//proto:mma_grpc",
+    ],
+)
+
+cc_library(
+    name = "mma_server_lib",
+    srcs = [
+        "mma_server.cc",
+        "memory_manager.cc",
+    ],
+    hdrs = [
+        "mma_server.h",
+        "memory_manager.h",
+        ],
+    defines = ["BAZEL_BUILD"],
+    deps = [
+        "@com_github_grpc_grpc//:grpc++",
+        "@com_github_grpc_grpc//:grpc++_reflection",
+        "//proto:mma_grpc",
+    ],
+)
+
+cc_library(
+    name = "utils_lib",
+    srcs = [
+        "utils.cc",
+        ],
+    hdrs = [
+        "utils.h",
+        ],
+)
+
diff --git a/RPC/lib/array_list.cc b/RPC/lib/array_list.cc
new file mode 100644
index 0000000..a12684c
--- /dev/null
+++ b/RPC/lib/array_list.cc
@@ -0,0 +1,25 @@
+
+#include "array_list.h"
+#include "mma_client.h"
+
+namespace proj4 {
+    ArrayList::ArrayList (size_t sz, MmaClient* Mma, int id) {
+        size = sz;
+        mma = Mma;
+        array_id = id;
+    }
+    int ArrayList::Read (unsigned long idx) {
+        //read the value in the virtual index of 'idx' from mma's memory space
+        size_t virtual_page_id = idx/PageSize;
+        size_t offset = idx%PageSize;
+        return mma->ReadPage(array_id, virtual_page_id, offset);
+    }
+    void ArrayList::Write (unsigned long idx, int value) {
+        //write 'value' in the virtual index of 'idx' into mma's memory space
+        size_t virtual_page_id = idx/PageSize;
+        size_t offset = idx%PageSize;
+        mma->WritePage(array_id, virtual_page_id, offset, value);
+    }
+    ArrayList::~ArrayList(){
+    }
+} // namespce: proj4
\ No newline at end of file
diff --git a/RPC/lib/array_list.h b/RPC/lib/array_list.h
new file mode 100644
index 0000000..aba89d4
--- /dev/null
+++ b/RPC/lib/array_list.h
@@ -0,0 +1,27 @@
+#ifndef ARRAY_LIST_H
+#define ARRAY_LIST_H
+
+#include <cstdlib>
+
+#define PageSize 1024
+
+namespace proj4 {
+
+    class MmaClient;
+
+    class ArrayList{
+        private:
+        friend class MmaClient;
+        size_t size;
+        MmaClient* mma;
+        int array_id;
+        ArrayList(size_t sz, MmaClient* mma, int id);
+        ~ArrayList();
+        public:
+        // you should not modify the public interfaces used in tests
+        int Read (unsigned long);
+        void Write (unsigned long, int);
+    };
+
+} // namespce: proj4
+#endif
\ No newline at end of file
diff --git a/RPC/lib/memory_manager.cc b/RPC/lib/memory_manager.cc
new file mode 100644
index 0000000..7179f22
--- /dev/null
+++ b/RPC/lib/memory_manager.cc
@@ -0,0 +1,320 @@
+#include "memory_manager.h"
+
+#include <iostream>
+#include <fstream>
+
+namespace proj4 {
+    PageFrame::PageFrame(){
+    }
+    int& PageFrame::operator[] (unsigned long idx){
+        //each page should provide random access like an array
+        return mem[idx];
+    }
+    void PageFrame::WriteDisk(std::string filename) {
+        // write page content into disk files
+        // printf("disk write : %s, mem[1] = %d\n", filename, mem[1]);
+        std::string path = "disk-";
+        auto fin = fopen((path + filename + ".txt").c_str(), "w");
+        for (int i = 0; i < PageSize; i++) {
+            fprintf(fin, "%d\n", mem[i]);
+        }
+        fclose(fin);
+    }
+    void PageFrame::ReadDisk(std::string filename) {
+        // read page content from disk files
+        // printf("disk read : %s\n", filename);
+        std::string path = "disk-";
+        auto fin = fopen((path + filename + ".txt").c_str(), "r");
+        if (fin==NULL) {
+            // printf("page not find. clear.\n");
+            Clear();
+        } else {
+            for (int i = 0; i < PageSize; i++) {
+                fscanf(fin, "%d", &mem[i]);
+            }
+            fclose(fin);
+        }
+    }
+    void PageFrame::Clear(){
+        for (int i = 0; i < PageSize; i++) mem[i] = 0;
+    }
+
+    PageInfo::PageInfo(){
+        holder = -1;
+        virtual_page_id = -1;
+        used = 0;
+    }
+    void PageInfo::SetInfo(int cur_holder, int cur_vid){
+        //modify the page states
+        //you can add extra parameters if needed
+        holder = cur_holder;
+        virtual_page_id = cur_vid;
+    }
+    void PageInfo::ClearInfo(){
+        //clear the page states
+        //you can add extra parameters if needed
+        holder = -1;
+        virtual_page_id = -1;
+    }
+
+    int PageInfo::GetHolder(){ return holder; }
+    int PageInfo::GetVid(){ return virtual_page_id; }
+    
+
+    MemoryManager::MemoryManager(size_t sz){
+        //mma should build its memory space with given space size
+        //you should not allocate larger space than 'sz' (the number of physical pages) 
+        next_array_id = 0;
+        mma_sz = sz;
+        free_list = 0;
+        mem = new PageFrame*[sz];
+        page_info = new PageInfo*[sz];
+        for (int i = 0; i < sz; i++){
+            auto *a_page = new PageFrame();
+            auto *a_pageinfo = new PageInfo();
+            mem[i] = a_page;
+            page_info[i] = a_pageinfo;
+            // M_CLOCK[i] = 0;
+            CLOCK_HAND = 0;
+        }
+    }
+    MemoryManager::~MemoryManager(){
+        for (int i = 0; i < mma_sz; i++){
+            delete mem[i];
+            delete page_info[i];
+        }
+        delete[] mem;
+        delete[] page_info;
+    }
+    void MemoryManager::PageOut(int physical_page_id, int holder = -2, int virtual_page_id = -2){
+        //swap out the physical page with the indx of 'physical_page_id out' into a disk file
+        auto a_page = mem[physical_page_id];
+        auto a_info = page_info[physical_page_id];
+        int a_holder = (holder != -2) ? holder : a_info->GetHolder();
+        int a_vid = (virtual_page_id != -2) ? virtual_page_id : a_info->GetVid();
+        if(a_holder == -1) return;
+        // page_map[a_info->GetHolder()][a_info->GetVid()] = -1;
+        auto filename = std::to_string(a_holder) + "-" + std::to_string(a_vid);
+        // printf("page out   : id %d, vid %d, phy %d\n", a_holder, a_vid, physical_page_id);
+        a_page->WriteDisk(filename);
+        // a_info->ClearInfo();
+    }
+    void MemoryManager::PageIn(int array_id, int virtual_page_id, int physical_page_id){
+        //swap the target page from the disk file into a physical page with the index of 'physical_page_id out'
+        // printf("page in    : id %d, vid %d, phy %d\n", array_id, virtual_page_id, physical_page_id);
+        auto filename = std::to_string(array_id) + "-" + std::to_string(virtual_page_id);
+        auto phy_Page = mem[physical_page_id];
+        phy_Page->ReadDisk(filename);
+        // page_info[physical_page_id]->SetInfo(array_id, virtual_page_id);
+    }
+    int MemoryManager::PageReplace(int array_id, int virtual_page_id){
+        //implement your page replacement policy here
+        // int phy_page_id = ReplacementPolicyClock();
+        return ReplacementPolicyClock();
+        // PageOut(phy_page_id);
+        // PageIn(array_id, virtual_page_id, phy_page_id);
+
+        // page_map[page_info[phy_page_id]->GetHolder()][page_info[phy_page_id]->GetVid()] = -1;
+        // page_map[array_id][virtual_page_id] = phy_page_id;
+        // page_info[phy_page_id]->SetInfo(array_id, virtual_page_id);
+    }
+    int MemoryManager::ReadPage(int array_id, int virtual_page_id, int offset){
+        // for arrayList of 'array_id', return the target value on its virtual space
+        // if(offset==0) printf("read page  : id %d, vid %d, offset %d\n", array_id, virtual_page_id, offset);
+        mma_lock.lock();
+        bool need_replace = false;
+        int old_holder, old_virtual_page_id;
+        int phy_page_id = page_map[array_id][virtual_page_id];
+        if (phy_page_id == -1) {
+            need_replace = true;
+            phy_page_id = PageReplace(array_id, virtual_page_id);
+            old_holder = page_info[phy_page_id]->GetHolder();
+            old_virtual_page_id = page_info[phy_page_id]->GetVid();
+            page_map[old_holder][old_virtual_page_id] = -1;
+            page_map[array_id][virtual_page_id] = phy_page_id;
+            page_info[phy_page_id]->SetInfo(array_id, virtual_page_id);
+            // PageOut(phy_page_id, old_holder, old_virtual_page_id);
+            // PageIn(array_id, virtual_page_id, phy_page_id);
+        }
+        phy_page_id = page_map[array_id][virtual_page_id];
+        page_info[phy_page_id]->used = 1;
+        page_info[phy_page_id]->lock();
+        // mma_lock.unlock();
+        if (need_replace){
+            // printf("page out lock %d-%d\n", old_holder, old_virtual_page_id);
+            if (old_holder != -1) {
+                page_mutex[old_holder][old_virtual_page_id]->lock();
+                // PageOut(phy_page_id, old_holder, old_virtual_page_id);
+                // page_mutex[old_holder][old_virtual_page_id]->unlock();
+            }
+            // printf("page in  lock %d-%d\n", array_id, virtual_page_id);
+            page_mutex[array_id][virtual_page_id]->lock();
+            mma_lock.unlock();
+            if (old_holder != -1) {
+                PageOut(phy_page_id, old_holder, old_virtual_page_id);
+                page_mutex[old_holder][old_virtual_page_id]->unlock();
+            }
+            PageIn(array_id, virtual_page_id, phy_page_id);
+            page_mutex[array_id][virtual_page_id]->unlock();
+        } else {
+            mma_lock.unlock();
+        }
+        PageFrame* page = mem[phy_page_id];
+        int result = (*page)[offset];
+        page_info[phy_page_id]->unlock();
+        return result;
+    }
+    void MemoryManager::WritePage(int array_id, int virtual_page_id, int offset, int value){
+        // for arrayList of 'array_id', write 'value' into the target position on its virtual space
+        // if(offset==0) printf("write page : id %d, vid %d, offset %d, value %d\n", array_id, virtual_page_id, offset, value);
+        mma_lock.lock();
+        bool need_replace = false;
+        int old_holder, old_virtual_page_id;
+        int phy_page_id = page_map[array_id][virtual_page_id];
+        if (phy_page_id == -1) {
+            need_replace = true;
+            // printf("write page need replace\n");
+            phy_page_id = PageReplace(array_id, virtual_page_id);
+            old_holder = page_info[phy_page_id]->GetHolder();
+            old_virtual_page_id = page_info[phy_page_id]->GetVid();
+            page_map[old_holder][old_virtual_page_id] = -1;
+            page_map[array_id][virtual_page_id] = phy_page_id;
+            page_info[phy_page_id]->SetInfo(array_id, virtual_page_id);
+            // PageOut(phy_page_id, old_holder, old_virtual_page_id);
+            // PageIn(array_id, virtual_page_id, phy_page_id);
+        }
+        // phy_page_id = page_map[array_id][virtual_page_id];
+        page_info[phy_page_id]->used = 1;
+        page_info[phy_page_id]->lock();
+        // mma_lock.unlock();
+        if (need_replace){
+            // printf("page out lock %d-%d\n", old_holder, old_virtual_page_id);
+            if (old_holder != -1) {
+                page_mutex[old_holder][old_virtual_page_id]->lock();
+                // PageOut(phy_page_id, old_holder, old_virtual_page_id);
+                // page_mutex[old_holder][old_virtual_page_id]->unlock();
+            }
+            // printf("page in  lock %d-%d\n", array_id, virtual_page_id);
+            page_mutex[array_id][virtual_page_id]->lock();
+            mma_lock.unlock();
+            if (old_holder != -1) {
+                PageOut(phy_page_id, old_holder, old_virtual_page_id);
+                page_mutex[old_holder][old_virtual_page_id]->unlock();
+            }
+            PageIn(array_id, virtual_page_id, phy_page_id);
+            page_mutex[array_id][virtual_page_id]->unlock();
+        } else {
+            mma_lock.unlock();
+        }
+        PageFrame* page = mem[phy_page_id];
+        (*page)[offset] = value;
+        page_info[phy_page_id]->unlock();
+    }
+    void MemoryManager::ClearPage(int array_id, int virtual_page_id){
+        int phy_Page_idx = page_map[array_id][virtual_page_id];
+        if (phy_Page_idx != -1) {
+            page_info[phy_Page_idx]->lock();
+            // mem[phy_Page_idx]->Clear();
+            page_info[phy_Page_idx]->ClearInfo();
+            PageOut(phy_Page_idx, array_id, virtual_page_id);
+            page_info[phy_Page_idx]->unlock();
+        }
+
+        auto filename = std::to_string(array_id) + "-" + std::to_string(virtual_page_id);
+        std::string path = "disk-";
+        auto fin = fopen((path + filename + ".txt").c_str(), "w");
+        if (fin != NULL) {
+            page_mutex[array_id][virtual_page_id]->lock();
+            for (int i = 0; i < PageSize; i++) {
+                fprintf(fin, "%d\n", 0);
+            }
+            page_mutex[array_id][virtual_page_id]->unlock();
+        }
+        fclose(fin);
+    }
+    int MemoryManager::Allocate(size_t sz){
+        // when an application requires for memory, create an ArrayList and record mappings from its virtual memory space to the physical memory space
+        mma_lock.lock();
+        int num_page = sz / PageSize;
+        if (sz % PageSize != 0) num_page ++;
+        // ArrayList *a_ArrayList = new ArrayList(sz, this, next_array_id);
+        int ArrayID = next_array_id;
+        std::map<int, int> a_trans_map;
+        std::map<int, std::mutex*> a_page_mutex;
+        for (int i = 0; i < num_page; i++) {
+            a_trans_map[i] = -1;
+            a_page_mutex[i] = new std::mutex;
+        }
+        page_map[next_array_id] = a_trans_map;
+        page_mutex[next_array_id] = a_page_mutex;
+        // printf("allocate : id %d : size %d\n", next_array_id, sz);
+        next_array_id++;
+        mma_lock.unlock();
+        return ArrayID;
+
+    }
+    int MemoryManager::Release(int ArrayID){
+        // an application will call release() function when destroying its arrayList
+        // release the virtual space of the arrayList and erase the corresponding mappings
+        mma_lock.lock();
+        int array_id = ArrayID;
+        // printf("release : %d\n", arr->array_id);
+        int pageNum = page_map[array_id].size();
+        for (int i = 0; i < pageNum; i++) {
+            ClearPage(array_id, i);
+            delete page_mutex[array_id][i];
+        }
+        mma_lock.unlock();
+        return pageNum;
+    }
+
+    int MemoryManager::get_empty_page(){
+        int dict = free_list;
+        for (int i = 0; i < mma_sz; i++){
+            if(dict % 2 == 0) {
+                free_list += 1<<i;
+                return i;
+            }
+            dict >>= 1;
+        }
+        return -1;
+    }
+
+    int MemoryManager::ReplacementPolicyFIFO(){
+        int empty_id = get_empty_page();
+        int phy_page_id = 0;
+        if(empty_id != -1){
+            phy_page_id = empty_id;
+            Q_FIFO.push(empty_id);
+        } else {
+            phy_page_id = Q_FIFO.front();
+            // PageOut(phy_page_id);
+            Q_FIFO.pop();
+            Q_FIFO.push(phy_page_id);
+        }
+        return phy_page_id;
+    }
+
+    int MemoryManager::ReplacementPolicyClock(){
+        int empty_id = get_empty_page();
+        int phy_page_id = 0;
+        if(empty_id != -1){
+            phy_page_id = empty_id;
+        } else {
+            while(true){
+                CLOCK_HAND++;
+                if(CLOCK_HAND == mma_sz) CLOCK_HAND = 0;
+
+
+                if(page_info[CLOCK_HAND]->used == 0){
+                    phy_page_id = CLOCK_HAND;
+                    // PageOut(phy_page_id);
+                    break;
+                } else {
+                    page_info[CLOCK_HAND]->used = 0;
+                }
+            }
+        }
+        return phy_page_id;
+    }
+} // namespce: proj4
\ No newline at end of file
diff --git a/RPC/lib/memory_manager.h b/RPC/lib/memory_manager.h
new file mode 100644
index 0000000..7686fff
--- /dev/null
+++ b/RPC/lib/memory_manager.h
@@ -0,0 +1,82 @@
+#ifndef MEMORY_MANAGER_H_
+#define MEMORY_MANAGER_H_
+
+#include <assert.h>
+#include <map>
+#include <mutex>
+#include <queue>
+#include <string>
+#include <cstdlib>
+#include <cstdio>
+
+#define PageSize 1024
+
+namespace proj4 {
+
+class PageFrame {
+public:
+    PageFrame();
+    int& operator[] (unsigned long);
+    void WriteDisk(std::string);
+    void ReadDisk(std::string);
+    void Clear();
+private:
+    int mem[PageSize];
+};
+
+class PageInfo {
+public:
+    PageInfo();
+    void SetInfo(int,int);
+    void ClearInfo();
+    int GetHolder();
+    int GetVid();
+    void lock() { page_lock.lock(); }
+    void unlock() { page_lock.unlock(); }
+    int used;
+
+private:
+    int holder; //page holder id (array_id)
+    int virtual_page_id; // page virtual #
+    mutable std::mutex page_lock;
+    /*add your extra states here freely for implementation*/
+
+};
+
+class MemoryManager {
+public:
+    // you should not modify the public interfaces used in tests
+    MemoryManager(size_t);
+    int ReadPage(int array_id, int virtual_page_id, int offset);
+    void WritePage(int array_id, int virtual_page_id, int offset, int value);
+    void ClearPage(int array_id, int virtual_page_id);
+    int Allocate(size_t);
+    int Release(int array_id);
+    ~MemoryManager();
+private:
+    std::map<int, std::map<int, int>> page_map; // // mapping from ArrayList's virtual page # to physical page #
+    std::map<int, std::map<int, std::mutex*>> page_mutex;
+    PageFrame** mem; // physical pages, using 'PageFrame* mem' is also acceptable 
+    PageInfo** page_info; // physical page info
+    unsigned int free_list;  // use bitmap implementation to identify and search for free pages
+    int next_array_id;
+    size_t mma_sz;
+    /*add your extra states here freely for implementation*/
+
+    void PageIn(int array_id, int virtual_page_id, int physical_page_id);
+    void PageOut(int physical_page_id, int holder, int virtual_page_id);
+    int PageReplace(int array_id, int virtual_page_id);
+
+    int get_empty_page();
+    int ReplacementPolicyFIFO();
+    int ReplacementPolicyClock();
+    std::queue<int> Q_FIFO;
+    int CLOCK_HAND;
+
+    std::mutex mma_lock;
+};
+
+}  // namespce: proj4
+
+#endif
+
diff --git a/RPC/lib/mma_client.cc b/RPC/lib/mma_client.cc
new file mode 100644
index 0000000..03be6d7
--- /dev/null
+++ b/RPC/lib/mma_client.cc
@@ -0,0 +1,79 @@
+
+#include "mma_client.h"
+#include "array_list.h"
+#include <thread>
+
+namespace proj4 {
+
+ArrayList* MmaClient::Allocate(size_t size) {
+    // std::cout << "Allocate " + std::to_string(size) + "\n";
+
+    for(;;) {
+        ClientContext context;
+        AllocateArgs args;
+        AllocateReply reply;
+        args.set_size(size);
+
+        Status status = stub_->Allocate(&context, args, &reply);
+
+        if (status.ok()) {
+            // std::cout << "Allocate " + std::to_string(size) + " success, arrayID = " + std::to_string(reply.arrayid()) + "\n";
+
+            return new ArrayList(size, this, reply.arrayid());
+        } else {
+            // std::cout << "Allocate " + std::to_string(size) + " cancled\n";
+
+            std::this_thread::sleep_for(std::chrono::milliseconds(1000));
+        }
+    }
+}
+
+void MmaClient::Free(ArrayList* al) {
+    ClientContext context;
+    ReleaseArgs args;
+    ReleaseReply reply;
+    args.set_arrayid(al->array_id);
+
+    // std::cout << "Free " + std::to_string(al->array_id) + "\n";
+
+    Status status = stub_->Release(&context, args, &reply);
+
+    // std::cout << "Free " + std::to_string(al->array_id) + " success\n";
+
+    delete al;
+}
+
+int MmaClient::ReadPage(int array_id, int virtual_page_id, int offset) {
+    ClientContext context;
+    ReadPageArgs args;
+    ReadPageReply reply;
+    args.set_arrayid(array_id);
+    args.set_virtulpageid(virtual_page_id);
+    args.set_offset(offset);
+
+    // std::cout << "ReadPage " + std::to_string(array_id) + ", " + std::to_string(virtual_page_id) + ", " + std::to_string(offset) + "\n";
+
+    Status status = stub_->ReadPage(&context, args, &reply);
+
+    // std::cout << "ReadPage " + std::to_string(array_id) + ", " + std::to_string(virtual_page_id) + ", " + std::to_string(offset) + " success, value = " + std::to_string(reply.value()) + "\n";
+
+    return reply.value();
+}
+
+void MmaClient::WritePage(int array_id, int virtual_page_id, int offset, int value) {
+    ClientContext context;
+    WritePageArgs args;
+    WritePageReply reply;
+    args.set_arrayid(array_id);
+    args.set_virtulpageid(virtual_page_id);
+    args.set_offset(offset);
+    args.set_value(value);
+
+    // std::cout << "WritePage " + std::to_string(array_id) + ", " + std::to_string(virtual_page_id) + ", " + std::to_string(offset) + ", " + std::to_string(value) + "\n";
+
+    Status status = stub_->WritePage(&context, args, &reply);
+
+    // std::cout << "WritePage " + std::to_string(array_id) + ", " + std::to_string(virtual_page_id) + ", " + std::to_string(offset) + ", " + std::to_string(value) + " success\n";
+}
+
+} //namespace proj4
diff --git a/RPC/lib/mma_client.h b/RPC/lib/mma_client.h
new file mode 100644
index 0000000..926ed8b
--- /dev/null
+++ b/RPC/lib/mma_client.h
@@ -0,0 +1,49 @@
+#ifndef MMA_CLIENT_H
+#define MMA_CLIENT_H
+
+#include <memory>
+#include <cstdlib>
+
+#include <grpc++/grpc++.h>
+
+#ifdef BAZEL_BUILD
+#include "proto/mma.grpc.pb.h"
+#else
+#include "mma.grpc.pb.h"
+#endif
+
+using grpc::Channel;
+using grpc::ClientContext;
+using grpc::Status;
+using mma::memoryManager;
+using mma::AllocateArgs;
+using mma::ReleaseArgs;
+using mma::ReadPageArgs;
+using mma::WritePageArgs;
+using mma::AllocateReply;
+using mma::ReleaseReply;
+using mma::ReadPageReply;
+using mma::WritePageReply;
+
+
+namespace proj4 {
+
+class ArrayList;
+
+class MmaClient {
+public:
+    MmaClient(std::shared_ptr<Channel> channel) : stub_(memoryManager::NewStub(channel)) {}
+    
+    ArrayList* Allocate(size_t);
+    void Free(ArrayList*);
+
+    int ReadPage(int array_id, int virtual_page_id, int offset);
+    void WritePage(int array_id, int virtual_page_id, int offset, int value);
+
+private:
+    std::unique_ptr<memoryManager::Stub> stub_;
+};
+
+} //namespace proj4
+
+#endif
\ No newline at end of file
diff --git a/RPC/lib/mma_server.cc b/RPC/lib/mma_server.cc
new file mode 100644
index 0000000..ba92972
--- /dev/null
+++ b/RPC/lib/mma_server.cc
@@ -0,0 +1,88 @@
+#include "mma_server.h"
+
+namespace proj4 {
+
+Status MmaServer::Allocate(ServerContext* context, const AllocateArgs* args, AllocateReply* reply) {
+    size_t pageNeed = (args->size() + PageSize - 1) / PageSize;
+    this->mux.lock();
+    if ((max_vir_page_num != 0) && (total_vir_page_num >= max_vir_page_num)) {
+        this->mux.unlock();
+        return Status::CANCELLED;
+    }
+    total_vir_page_num += pageNeed;
+    // std::cout << std::to_string(total_vir_page_num) + "/" + std::to_string(max_vir_page_num) + "\n";
+    this->mux.unlock();
+    int ArrayID = mma->Allocate(args->size());
+    reply->set_arrayid(ArrayID);
+    return Status::OK;
+}
+
+Status MmaServer::Release(ServerContext* context, const ReleaseArgs* args, ReleaseReply* reply) {
+    size_t release_page_num = mma->Release(args->arrayid());
+    this->mux.lock();
+    total_vir_page_num -= release_page_num;
+    // std::cout << std::to_string(total_vir_page_num) + "/" + std::to_string(max_vir_page_num) + "\n";
+    this->mux.unlock();
+    return Status::OK;
+}
+
+Status MmaServer::ReadPage(ServerContext* context, const ReadPageArgs* args, ReadPageReply* reply) {
+    int value = mma->ReadPage(args->arrayid(), args->virtulpageid(), args->offset());
+    reply->set_value(value);
+    return Status::OK;
+}
+
+Status MmaServer::WritePage(ServerContext* context, const WritePageArgs* args, WritePageReply* reply) {
+    mma->WritePage(args->arrayid(), args->virtulpageid(), args->offset(), args->value());
+    return Status::OK;
+}
+
+std::unique_ptr<Server> server;
+
+void RunServerUL(size_t phy_page_num) {
+    std::string server_address("0.0.0.0:50051");
+    MmaServer service(phy_page_num);
+
+    grpc::EnableDefaultHealthCheckService(true);
+    grpc::reflection::InitProtoReflectionServerBuilderPlugin();
+    ServerBuilder builder;
+    // Listen on the given address without any authentication mechanism.
+    builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());
+    // Register "service" as the instance through which we'll communicate with
+    // clients. In this case it corresponds to an *synchronous* service.
+    builder.RegisterService(&service);
+    // Finally assemble the server.
+    server = std::unique_ptr<Server>(builder.BuildAndStart());
+    // std::cout << "Server listening on " << server_address << std::endl;
+
+    // Wait for the server to shutdown. Note that some other thread must be
+    // responsible for shutting down the server for this call to ever return.
+    server->Wait();
+}
+
+void RunServerL(size_t phy_page_num, size_t max_vir_page_num) {
+    std::string server_address("0.0.0.0:50051");
+    MmaServer service(phy_page_num, max_vir_page_num);
+
+    grpc::EnableDefaultHealthCheckService(true);
+    grpc::reflection::InitProtoReflectionServerBuilderPlugin();
+    ServerBuilder builder;
+    // Listen on the given address without any authentication mechanism.
+    builder.AddListeningPort(server_address, grpc::InsecureServerCredentials());
+    // Register "service" as the instance through which we'll communicate with
+    // clients. In this case it corresponds to an *synchronous* service.
+    builder.RegisterService(&service);
+    // Finally assemble the server.
+    server = std::unique_ptr<Server>(builder.BuildAndStart());
+    // std::cout << "Server listening on " << server_address << std::endl;
+
+    // Wait for the server to shutdown. Note that some other thread must be
+    // responsible for shutting down the server for this call to ever return.
+    server->Wait();
+}
+
+void ShutdownServer() {
+    server->Shutdown();
+}
+
+} //namespace proj4
diff --git a/RPC/lib/mma_server.h b/RPC/lib/mma_server.h
new file mode 100644
index 0000000..d39334a
--- /dev/null
+++ b/RPC/lib/mma_server.h
@@ -0,0 +1,71 @@
+#ifndef MMA_SERVER_H
+#define MMA_SERVER_H
+
+#include <iostream>
+#include <memory>
+#include <string>
+#include <cstdlib>
+#include <mutex>
+
+#include <grpc++/grpc++.h>
+#include <grpc++/ext/proto_server_reflection_plugin.h>
+#include <grpc++/health_check_service_interface.h>
+
+#ifdef BAZEL_BUILD
+#include "proto/mma.grpc.pb.h"
+#else
+#include "mma.grpc.pb.h"
+#endif
+
+#include "memory_manager.h"
+
+using grpc::Server;
+using grpc::ServerBuilder;
+using grpc::ServerContext;
+using grpc::Status;
+using mma::memoryManager;
+using mma::AllocateArgs;
+using mma::ReleaseArgs;
+using mma::ReadPageArgs;
+using mma::WritePageArgs;
+using mma::AllocateReply;
+using mma::ReleaseReply;
+using mma::ReadPageReply;
+using mma::WritePageReply;
+
+
+// Logic and data behind the server's behavior.
+
+namespace proj4 {
+
+class MmaServer final : public memoryManager::Service {
+public:
+    MmaServer(size_t phy_page_num) : mma(new MemoryManager(phy_page_num)) {}
+    MmaServer(size_t phy_page_num, size_t max_vir_page_num)
+        : mma(new MemoryManager(phy_page_num)), max_vir_page_num(max_vir_page_num) {}
+    ~MmaServer() {delete mma;}
+
+    Status Allocate (ServerContext* context, const AllocateArgs*  args, AllocateReply*  reply) override;
+    Status Release  (ServerContext* context, const ReleaseArgs*   args, ReleaseReply*   reply) override;
+    Status ReadPage (ServerContext* context, const ReadPageArgs*  args, ReadPageReply*  reply) override;
+    Status WritePage(ServerContext* context, const WritePageArgs* args, WritePageReply* reply) override;
+
+private:
+    MemoryManager* mma;
+    size_t max_vir_page_num = 0;
+    mutable std::mutex mux;
+    size_t total_vir_page_num = 0;
+};
+
+// setup a server with UnLimited virtual memory space
+void RunServerUL(size_t phy_page_num);
+
+// setup a server with Limited virtual memory space
+void RunServerL(size_t phy_page_num, size_t max_vir_page_num);
+
+// shutdown the server setup by RunServerUL or RunServerL
+void ShutdownServer();
+
+} //namespace proj4
+
+#endif
\ No newline at end of file
diff --git a/RPC/lib/utils.cc b/RPC/lib/utils.cc
new file mode 100644
index 0000000..8d9a2d5
--- /dev/null
+++ b/RPC/lib/utils.cc
@@ -0,0 +1,24 @@
+#include <chrono>
+#include <thread>
+#include <cstdlib>
+#include <iostream>
+#include "utils.h"
+
+namespace proj4 {
+
+void a_slow_function(int seconds) {
+    std::this_thread::sleep_for(std::chrono::seconds(seconds));
+}
+
+AutoTimer::AutoTimer(std::string name): 
+        m_name(std::move(name)),
+        m_beg(std::chrono::high_resolution_clock::now()) { 
+    }
+
+AutoTimer::~AutoTimer() {
+    auto end = std::chrono::high_resolution_clock::now();
+    auto dur = std::chrono::duration_cast<std::chrono::microseconds>(end - m_beg);
+    std::cout << m_name << " : " << dur.count() << " usec\n";
+}
+
+} // namespce: proj4
diff --git a/RPC/lib/utils.h b/RPC/lib/utils.h
new file mode 100644
index 0000000..c84013b
--- /dev/null
+++ b/RPC/lib/utils.h
@@ -0,0 +1,21 @@
+#ifndef DEADLOCK_LIB_UTILS_H_
+#define DEADLOCK_LIB_UTILS_H_
+
+#include <chrono>
+
+namespace proj4 {
+
+void a_slow_function(int seconds);
+
+class AutoTimer {
+ public:
+  AutoTimer(std::string name);
+  ~AutoTimer(); 
+ private:
+  std::string m_name;
+  std::chrono::time_point<std::chrono::high_resolution_clock> m_beg;
+};
+
+}  // namespce: proj4
+
+#endif
\ No newline at end of file
diff --git a/RPC/mma_test.cc b/RPC/mma_test.cc
new file mode 100644
index 0000000..18d7fd3
--- /dev/null
+++ b/RPC/mma_test.cc
@@ -0,0 +1,173 @@
+#include <gtest/gtest.h>
+#include<vector>
+#include<thread>
+#include<string>
+
+#include "lib/array_list.h"
+#include "lib/mma_client.h"
+#include "lib/mma_server.h"
+
+namespace proj4 {
+namespace testing{
+
+class MMATestA : public ::testing::Test {
+ protected:
+  void SetUp() override {
+    server_thread = new std::thread(&RunServerUL, 10);
+    server_thread->detach();
+    // sleep(1);
+    std::this_thread::sleep_for(std::chrono::milliseconds(1000));
+
+    std::string target_str = "localhost:50051";
+    mma = new MmaClient(
+        grpc::CreateChannel(target_str, grpc::InsecureChannelCredentials()));
+
+    workload_sz_1 = 4000; 
+    workload_sz_2 = 2000; 
+    workload_sz_3 = 100; 
+    workload_sz_4 = 2000;
+    metrix_length = 10;
+    loop_times = 10;
+    thread_num = 20;
+  }
+  void TearDown() override {ShutdownServer(); delete mma;}
+    size_t workload_sz_1;
+    size_t workload_sz_2;
+    size_t workload_sz_3;
+    size_t workload_sz_4;
+    int metrix_length;
+    int loop_times;
+    int thread_num;
+    MmaClient* mma;
+    std::thread* server_thread;
+    std::vector<std::vector<int>>metrix = {{ 2850, 2895, 2940, 2985, 3030, 3075, 3120, 3165, 3210, 3255 },
+    { 7350, 7495, 7640, 7785, 7930, 8075, 8220, 8365, 8510, 8655 },
+    { 11850, 12095, 12340, 12585, 12830, 13075, 13320, 13565, 13810, 14055 },
+    { 16350, 16695, 17040, 17385, 17730, 18075, 18420, 18765, 19110, 19455 },
+    { 20850, 21295, 21740, 22185, 22630, 23075, 23520, 23965, 24410, 24855 },
+    { 25350, 25895, 26440, 26985, 27530, 28075, 28620, 29165, 29710, 30255 },
+    { 29850, 30495, 31140, 31785, 32430, 33075, 33720, 34365, 35010, 35655 },
+    { 34350, 35095, 35840, 36585, 37330, 38075, 38820, 39565, 40310, 41055 },
+    { 38850, 39695, 40540, 41385, 42230, 43075, 43920, 44765, 45610, 46455 },
+    { 43350, 44295, 45240, 46185, 47130, 48075, 49020, 49965, 50910, 51855 },};
+};
+
+class MMATestB : public ::testing::Test {
+ protected:
+  void SetUp() override {
+    server_thread = new std::thread(&RunServerL, 10, 20);
+    server_thread->detach();
+    // sleep(1);
+    std::this_thread::sleep_for(std::chrono::milliseconds(1000));
+
+    std::string target_str = "localhost:50051";
+    mma = new MmaClient(
+        grpc::CreateChannel(target_str, grpc::InsecureChannelCredentials()));
+
+    workload_sz = 2000;
+    thread_num = 20;
+  }
+  void TearDown() override {ShutdownServer(); delete mma;}
+    size_t workload_sz;
+    int thread_num;
+    MmaClient* mma;
+    std::thread* server_thread;
+};
+
+TEST_F(MMATestA,task1){
+	ArrayList* arr = mma->Allocate(workload_sz_1);
+    for(unsigned long i = 0; i<workload_sz_1; i++){
+        arr->Write(i, 1);
+    }
+    for(unsigned long i = 0; i<workload_sz_1; i++){
+        EXPECT_EQ(1, arr->Read(i));
+    }
+    mma->Free(arr);
+}
+
+TEST_F(MMATestA,task2){
+	std::vector<ArrayList*>arr;
+    for(int i = 0; i<loop_times; i++){
+        arr.push_back(mma->Allocate(workload_sz_2));
+        for(unsigned long j = 0; j < workload_sz_2; j++)arr[i]->Write(j, i);
+    }
+    for(int i = 0; i<loop_times; i++){
+        if(i %2)mma->Free(arr[i]);
+        else for(unsigned long j = 0; j < workload_sz_2; j++)EXPECT_EQ(i, arr[i]->Read(j));
+    }
+    for(int i = 0; i<loop_times; i++){
+        if(i %2 == 0)mma->Free(arr[i]);
+    }
+}
+
+TEST_F(MMATestA,task3){
+	std::vector<ArrayList*>metrixA, metrixB, metrixC;
+    for(int i = 0; i<metrix_length; i++){
+        metrixA.push_back(mma->Allocate(metrix_length));
+        metrixB.push_back(mma->Allocate(metrix_length));
+        metrixC.push_back(mma->Allocate(metrix_length));
+        for(int j = 0; j < metrix_length; j++){
+            metrixA[i]->Write(j, i*metrix_length+j);
+            metrixB[i]->Write(j, i*metrix_length+j);
+            metrixC[i]->Write(j, 0);
+        }
+    }
+    
+    for(int i = 0; i<metrix_length; i++){
+        for(int j = 0; j<metrix_length; j++){
+            for(int k = 0; k < metrix_length; k++){
+                metrixC[i]->Write(j, metrixC[i]->Read(j)+metrixA[i]->Read(k)*metrixB[k]->Read(j));
+            }
+        }
+    }
+
+    for(int i = 0; i<metrix_length; i++){
+        for(int j = 0; j<metrix_length; j++){
+            EXPECT_EQ(metrix[i][j], metrixC[i]->Read(j));
+        }
+    }
+
+    for(int i = 0; i<metrix_length; i++){
+        mma->Free(metrixA[i]);
+        mma->Free(metrixB[i]);
+        mma->Free(metrixC[i]);
+    }
+
+}
+
+void workload(MmaClient * my_mma, size_t workload_sz){
+    ArrayList* arr = my_mma->Allocate(workload_sz);
+    for(unsigned long j = 0; j < workload_sz; j++)arr->Write(j, j);
+    for(unsigned long j = 0; j < workload_sz; j++)EXPECT_EQ(j, arr->Read(j));
+    my_mma->Free(arr);
+}
+
+TEST_F(MMATestA,task4){
+    std::vector<std::thread*> pool;
+    for(int i = 0; i<thread_num; i++) {
+        pool.push_back(new std::thread(&workload, mma, workload_sz_4));
+    }
+
+    for (auto t: pool) {
+        t->join();
+    }
+}
+
+TEST_F(MMATestB,task5){
+    std::vector<std::thread*> pool;
+    for(int i = 0; i<thread_num; i++) {
+        pool.push_back(new std::thread(&workload, mma, workload_sz));
+    }
+
+    for (auto t: pool) {
+        t->join();
+    }
+}
+
+} // namespace testing
+} // namespace proj4
+
+int main(int argc,char **argv){
+  testing::InitGoogleTest(&argc,argv);
+  return RUN_ALL_TESTS();
+}
diff --git a/RPC/proto/BUILD b/RPC/proto/BUILD
new file mode 100644
index 0000000..4df9ffb
--- /dev/null
+++ b/RPC/proto/BUILD
@@ -0,0 +1,23 @@
+package(default_visibility = ["//visibility:public"])
+
+load("@rules_proto//proto:defs.bzl", "proto_library")
+load("@com_github_grpc_grpc//bazel:cc_grpc_library.bzl", "cc_grpc_library")
+
+
+
+cc_grpc_library(
+    name = "mma_grpc",
+    srcs = [":mma_proto"],
+    grpc_only = True,
+    deps = [":mma_cc_proto"],
+)
+ 
+cc_proto_library(
+    name = "mma_cc_proto",
+    deps = [":mma_proto"],
+)
+ 
+proto_library(
+    name = "mma_proto",
+	srcs = ["mma.proto"],
+)
\ No newline at end of file
diff --git a/RPC/proto/mma.proto b/RPC/proto/mma.proto
new file mode 100644
index 0000000..7399d60
--- /dev/null
+++ b/RPC/proto/mma.proto
@@ -0,0 +1,47 @@
+syntax = "proto3";
+
+option objc_class_prefix = "MMA";
+
+package mma;
+
+// define your service here
+
+service memoryManager {
+    rpc Allocate  (AllocateArgs)  returns (AllocateReply)  {}
+    rpc Release   (ReleaseArgs)   returns (ReleaseReply)   {}
+    rpc ReadPage  (ReadPageArgs)  returns (ReadPageReply)  {}
+    rpc WritePage (WritePageArgs) returns (WritePageReply) {}
+}
+
+message AllocateArgs {
+    int32 size = 1;
+}
+
+message AllocateReply {
+    int32 arrayID = 1;
+}
+
+message ReleaseArgs {
+    int32 arrayID = 1;
+}
+
+message ReleaseReply {}
+
+message ReadPageArgs {
+    int32 arrayID = 1;
+    int32 virtulPageID = 2;
+    int32 offset = 3;
+}
+
+message ReadPageReply {
+    int32 value = 1;
+}
+
+message WritePageArgs {
+    int32 arrayID = 1;
+    int32 virtulPageID = 2;
+    int32 offset = 3;
+    int32 value = 4;
+}
+
+message WritePageReply {}
diff --git a/Thread-1/.bazeliskrc b/Thread-1/.bazeliskrc
index f81d3f7..2159662 100644
--- a/Thread-1/.bazeliskrc
+++ b/Thread-1/.bazeliskrc
@@ -1 +1 @@
-USE_BAZEL_VERSION=4.2.1
+USE_BAZEL_VERSION=4.2.1
diff --git a/Thread-1/.gitignore b/Thread-1/.gitignore
new file mode 100644
index 0000000..772258b
--- /dev/null
+++ b/Thread-1/.gitignore
@@ -0,0 +1,6 @@
+bazel-bin
+bazel-out
+bazel-testlogs
+bazel-Thread-1
+
+*.txt
diff --git a/Thread-1/.vscode/settings.json b/Thread-1/.vscode/settings.json
new file mode 100644
index 0000000..431dd9e
--- /dev/null
+++ b/Thread-1/.vscode/settings.json
@@ -0,0 +1,78 @@
+{
+    "files.associations": {
+        "array": "cpp",
+        "vector": "cpp",
+        "xstring": "cpp",
+        "xutility": "cpp",
+        "cmath": "cpp",
+        "algorithm": "cpp",
+        "atomic": "cpp",
+        "bit": "cpp",
+        "cctype": "cpp",
+        "charconv": "cpp",
+        "chrono": "cpp",
+        "clocale": "cpp",
+        "compare": "cpp",
+        "concepts": "cpp",
+        "cstddef": "cpp",
+        "cstdint": "cpp",
+        "cstdio": "cpp",
+        "cstdlib": "cpp",
+        "cstring": "cpp",
+        "ctime": "cpp",
+        "cwchar": "cpp",
+        "exception": "cpp",
+        "format": "cpp",
+        "forward_list": "cpp",
+        "fstream": "cpp",
+        "initializer_list": "cpp",
+        "iomanip": "cpp",
+        "ios": "cpp",
+        "iosfwd": "cpp",
+        "iostream": "cpp",
+        "istream": "cpp",
+        "iterator": "cpp",
+        "limits": "cpp",
+        "locale": "cpp",
+        "map": "cpp",
+        "memory": "cpp",
+        "mutex": "cpp",
+        "new": "cpp",
+        "optional": "cpp",
+        "ostream": "cpp",
+        "ratio": "cpp",
+        "sstream": "cpp",
+        "stdexcept": "cpp",
+        "stop_token": "cpp",
+        "streambuf": "cpp",
+        "string": "cpp",
+        "system_error": "cpp",
+        "thread": "cpp",
+        "tuple": "cpp",
+        "type_traits": "cpp",
+        "typeinfo": "cpp",
+        "utility": "cpp",
+        "xfacet": "cpp",
+        "xiosbase": "cpp",
+        "xlocale": "cpp",
+        "xlocbuf": "cpp",
+        "xlocinfo": "cpp",
+        "xlocmes": "cpp",
+        "xlocmon": "cpp",
+        "xlocnum": "cpp",
+        "xloctime": "cpp",
+        "xmemory": "cpp",
+        "xstddef": "cpp",
+        "xtr1common": "cpp",
+        "xtree": "cpp",
+        "cinttypes": "cpp",
+        "condition_variable": "cpp",
+        "functional": "cpp",
+        "list": "cpp",
+        "regex": "cpp",
+        "set": "cpp",
+        "unordered_map": "cpp",
+        "unordered_set": "cpp",
+        "xhash": "cpp"
+    }
+}
\ No newline at end of file
diff --git a/Thread-1/2019012327_2019012328.diff b/Thread-1/2019012327_2019012328.diff
new file mode 100644
index 0000000..1ebc4ec
--- /dev/null
+++ b/Thread-1/2019012327_2019012328.diff
@@ -0,0 +1,1403 @@
+diff --git a/Thread-1/.gitignore b/Thread-1/.gitignore
+new file mode 100644
+index 0000000..772258b
+--- /dev/null
++++ b/Thread-1/.gitignore
+@@ -0,0 +1,6 @@
++bazel-bin
++bazel-out
++bazel-testlogs
++bazel-Thread-1
++
++*.txt
+diff --git a/Thread-1/.vscode/settings.json b/Thread-1/.vscode/settings.json
+new file mode 100644
+index 0000000..431dd9e
+--- /dev/null
++++ b/Thread-1/.vscode/settings.json
+@@ -0,0 +1,78 @@
++{
++    "files.associations": {
++        "array": "cpp",
++        "vector": "cpp",
++        "xstring": "cpp",
++        "xutility": "cpp",
++        "cmath": "cpp",
++        "algorithm": "cpp",
++        "atomic": "cpp",
++        "bit": "cpp",
++        "cctype": "cpp",
++        "charconv": "cpp",
++        "chrono": "cpp",
++        "clocale": "cpp",
++        "compare": "cpp",
++        "concepts": "cpp",
++        "cstddef": "cpp",
++        "cstdint": "cpp",
++        "cstdio": "cpp",
++        "cstdlib": "cpp",
++        "cstring": "cpp",
++        "ctime": "cpp",
++        "cwchar": "cpp",
++        "exception": "cpp",
++        "format": "cpp",
++        "forward_list": "cpp",
++        "fstream": "cpp",
++        "initializer_list": "cpp",
++        "iomanip": "cpp",
++        "ios": "cpp",
++        "iosfwd": "cpp",
++        "iostream": "cpp",
++        "istream": "cpp",
++        "iterator": "cpp",
++        "limits": "cpp",
++        "locale": "cpp",
++        "map": "cpp",
++        "memory": "cpp",
++        "mutex": "cpp",
++        "new": "cpp",
++        "optional": "cpp",
++        "ostream": "cpp",
++        "ratio": "cpp",
++        "sstream": "cpp",
++        "stdexcept": "cpp",
++        "stop_token": "cpp",
++        "streambuf": "cpp",
++        "string": "cpp",
++        "system_error": "cpp",
++        "thread": "cpp",
++        "tuple": "cpp",
++        "type_traits": "cpp",
++        "typeinfo": "cpp",
++        "utility": "cpp",
++        "xfacet": "cpp",
++        "xiosbase": "cpp",
++        "xlocale": "cpp",
++        "xlocbuf": "cpp",
++        "xlocinfo": "cpp",
++        "xlocmes": "cpp",
++        "xlocmon": "cpp",
++        "xlocnum": "cpp",
++        "xloctime": "cpp",
++        "xmemory": "cpp",
++        "xstddef": "cpp",
++        "xtr1common": "cpp",
++        "xtree": "cpp",
++        "cinttypes": "cpp",
++        "condition_variable": "cpp",
++        "functional": "cpp",
++        "list": "cpp",
++        "regex": "cpp",
++        "set": "cpp",
++        "unordered_map": "cpp",
++        "unordered_set": "cpp",
++        "xhash": "cpp"
++    }
++}
+\ No newline at end of file
+diff --git a/Thread-1/BUILD b/Thread-1/BUILD
+index 28f4114..94be188 100644
+--- a/Thread-1/BUILD
++++ b/Thread-1/BUILD
+@@ -1,5 +1,21 @@
+ ##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
+ 
++cc_binary(
++    name = "q0_my",
++    srcs = [
++        "q0_my.cc"
++            ],
++    deps = [
++        "//lib:instruction_lib",
++        "//lib:utils_lib",
++        "//lib:server_lib"
++    ],
++    copts = [
++        "-std=c++11",
++    ],
++    data = glob(["data/q0*"]),
++)
++
+ cc_binary(
+     name = "q0",
+     srcs = [
+@@ -29,6 +45,16 @@ cc_binary(
+     srcs = [
+         "q1.cc"
+             ],
++    deps = [
++        "//lib:instruction_lib",
++        "//lib:utils_lib",
++        "//lib:server_lib"
++    ],
++    copts = [
++        "-std=c++11",
++    ],
++    linkopts = ["-lpthread"],
++    data = glob(["data/q1*"]),
+ )
+ 
+ cc_binary(
+@@ -36,6 +62,16 @@ cc_binary(
+     srcs = [
+         "q2.cc"
+             ],
++    deps = [
++        "//lib:instruction_lib",
++        "//lib:utils_lib",
++        "//lib:server_lib"
++    ],
++    copts = [
++        "-std=c++11",
++    ],
++    linkopts = ["-lpthread"],
++    data = glob(["data/q2*"]),
+ )
+ 
+ cc_binary(
+@@ -43,6 +79,33 @@ cc_binary(
+     srcs = [
+         "q3.cc"
+             ],
++    deps = [
++        "//lib:instruction_lib",
++        "//lib:utils_lib",
++        "//lib:server_lib"
++    ],
++    copts = [
++        "-std=c++11",
++    ],
++    linkopts = ["-lpthread"],
++    data = glob(["data/q3*"]),
++)
++
++cc_binary(
++    name = "q4",
++    srcs = [
++        "q4.cc"
++            ],
++    deps = [
++        "//lib:instruction_lib",
++        "//lib:utils_lib",
++        "//lib:server_lib"
++    ],
++    copts = [
++        "-std=c++11",
++    ],
++    linkopts = ["-lpthread"],
++    data = glob(["data/q4*"]),
+ )
+ 
+ cc_test(
+diff --git a/Thread-1/README.md b/Thread-1/README.md
+index 52f2b01..8fd28b4 100644
+--- a/Thread-1/README.md
++++ b/Thread-1/README.md
+@@ -1,28 +1,16 @@
+ # Project 1: Multi-thread Programming
+ 
+-This project uses a (oversimplified) machine learning inference system to allow
+-you to put some basic OS concepts into practice and learn how system-level
+-optimizations help improve performance. 
+-
+-Suppose you are hired by a company to improve the efficiency of the optimization
+-process of a recommender system. This recommender system represents the users
+-and items (i.e. goods offered by the E-commerce platform) as vectors, and uses
+-these embedding vectors to calculate the semantic similarities between
+-user-user, user-item and item-item pairs. Since you are a system expert, the
+-company hopes you can improve the efficiency of the embedding maintenance of
+-the recommender system.
++This project uses a (oversimplified) machine learning inference system to allow you to put some basic OS concepts into practice and learn how system-level optimizations help improve performance.
++
++Suppose you are hired by a company to improve the efficiency of the optimization  process of a recommender system. This recommender system represents the users and items (i.e. goods offered by the E-commerce platform) as vectors, and uses these embedding vectors to calculate the semantic similarities between user-user, user-item and item-item pairs. Since you are a system expert, the company hopes you can improve the efficiency of the embedding maintenance of the recommender system.
+ 
+ ## Introduction
+ 
+-The AI algorithm engineers of the company explain the basics of the setup to
+-you, as follows.
++The AI algorithm engineers of the company explain the basics of the setup to you, as follows.
+ 
+ ### Embedding Vectors
+ 
+-Embedding vectors represent the entities (either a user or an item). These
+-vectors are stored as rows in an embedding matrix. These embedding vectors have
+-a property that the product of two embedding vectors (maybe after some
+-processing) indicates the similarity of the two corresponding entities.
++Embedding vectors represent the entities (either a user or an item). These vectors are stored as rows in an embedding matrix. These embedding vectors have a property that the product of two embedding vectors (maybe after some processing) indicates the similarity of the two corresponding entities.
+ 
+ ```bash
+ ...
+@@ -39,23 +27,13 @@ Three important operations on the embedding vectors are
+ 2. Updating the vectors after observing user activities (`update`).
+ 3. Recommend an item to a user from a list of items.
+ 
+-The embedding initialization is difficult, as there is few information about a
+-new entity. For a new user, a simple method is to randomly initialize the
+-embedding and run some cold start procedure (e.g. recommending some popular
+-item) to probe the user's interest. For a new item, we may expose them to highly
+-active users.
++The embedding initialization is difficult, as there is few information about a new entity. For a new user, a simple method is to randomly initialize the embedding and run some cold start procedure (e.g. recommending some popular item) to probe the user's interest. For a new item, we may expose them to highly active users.
+ 
+-After observing some user activities, we gather information about the users'
+-interest and items' popularity. To encode this information into the embeddings,
+-we need to update the embedding vectors with some optimization method (e.g.
+-gradient descent) where we pull in the distance between similar entities and
+-push away those dissimilar entities.
++After observing some user activities, we gather information about the users' interest and items' popularity. To encode this information into the embeddings, we need to update the embedding vectors with some optimization method (e.g. gradient descent) where we pull in the distance between similar entities and push away those dissimilar entities.
+ 
+ ## Embedding Holder
+ 
+-In this project, we utilize `EmbeddingHolder` (a collection of embeddings) as the database to store 
+-and update the company's data. Initially, we read data from `*.in` to create two basic `EmbeddingHolder` for **users**
+-and **items** respectively; our task is to update this database according to the incoming `Instruction`s.
++In this project, we utilize `EmbeddingHolder` (a collection of embeddings) as the database to store and update the company's data. Initially, we read data from `*.in` to create two basic `EmbeddingHolder` for **users** and **items** respectively; our task is to update this database according to the incoming `Instruction`s.
+ 
+ ### Codebase
+ 
+@@ -88,35 +66,21 @@ The project directory looks like this:
+ 
+ ```
+ 
+-The source files in `lib/` implements the basic interfaces of the system. The
+-`lib/embedding.h` contains the main interface of the embedding matrix data
+-holder. The mentioned operations on the embedding matrix are implemented in
+-`lib/model.h`. `Instruction` is in `lib/instruction.h`. The utilities are in `lib/utils.h`.
+-You find these files belongs to the AI team and you should not 
+-modify them, and do your optimization all from the system level. 
++The source files in `lib/` implements the basic interfaces of the system. The `lib/embedding.h` contains the main interface of the embedding matrix data holder. The mentioned operations on the embedding matrix are implemented in `lib/model.h`. `Instruction` is in `lib/instruction.h`. The utilities are in `lib/utils.h`. You find these files belongs to the AI team and you should not modify them, and do your optimization all from the system level.
+ 
+-The entrance of the program is in `q*.cc`.
+-You can modify everything in this project, except those tests in `lib`.
+-You should ensure that after your modification, it still passes the tests in `lib`.
++The entrance of the program is in `q*.cc`. You can modify everything in this project, except those tests in `lib`. You should ensure that after your modification, it still passes the tests in `lib`.
+ 
+-The project builds with the bazel build system, as we discussed in the
+-discussion session. You should install bazel following the online documents and
+-read the BUILD and WORKSPACE files carefully to understand the dependencies and
+-code structure. 
++The project builds with the bazel build system, as we discussed in the discussion session. You should install bazel following the online documents and read the BUILD and WORKSPACE files carefully to understand the dependencies and code structure.
+ 
+ ### Unit testing
+ 
+-Writing unit tests is an essential way to build and optimize system programs
+-and thus we would require that you include unit tests for all major functions
+-you write for your code. 
++Writing unit tests is an essential way to build and optimize system programs and thus we would require that you include unit tests for all major functions you write for your code.
+ 
+-We have provided test cases in the libraries for you as examples. Please do not
+-modify these unit tests.  You can modify library code, and add your own test cases
+-to the library test, but make sure that after your modification, our provided test cases still pass.
++We have provided test cases in the libraries for you as examples. Please do not modify these unit tests.  You can modify library code, and add your own test cases to the library test, but make sure that after your modification, our provided test cases still pass.
+ 
+ ### Format Checking
+ 
+- In this project we test the standard output stream for final grading, so make sure that you output the correct answer as you expect. We provide a format checking script in `format.cc`. You can modify it to test all output results of your submission. Run the format checking script after building it like this:
++In this project we test the standard output stream for final grading, so make sure that you output the correct answer as you expect. We provide a format checking script in `format.cc`. You can modify it to test all output results of your submission. Run the format checking script after building it like this:
+ 
+ ```bash
+ bazel-bin/q0 |grep [OUTPUT] > format.out && bazel-bin/format
+@@ -124,25 +88,13 @@ bazel-bin/q0 |grep [OUTPUT] > format.out && bazel-bin/format
+ 
+ ### Instruction Files
+ 
+-The workload of the company comes as `Instruction`s with `order` and `payload`
+-fields. Both fields are integers. In this project, the `Instruction.order` is
+-either 0, 1 or 2, indicating the task of "init", "update" or "recommend". The workflow
+-of different task types are different as described bellow.
+-
+-- For **“init”**, you should first create a new embedding. The payload is a
+-  list of existing embedding indeces in the input matrix (`EmbeddingHolder`) that
+-  are used for cold  start (downstream applications may use them for interest
+-  probing). You should add this new  embedding into the `EmbeddingHolder` using
+-  `append`. Then you need to call `cold_start`  for each of the embedding
+-  indeces. Note that after `cold_start`, **only user embeddings are updated**
+-  (see `q0.cc` for example).
+-
+-- For **“update”**, the payload is `[user_idx, item_idx, label, (iter_idx)]`. You should invoke
+-  the `calc_gradient` on these two embedding vectors from `lib/model.h` and then
+-  call `update_embedding` from `lib/embedding.h` **on both the user and the items**
+-  (see`project/embedding.cc:run_q0` for example). The `iter_idx` indicates the
+-  epoch number of current update, see Task-3 for information.
+-- For **"recommend"**, the the payload is `[user_idx, iter_idx, item_idx1, item_idx2, item_idx3, item_idx4, ...]`. You should invoke the `recommend` on these embedding vectors from `lib/model.h` and then output the result. 
++The workload of the company comes as `Instruction`s with `order` and `payload` fields. Both fields are integers. In this project, the `Instruction.order` is either 0, 1 or 2, indicating the task of "init", "update" or "recommend". The workflow of different task types are different as described bellow.
++
++- For **“init”**, you should first create a new embedding. The payload is a list of existing embedding indices in the input matrix (`EmbeddingHolder`) that are used for cold  start (downstream applications may use them for interest probing). You should add this new  embedding into the `EmbeddingHolder` using `append`. Then you need to call `cold_start`  for each of the embedding indices. Note that after `cold_start`, **only user embeddings are updated** (see `q0.cc` for example).
++
++- For **“update”**, the payload is `[user_idx, item_idx, label, (iter_idx)]`. You should invoke the `calc_gradient` on these two embedding vectors from `lib/model.h` and then call `update_embedding` from `lib/embedding.h` **on both the user and the items** (see`project/embedding.cc:run_q0` for example). The `iter_idx` indicates the epoch number of current update, see Task-3 for information.
++
++- For **"recommend"**, the the payload is `[user_idx, iter_idx, item_idx1, item_idx2, item_idx3, item_idx4, ...]`. You should invoke the `recommend` on these embedding vectors from `lib/model.h` and then output the result.
+ 
+ Note that NO provided functions are thread safe on their own.
+ 
+@@ -150,8 +102,7 @@ Note that NO provided functions are thread safe on their own.
+ 
+ For the following tasks, you should minimize duplicate code.  If there are code sharing among the following tasks, you should extract as much shared code as possible into separate `.h` and `.cc` library files, but not put everything into a single `.cc` file.  You should create your own `_test.cc` file for your library code.  20% of this project grade are reserved for good coding style (including the completeness of your own test cases).  
+ 
+-We recommend you to use the standard C++11 Threading to implement multi-threading.  However, please feel free to use any other
+-C++ threading library (such as `pthread`, or Intel's TBB to do the following task).  If you need external libraries, please include them in the `WORKSPACE` file and make them to install and build automatically.  The TAs are not obliged to manually install any libraries on the grading machine. 
++We recommend you to use the standard C++11 Threading to implement multi-threading.  However, please feel free to use any other C++ threading library (such as `pthread`, or Intel's TBB to do the following task).  If you need external libraries, please include them in the `WORKSPACE` file and make them to install and build automatically.  The TAs are not obliged to manually install any libraries on the grading machine.
+ 
+ ## Submission instructions
+ 
+@@ -165,55 +116,37 @@ To test whether your `.diff` works, clone a new repo and call `git apply ${STUDE
+ 
+ ## Task-0: Play with bazel build, the code and sanity check
+ 
+-In this task, you need to understand the project structure, read the `q0.cc` code and 
+-the `project/BUILD` files, install bazel, build and run the provided sample program and tests. 
+-This task is not included for grading.  Just provided as an example for you to read.  If you need more information
+-on the Bazel build system, please refer to
+-https://docs.bazel.build/versions/main/tutorial/cpp.html
+-
++In this task, you need to understand the project structure, read the `q0.cc` code and the `project/BUILD` files, install bazel, build and run the provided sample program and tests. This task is not included for grading.  Just provided as an example for you to read.  If you need more information on the Bazel build system, please refer to [https://docs.bazel.build/versions/main/tutorial/cpp.html]()
+ 
+-> **_NOTE:_** You can take this task's code as an example and benchmark for following tasks, 
+-but do not copy and paste this unoptimized code! Otherwise you will get penalized. Task-0 is not included in the final grading.
++> **_NOTE:_** You can take this task's code as an example and benchmark for following tasks, but do not copy and paste this unoptimized code! Otherwise you will get penalized. Task-0 is not included in the final grading.
+ 
+ > **_NOTE:_** Your code is not required to output exactly the same answer as `q0.cc`. You just need to guarantee your code is thread-safe.
+ 
+ ## Task-1: Supporting concurrent users
+ 
+-At the beginning, the recommender system is new and has very few items or users.
+-Fortunately, the company attracts more and more users.  Thus, we need to modify the system
+-so that when multiple users come in at the same time, and send `Instruction`s concurrently
+-the system could behave correctly and efficiently. 
++At the beginning, the recommender system is new and has very few items or users. Fortunately, the company attracts more and more users.  Thus, we need to modify the system so that when multiple users come in at the same time, and send `Instruction`s concurrently the system could behave correctly and efficiently.
+ 
+ **ToDo:**
+ 
+-In this task, your job is to process an `Instruction` set of "init" and "update". Considering that 
+-`cal_gradient`  is time-consuming (10s of seconds running time, mostly waiting for I/O), 
+-you should think of handling multiple `Instruction`s concurrently. Design 
+-a synchronization mechanism using locks to guarantee that your codes are thread-safe.  Output your final 
+-`EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()`.
++In this task, your job is to process an `Instruction` set of "init" and "update". Considering that `cal_gradient`  is time-consuming (10s of seconds running time, mostly waiting for I/O), you should think of handling multiple `Instruction`s concurrently. Design a synchronization mechanism using locks to guarantee that your codes are thread-safe.  Output your final `EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()`.
+ 
+-Again, note that NO provided functions are thread safe on their own. Feel free to modify these functions
+-in the `lib/` directory, but do not modify existing test cases there (you can add your own test cases).
++Again, note that NO provided functions are thread safe on their own. Feel free to modify these functions in the `lib/` directory, but do not modify existing test cases there (you can add your own test cases).
+ 
+ **Grading:**
+ 
+-You will be graded by both the correctness and efficiency of your calculation 
+-under heavy and arbitrary mixtures of incoming `Instruction`s.
++You will be graded by both the correctness and efficiency of your calculation under heavy and arbitrary mixtures of incoming `Instruction`s.
+ 
+-> **_NOTE:_** In this task, a single `Instruction` only runs in a single thread (i.e. no internal parallelism within an `Instruction`). 
++> **_NOTE:_** In this task, a single `Instruction` only runs in a single thread (i.e. no internal parallelism within an `Instruction`).
+ 
+ > **_NOTE:_** The correctness means thread-safety. We allow any order of updates, as long as it is thread-safe.
+ 
+ ## Task-2: Accelerate "Init" task through concurrency
+ 
+-Now the engineers find that it is still too slow to conduct each "init" task, as each of the task need to read multiple 
+-embeddings to perform the init.  
+-They hope to read and use these embeddings concurrently so shorten the time required to call a single "init".
+-We can further speed up the process by building an internally-concurrent "init" function.
++Now the engineers find that it is still too slow to conduct each "init" task, as each of the task need to read multiple embeddings to perform the init. They hope to read and use these embeddings concurrently so shorten the time required to call a single "init". We can further speed up the process by building an internally-concurrent "init" function.
+ 
+ **ToDo:**
+ 
+-In this task, your job is to process an `Instruction` set of "init" and "update". You can start with your codes in Task-1. Try to conduct multiple `cold_start`  in parallel and update the newly initialized embedding collectively without violating **thread-safety**.  Output your final `EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()` function.  Note that you still need to support multiple concurrent users. 
++In this task, your job is to process an `Instruction` set of "init" and "update". You can start with your codes in Task-1. Try to conduct multiple `cold_start`  in parallel and update the newly initialized embedding collectively without violating **thread-safety**.  Output your final `EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()` function.  Note that you still need to support multiple concurrent users.
+ 
+ **Grading:**
+ 
+@@ -221,11 +154,7 @@ You will be graded by the correctness and efficiency of your calculation.
+ 
+ ## Task-3: Supporting incremental embedding updates
+ 
+-Now the recommender system has many users and items. Everyday, the system
+-observes user activities and use them to update the embedding matrix for better
+-recommendation performance. In this task, you will need to implement the
+-updating process of the embedding matrix. The algorithm engineers of the company come up with a "genius" optimization
+-algorithm. This algorithm requires the optimizer to update the embeddings iteratively, and they call each iteration an *epoch*. This innovative epoch-based optimization differs from existing methods in that the calculation of later epochs depends on the results of earlier epochs. In this task, your job is to support this epoch-based update.
++Now the recommender system has many users and items. Everyday, the system observes user activities and use them to update the embedding matrix for better recommendation performance. In this task, you will need to implement the updating process of the embedding matrix. The algorithm engineers of the company come up with a "genius" optimization algorithm. This algorithm requires the optimizer to update the embeddings iteratively, and they call each iteration an *epoch*. This innovative epoch-based optimization differs from existing methods in that the calculation of later epochs depends on the results of earlier epochs. In this task, your job is to support this epoch-based update.
+ 
+ **ToDo:**
+ 
+@@ -237,12 +166,7 @@ You will be graded by the correctness and efficiency of your calculation.
+ 
+ ## Task-4: Doing recommendation while updating the embedding
+ 
+-Except the maintenance of the recommender system, the company also needs  to generate recommendations for each user using the 
+-existing database. The recommendation should depend on the current version of data and not disturb the maintenance of the 
+-recommender system.  Note that when an embedding update is going on, you can not at the same time read the embedding, as the 
+-embedding update is not an atomic operation.  As the embedding update can take a long time, and can be quite frequent, 
+-you need to figure out a way to allow recommendation to execute without getting blocked by the updates, and at the same time
+-allowing the update to happen, and being able to use some quite recent updated embedding values for recommendation.  
++Except the maintenance of the recommender system, the company also needs  to generate recommendations for each user using the existing database. The recommendation should depend on the current version of data and not disturb the maintenance of the recommender system.  Note that when an embedding update is going on, you can not at the same time read the embedding, as the embedding update is not an atomic operation.  As the embedding update can take a long time, and can be quite frequent, you need to figure out a way to allow recommendation to execute without getting blocked by the updates, and at the same time allowing the update to happen, and being able to use some quite recent updated embedding values for recommendation.  
+ 
+ **ToDo:**
+ 
+diff --git a/Thread-1/README.pdf b/Thread-1/README.pdf
+new file mode 100644
+index 0000000..35cb1d9
+diff --git a/Thread-1/lib/BUILD b/Thread-1/lib/BUILD
+index 07eb930..7fca563 100644
+--- a/Thread-1/lib/BUILD
++++ b/Thread-1/lib/BUILD
+@@ -1,5 +1,35 @@
+ ##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
+ 
++cc_library(
++    name = "server_lib",
++    srcs = [
++        "server.cc",
++        ],
++    hdrs = [
++        "server.h",
++        ],
++    deps = [
++        ":embedding_lib",
++		":instruction_lib",
++        ":model_lib",
++        ":utils_lib",
++    ],
++	visibility = [
++		"//visibility:public",
++	],
++)
++
++cc_test(
++  name = "server_lib_test",
++  size = "small",
++  srcs = ["server_test.cc"],
++  deps = [
++      "@gtest//:gtest_main",
++	  ":server_lib",
++      ":embedding_lib",
++      ],
++)
++
+ cc_library(
+     name = "utils_lib",
+     srcs = [
+diff --git a/Thread-1/lib/embedding.cc b/Thread-1/lib/embedding.cc
+index 966a76d..892c77c 100644
+--- a/Thread-1/lib/embedding.cc
++++ b/Thread-1/lib/embedding.cc
+@@ -1,7 +1,9 @@
++
+ #include <fstream>
+ #include <iostream>
+ #include <sstream>
+ #include <cmath>
++#include <mutex>
+ 
+ #include "utils.h"
+ #include "embedding.h"
+@@ -23,11 +25,22 @@ Embedding::Embedding(int length, double* data) {
+ }
+ 
+ Embedding::Embedding(Embedding* origin) {
++    std::lock_guard<std::mutex> lock(origin->mux);
+ 	int length = origin->get_length();
+     embbedingAssert(length > 0, "Non-positive length encountered!", NON_POSITIVE_LEN);
+     double* oldData = origin->get_data();
+     double* newData = new double[length];
+-    for(int i = 0; i<length; i++)newData[i] = oldData[i];
++    for(int i = 0; i<length; i++) newData[i] = oldData[i];
++    this->length = length;
++    this->data = newData;
++}
++
++Embedding::Embedding(Embedding const& origin) {
++	int length = origin.length;
++    embbedingAssert(length > 0, "Non-positive length encountered!", NON_POSITIVE_LEN);
++    double* oldData = origin.data;
++    double* newData = new double[length];
++    for(int i = 0; i<length; i++) newData[i] = oldData[i];
+     this->length = length;
+     this->data = newData;
+ }
+@@ -58,6 +71,8 @@ void Embedding::update(Embedding* gradient, double stepsize) {
+ }
+ 
+ std::string Embedding::to_string() {
++    std::lock_guard<std::mutex> lock(this->mux);
++
+     std::string res;
+     for (int i = 0; i < this->length; ++i) {
+         if (i > 0) res += ',';
+@@ -71,7 +86,7 @@ void Embedding::write_to_stdout() {
+     std::cout << prefix << this->to_string() << '\n';
+ }
+ 
+-Embedding Embedding::operator+(const Embedding &another) {
++Embedding Embedding::operator+(Embedding &another) {
+     double* data = new double[this->length];
+     for (int i = 0; i < this->length; ++i) {
+         data[i] = this->data[i] + another.data[i];
+@@ -87,7 +102,7 @@ Embedding Embedding::operator+(const double value) {
+     return Embedding(this->length, data);
+ }
+ 
+-Embedding Embedding::operator-(const Embedding &another) {
++Embedding Embedding::operator-(Embedding &another) {
+     double* data = new double[this->length];
+     for (int i = 0; i < this->length; ++i) {
+         data[i] = this->data[i] - another.data[i];
+@@ -103,7 +118,7 @@ Embedding Embedding::operator-(const double value) {
+     return Embedding(this->length, data);
+ }
+ 
+-Embedding Embedding::operator*(const Embedding &another) {
++Embedding Embedding::operator*(Embedding &another) {
+     double* data = new double[this->length];
+     for (int i = 0; i < this->length; ++i) {
+         data[i] = this->data[i] * another.data[i];
+@@ -119,7 +134,7 @@ Embedding Embedding::operator*(const double value) {
+     return Embedding(this->length, data);
+ }
+ 
+-Embedding Embedding::operator/(const Embedding &another) {
++Embedding Embedding::operator/(Embedding &another) {
+     double* data = new double[this->length];
+     for (int i = 0; i < this->length; ++i) {
+         data[i] = this->data[i] / another.data[i];
+@@ -135,7 +150,7 @@ Embedding Embedding::operator/(const double value) {
+     return Embedding(this->length, data);
+ }
+ 
+-bool Embedding::operator==(const Embedding &another) {
++bool Embedding::operator==(Embedding &another) {
+     for (int i = 0; i < this->length; ++i) {
+         if(fabs(this->data[i]-another.data[i])>1.0e-6)return false;
+     }
+@@ -174,20 +189,26 @@ EmbeddingMatrix EmbeddingHolder::read(std::string filename) {
+ }
+ 
+ int EmbeddingHolder::append(Embedding* data) {
++    std::lock_guard<std::mutex> lock(this->mux);
++
+     int indx = this->emb_matx.size();
+     embbedingAssert(
+-        data->get_length() == this->emb_matx[0]->get_length(),
++        indx == 0 | data->get_length() == this->emb_matx[0]->get_length(),
+         "Embedding to append has a different length!", LEN_MISMATCH
+     );
+     this->emb_matx.push_back(data);
++
++    this->cv.notify_all();
+     return indx;
+ }
+ 
+ void EmbeddingHolder::write(std::string filename) {
++    std::lock_guard<std::mutex> lock(this->mux);
++
+     std::ofstream ofs(filename);
+     if (ofs.is_open()) {
+         for (Embedding* emb: this->emb_matx) {
+-            ofs << emb->to_string() << '\n';
++            ofs << emb->to_string() + '\n';
+         }
+         ofs.close();
+     } else {
+@@ -196,9 +217,11 @@ void EmbeddingHolder::write(std::string filename) {
+ }
+ 
+ void EmbeddingHolder::write_to_stdout() {
++    std::lock_guard<std::mutex> lock(this->mux);
++
+     std::string prefix("[OUTPUT]");
+     for (Embedding* emb: this->emb_matx) {
+-        std::cout << prefix << emb->to_string() << '\n';
++        std::cout << prefix + emb->to_string() + '\n';
+     }
+ }
+ 
+@@ -208,16 +231,45 @@ EmbeddingHolder::~EmbeddingHolder() {
+     }
+ }
+ 
+-void EmbeddingHolder::update_embedding(
+-        int idx, EmbeddingGradient* gradient, double stepsize) {
+-    this->emb_matx[idx]->update(gradient, stepsize);
++void EmbeddingHolder::update_embedding(int idx, EmbeddingGradient* gradient, double stepsize) {
++    Embedding* emb = this->get_embedding(idx);
++    emb->lock();
++    emb->update(gradient, stepsize);
++    emb->unlock();
+ }
+ 
+-bool EmbeddingHolder::operator==(const EmbeddingHolder &another) {
+-    if (this->get_n_embeddings() != another.emb_matx.size())
++Embedding* EmbeddingHolder::get_embedding(int idx) {
++    std::unique_lock<std::mutex> lock(this->mux);
++
++    while (idx >= this->emb_matx.size()) {
++        this->cv.wait(lock);
++    }
++    return this->emb_matx[idx];
++}
++
++unsigned int EmbeddingHolder::get_n_embeddings() {
++    std::lock_guard<std::mutex> lock(this->mux);
++
++    return this->emb_matx.size();
++}
++
++int EmbeddingHolder::get_emb_length() {
++    std::lock_guard<std::mutex> lock(this->mux);
++
++    return this->emb_matx.empty()? 0: this->emb_matx[0]->get_length();
++}
++
++bool EmbeddingHolder::operator==(EmbeddingHolder &another) {
++    std::lock_guard<std::mutex> lock(this->mux);
++    std::lock_guard<std::mutex> lock1(another.mux);
++
++    if (this->emb_matx.size() != another.emb_matx.size())
+         return false;
++
+     for (int i = 0; i < (int)this->emb_matx.size(); ++i) {
+-        if(!(*(this->emb_matx[i]) == *(another.get_embedding(i)))){
++        std::lock_guard<std::mutex> lock2(this->emb_matx[i]->mux);
++        std::lock_guard<std::mutex> lock3(another.emb_matx[i]->mux);
++        if(!(*(this->emb_matx[i]) == *(another.emb_matx[i]))){
+         	return false;
+ 		}
+     }
+diff --git a/Thread-1/lib/embedding.h b/Thread-1/lib/embedding.h
+index 6e13d14..0be6f15 100644
+--- a/Thread-1/lib/embedding.h
++++ b/Thread-1/lib/embedding.h
+@@ -1,8 +1,16 @@
+ #ifndef THREAD_LIB_EMBEDDING_H_
+ #define THREAD_LIB_EMBEDDING_H_
+ 
++// Embedding:
++// Constructor and output method get lock automatically
++// get data, operaters will not get lock
++
++// EmbeddingHolder: all methods are safe
++
+ #include <string>
+ #include <vector>
++#include <mutex>
++#include <condition_variable>
+ 
+ namespace proj1 {
+ 
+@@ -18,6 +26,7 @@ public:
+     Embedding(int, double*);
+     Embedding(int, std::string);
+     Embedding(Embedding*);
++    Embedding(Embedding const&);
+     ~Embedding() { delete []this->data; }
+     double* get_data() { return this->data; }
+     int get_length() { return this->length; }
+@@ -25,15 +34,20 @@ public:
+     std::string to_string();
+     void write_to_stdout();
+     // Operators
+-    Embedding operator+(const Embedding&);
++    Embedding operator+(Embedding&);
+     Embedding operator+(const double);
+-    Embedding operator-(const Embedding&);
++    Embedding operator-(Embedding&);
+     Embedding operator-(const double);
+-    Embedding operator*(const Embedding&);
++    Embedding operator*(Embedding&);
+     Embedding operator*(const double);
+-    Embedding operator/(const Embedding&);
++    Embedding operator/(Embedding&);
+     Embedding operator/(const double);
+-    bool operator==(const Embedding&);
++    bool operator==(Embedding&);
++    //lock&unlock
++    std::mutex mux;
++    void lock() {this->mux.lock();}
++    void unlock() {this->mux.unlock();}
++
+ private:
+     int length;
+     double* data;
+@@ -52,14 +66,18 @@ public:
+     void write(std::string filename);
+     int append(Embedding *data);
+     void update_embedding(int, EmbeddingGradient*, double);
+-    Embedding* get_embedding(int idx) const { return this->emb_matx[idx]; } 
+-    unsigned int get_n_embeddings() { return this->emb_matx.size(); }
+-    int get_emb_length() {
+-        return this->emb_matx.empty()? 0: this->get_embedding(0)->get_length();
+-    }
+-    bool operator==(const EmbeddingHolder&);
++    Embedding* get_embedding(int idx);
++    unsigned int get_n_embeddings();
++    int get_emb_length();
++    bool operator==(EmbeddingHolder&);
++
+ private:
+     EmbeddingMatrix emb_matx;
++    // lock&unlock
++    std::mutex mux;
++    // void lock() {this->mux.lock();}
++    // void unlock() {this->mux.unlock();}
++    std::condition_variable cv;
+ };
+ 
+ } // namespace proj1
+diff --git a/Thread-1/lib/server.cc b/Thread-1/lib/server.cc
+new file mode 100644
+index 0000000..3cb4c74
+--- /dev/null
++++ b/Thread-1/lib/server.cc
+@@ -0,0 +1,281 @@
++
++#include <vector>
++#include <thread>
++#include <iostream>
++#include <mutex>
++
++#include "server.h"
++#include "model.h"
++#include "utils.h"
++
++#define TIMER(s) // proj1::AutoTimer timer(s)
++
++namespace proj1 {
++
++void Server::write_to_stdout() {
++    users.write_to_stdout();
++    items.write_to_stdout();
++}
++
++void Server::do_instruction(Instruction inst) {
++    switch(inst.order) {
++        case INIT_EMB: {
++            if (!useLock) {
++                do_init(inst);
++            } else if (!initParall) {
++                do_init_safe(inst);
++            } else {
++                do_init_parall(inst);
++            }
++            break;
++        }
++        case UPDATE_EMB: {
++            if (!useLock) {
++                do_update(inst);
++            } else if (!useEpoch) {
++                do_update_safe(inst);
++            } else {
++                do_update_epoch(inst);
++            }
++            break;
++        }
++        case RECOMMEND: {
++            if (!useLock) {
++                Embedding* emb = do_recommend(inst);
++                emb->write_to_stdout();
++            } else if (!useEpoch) {
++                Embedding* emb = do_recommend_safe(inst);
++                emb->write_to_stdout();
++            } else {
++                Embedding* emb = do_recommend_epoch(inst);
++                emb->write_to_stdout();
++            }
++        }
++    }
++}
++
++void Server::do_init(Instruction inst) {
++    TIMER("do_init");
++
++    int length = users.get_emb_length();
++    Embedding* new_user = new Embedding(length);
++    int user_idx = users.append(new_user);
++
++    for (int item_index: inst.payloads) {
++        Embedding* item_emb = items.get_embedding(item_index);
++
++        EmbeddingGradient* gradient = cold_start(new_user, item_emb);
++        users.update_embedding(user_idx, gradient, 0.01);
++        delete gradient;
++    }
++}
++
++void Server::do_init_safe(Instruction inst) {
++    TIMER("do_init_safe");
++
++    int length = users.get_emb_length();
++    Embedding* new_user = new Embedding(length);
++    int user_idx = users.append(new_user);
++
++    for (int item_index: inst.payloads) {
++        Embedding* item_emb = items.get_embedding(item_index);
++
++        Embedding* user = new Embedding(new_user);
++        Embedding* item = new Embedding(item_emb);
++        EmbeddingGradient* gradient = cold_start(user, item);
++        delete user, item;
++
++        users.update_embedding(user_idx, gradient, 0.01);
++        delete gradient;
++    }
++}
++
++void Server::do_init_parall(Instruction inst) {
++    TIMER("do_init_parall");
++
++    int length = users.get_emb_length();
++    Embedding* new_user = new Embedding(length);
++    int user_idx = users.append(new_user);
++
++    std::vector<std::thread*> threads;
++    for (int item_index: inst.payloads) {
++        std::thread* t = new std::thread(
++            [&, item_index]() {
++                Embedding* item_emb = items.get_embedding(item_index);
++
++                Embedding* user = new Embedding(new_user);
++                Embedding* item = new Embedding(item_emb);
++                EmbeddingGradient* gradient = cold_start(user, item);
++                delete user, item;
++
++                users.update_embedding(user_idx, gradient, 0.01);
++                delete gradient;
++            }
++        );
++        threads.push_back(t);
++    }
++    for (std::thread* t: threads) {
++        t->join();
++        delete t;
++    }
++}
++
++void Server::do_update(Instruction inst) {
++    TIMER("do_update");
++
++    std::cout << "do_update" << std::endl;
++    int user_idx = inst.payloads[0];
++    int item_idx = inst.payloads[1];
++    int label = inst.payloads[2];
++
++    Embedding* user_emb = users.get_embedding(user_idx);
++    Embedding* item_emb = items.get_embedding(item_idx);
++
++    EmbeddingGradient* gradient = calc_gradient(user_emb, item_emb, label);
++    users.update_embedding(user_idx, gradient, 0.01);
++    delete gradient;
++
++    gradient = calc_gradient(item_emb, user_emb, label);
++    items.update_embedding(item_idx, gradient, 0.001);
++    delete gradient;
++}
++
++void Server::do_update_safe(Instruction inst) {
++    TIMER("do_update_safe");
++
++    int user_idx = inst.payloads[0];
++    int item_idx = inst.payloads[1];
++    int label = inst.payloads[2];
++
++    Embedding* user_emb = users.get_embedding(user_idx);
++    Embedding* item_emb = items.get_embedding(item_idx);
++
++    auto user = new Embedding(user_emb);
++    auto item = new Embedding(item_emb);
++    EmbeddingGradient* gradient = calc_gradient(user, item, label);
++    delete user, item;
++
++    users.update_embedding(user_idx, gradient, 0.01);
++    delete gradient;
++
++    user = new Embedding(user_emb);
++    item = new Embedding(item_emb);
++    gradient = calc_gradient(item, user, label);
++    delete user, item;
++
++    items.update_embedding(item_idx, gradient, 0.001);
++    delete gradient;
++}
++
++void Server::do_update_epoch(Instruction inst) {
++    int iter_idx = inst.payloads[3];
++{
++    std::unique_lock<std::mutex> lock(this->mux);
++    while (!(this->epoch >= iter_idx || (this->epoch == iter_idx - 1 && this->num_threads == 0))) {
++        this->cv.wait(lock);
++    }
++    if (this->epoch == iter_idx - 1 && this->num_threads == 0) {
++        this->epoch = iter_idx;
++    }
++    this->num_threads++;
++}
++
++    TIMER("do_update_inst");
++
++    int user_idx = inst.payloads[0];
++    int item_idx = inst.payloads[1];
++    int label = inst.payloads[2];
++
++    Embedding* user_emb = users.get_embedding(user_idx);
++    Embedding* item_emb = items.get_embedding(item_idx);
++
++    auto user = new Embedding(user_emb);
++    auto item = new Embedding(item_emb);
++    EmbeddingGradient* gradient = calc_gradient(user, item, label);
++    delete user, item;
++
++    users.update_embedding(user_idx, gradient, 0.01);
++    delete gradient;
++
++    user = new Embedding(user_emb);
++    item = new Embedding(item_emb);
++    gradient = calc_gradient(item, user, label);
++    delete user, item;
++
++    items.update_embedding(item_idx, gradient, 0.001);
++    delete gradient;
++
++{
++    std::unique_lock<std::mutex> lock(this->mux);
++    this->num_threads--;
++    this->cv.notify_all();
++}
++}
++
++Embedding* Server::do_recommend(Instruction inst) {
++    TIMER("do_recommend");
++
++    int user_idx = inst.payloads[0];
++    Embedding* user = users.get_embedding(user_idx);
++
++    std::vector<Embedding*> item_pool;
++    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
++        int item_idx = inst.payloads[i];
++        item_pool.push_back(items.get_embedding(item_idx));
++    }
++
++    Embedding* recommendation = recommend(user, item_pool);
++    return recommendation;
++}
++
++Embedding* Server::do_recommend_safe(Instruction inst) {
++    TIMER("do_recommend_safe");
++
++    int user_idx = inst.payloads[0];
++    Embedding* user = users.get_embedding(user_idx);
++    std::lock_guard<std::mutex> lock(user->mux);
++
++    std::vector<Embedding*> item_pool;
++    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
++        int item_idx = inst.payloads[i];
++        Embedding* item = items.get_embedding(item_idx);
++        std::lock_guard<std::mutex> lock(item->mux);
++        item_pool.push_back(item);
++    }
++
++    Embedding* recommendation = recommend(user, item_pool);
++    return recommendation;
++}
++
++Embedding* Server::do_recommend_epoch(Instruction inst) {
++    int iter_idx = inst.payloads[1];
++{
++    std::unique_lock<std::mutex> lock(this->mux);
++    while (!(this->epoch > iter_idx | (this->epoch == iter_idx && this->num_threads == 0))) {
++        this->cv.wait(lock);
++    }
++}
++
++    TIMER("do_recommend_epoch");
++
++    int user_idx = inst.payloads[0];
++    Embedding* user = users.get_embedding(user_idx);
++    std::lock_guard<std::mutex> lock(user->mux);
++
++    std::vector<Embedding*> item_pool;
++    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
++        int item_idx = inst.payloads[i];
++        Embedding* item = items.get_embedding(item_idx);
++        std::lock_guard<std::mutex> lock(item->mux);
++        item_pool.push_back(item);
++    }
++
++    Embedding* recommendation = recommend(user, item_pool);
++    return recommendation;
++}
++
++bool Server::operator==(Server& svr) {
++    return this->users == svr.users && this->items == svr.items;
++}
++
++} // namespace proj1
+diff --git a/Thread-1/lib/server.h b/Thread-1/lib/server.h
+new file mode 100644
+index 0000000..c893a40
+--- /dev/null
++++ b/Thread-1/lib/server.h
+@@ -0,0 +1,48 @@
++#ifndef THREAD_LIB_SERVER_H_
++#define THREAD_LIB_SERVER_H_
++
++#include <mutex>
++#include <condition_variable>
++#include "instruction.h"
++#include "embedding.h"
++
++namespace proj1 {
++
++class Server {
++public:
++    Server(std::string user_filename, std::string item_filename) : users(user_filename), items(item_filename) {}
++    Server(std::string user_filename, std::string item_filename, bool initParall, bool useLock, bool useEpoch)
++        : users(user_filename), items(item_filename), initParall(initParall), useLock(useLock), useEpoch(useEpoch) {}
++    void do_instruction(Instruction);
++    void write_to_stdout();
++
++    void do_init(Instruction);
++    void do_init_safe(Instruction);
++    void do_init_parall(Instruction);
++
++    void do_update(Instruction);
++    void do_update_safe(Instruction);
++    void do_update_epoch(Instruction);
++
++    Embedding* do_recommend(Instruction);
++    Embedding* do_recommend_safe(Instruction);
++    Embedding* do_recommend_epoch(Instruction);
++
++    bool operator==(Server&);
++
++private:
++    bool initParall = false;
++    bool useLock = false;
++    bool useEpoch = false;
++
++    int epoch = -1;
++    int num_threads = 0; // number of update threads running in this epoch
++    std::mutex mux;
++    std::condition_variable cv;
++
++    EmbeddingHolder users;
++    EmbeddingHolder items;
++};
++
++} // namespace proj1
++#endif // THREAD_LIB_SERVER_H_
+diff --git a/Thread-1/lib/server_test.cc b/Thread-1/lib/server_test.cc
+new file mode 100644
+index 0000000..036212b
+--- /dev/null
++++ b/Thread-1/lib/server_test.cc
+@@ -0,0 +1,53 @@
++#include <gtest/gtest.h>
++#include <vector>
++
++#include "server.h"
++#include "embedding.h"
++
++namespace proj1 {
++namespace testing {
++
++class ServerTest : public ::testing::Test {
++protected:
++    void SetUp() {
++        server1 = new Server("data/q4.in", "data/q4.in");
++        server2 = new Server("data/q4.in", "data/q4.in");
++        server3 = new Server("data/q4.in", "data/q4.in");
++
++        inst_init = new Instruction("0 0 1 2 3 4 5 6 7 8");
++        inst_update = new Instruction("1 7 5 0 0");
++        inst_recommend = new Instruction("2 2 -1 4 5 6 3 7 9");
++    }
++    Server *server1, *server2, *server3;
++    Instruction *inst_init, *inst_update, *inst_recommend;
++};
++
++TEST_F(ServerTest, test_init) {
++    server1->do_init(*inst_init);
++    server2->do_init_safe(*inst_init);
++    EXPECT_EQ((*server1) == (*server2), true);
++}
++
++TEST_F(ServerTest, test_update) {
++    server1->do_update(*inst_update);
++    server2->do_update_safe(*inst_update);
++    server3->do_update_epoch(*inst_update);
++    EXPECT_EQ((*server1) == (*server2), true);
++    EXPECT_EQ((*server2) == (*server3), true);
++}
++
++TEST_F(ServerTest, test_recommend) {
++    Embedding* emb1 = server1->do_recommend(*inst_recommend);
++    Embedding* emb2 = server2->do_recommend_safe(*inst_recommend);
++    Embedding* emb3 = server3->do_recommend_epoch(*inst_recommend);
++    EXPECT_EQ((*emb1) == (*emb2), true);
++    EXPECT_EQ((*emb2) == (*emb3), true);
++}
++    
++} // namespace testing
++} // namespace proj1
++
++int main(int argc, char** argv) {
++    testing::InitGoogleTest(&argc, argv);
++    return RUN_ALL_TESTS();
++}
+diff --git a/Thread-1/lib/utils.cc b/Thread-1/lib/utils.cc
+index 3427314..a440602 100644
+--- a/Thread-1/lib/utils.cc
++++ b/Thread-1/lib/utils.cc
+@@ -8,7 +8,9 @@
+ namespace proj1 {
+ 
+ void a_slow_function(int seconds) {
+-    //std::this_thread::sleep_for(std::chrono::seconds(seconds));
++    if (slow_function) {
++        std::this_thread::sleep_for(std::chrono::timescale(seconds));
++    }
+ }
+ 
+ double sigmoid(double x) {
+@@ -39,7 +41,7 @@ AutoTimer::AutoTimer(std::string name) :
+ AutoTimer::~AutoTimer() {
+     auto end = std::chrono::high_resolution_clock::now();
+     auto dur = std::chrono::duration_cast<std::chrono::microseconds>(end - m_beg);
+-    std::cout << m_name << " : " << dur.count() << " usec\n";
++    std::cout << m_name + " : " + std::to_string(dur.count()) + " usec\n";
+ }
+ 
+ } // namespace proj1
+diff --git a/Thread-1/lib/utils.h b/Thread-1/lib/utils.h
+index 9f85001..398acbe 100644
+--- a/Thread-1/lib/utils.h
++++ b/Thread-1/lib/utils.h
+@@ -6,6 +6,10 @@
+ #include <iostream>
+ #include <chrono>  // for AutoTimer function
+ 
++// slow_function
++#define slow_function true
++#define timescale seconds
++
+ // For colored outputs in terminal
+ #define RST  "\x1B[0m"
+ #define KRED  "\x1B[31m"
+diff --git a/Thread-1/q0_my.cc b/Thread-1/q0_my.cc
+new file mode 100644
+index 0000000..f7f992a
+--- /dev/null
++++ b/Thread-1/q0_my.cc
+@@ -0,0 +1,29 @@
++#include <vector>
++#include <tuple>
++
++#include <string>   // string
++#include <chrono>   // timer
++
++#include "lib/utils.h"
++#include "lib/server.h"
++#include "lib/instruction.h"
++
++int main(int argc, char *argv[]) {
++
++    proj1::Server server("data/q0.in", "data/q0.in");
++
++    proj1::Instructions instructions = proj1::read_instructrions("data/q0_instruction.tsv");
++
++    {
++        proj1::AutoTimer timer("q0");  // using this to print out timing of the block
++        // Run all the instructions
++        for (proj1::Instruction inst: instructions) {
++            server.do_instruction(inst);
++        }
++    }
++
++    // Write the result
++    server.write_to_stdout();
++
++    return 0;
++}
+diff --git a/Thread-1/q1.cc b/Thread-1/q1.cc
+index 974ad23..395470a 100644
+--- a/Thread-1/q1.cc
++++ b/Thread-1/q1.cc
+@@ -1,5 +1,39 @@
+-#include <iostream> // cout, endl
++#include <vector>
++#include <tuple>
++
++#include <string>   // string
++#include <chrono>   // timer
++#include <thread>
++#include <vector>
++
++#include "lib/utils.h"
++#include "lib/server.h"
++#include "lib/instruction.h"
++
+ int main(int argc, char *argv[]) {
+-    std::cout << "please implement this function\n";
+-    exit(1);
+-}
+\ No newline at end of file
++
++    proj1::Server server("data/q1.in", "data/q1.in", false, true, false);
++
++    proj1::Instructions instructions = proj1::read_instructrions("data/q1_instruction.tsv");
++
++    {
++        proj1::AutoTimer timer("q1");  // using this to print out timing of the block
++        // Run all the instructions
++
++        std::vector<std::thread*> threads;
++
++        for (proj1::Instruction inst: instructions) {
++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
++            threads.push_back(t);
++        }
++        for (auto t: threads) {
++            t->join();
++            delete t;
++        }
++    }
++
++    // Write the result
++    server.write_to_stdout();
++
++    return 0;
++}
+diff --git a/Thread-1/q2.cc b/Thread-1/q2.cc
+index c4b7413..bdc561f 100644
+--- a/Thread-1/q2.cc
++++ b/Thread-1/q2.cc
+@@ -1,4 +1,39 @@
+-#include <iostream> // cout, endl
++#include <vector>
++#include <tuple>
++
++#include <string>   // string
++#include <chrono>   // timer
++#include <thread>
++#include <vector>
++
++#include "lib/utils.h"
++#include "lib/server.h"
++#include "lib/instruction.h"
++
+ int main(int argc, char *argv[]) {
+-    exit(1);
+-}
+\ No newline at end of file
++
++    proj1::Server server("data/q2.in", "data/q2.in", true, true, false);
++
++    proj1::Instructions instructions = proj1::read_instructrions("data/q2_instruction.tsv");
++
++    {
++        proj1::AutoTimer timer("q2");  // using this to print out timing of the block
++        // Run all the instructions
++        
++        std::vector<std::thread*> threads;
++
++        for (proj1::Instruction inst: instructions) {
++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
++            threads.push_back(t);
++        }
++        for (auto t: threads) {
++            t->join();
++            delete t;
++        }
++    }
++
++    // Write the result
++    server.write_to_stdout();
++
++    return 0;
++}
+diff --git a/Thread-1/q3.cc b/Thread-1/q3.cc
+index c4b7413..9a22363 100644
+--- a/Thread-1/q3.cc
++++ b/Thread-1/q3.cc
+@@ -1,4 +1,39 @@
+-#include <iostream> // cout, endl
++#include <vector>
++#include <tuple>
++
++#include <string>   // string
++#include <chrono>   // timer
++#include <thread>
++#include <vector>
++
++#include "lib/utils.h"
++#include "lib/server.h"
++#include "lib/instruction.h"
++
+ int main(int argc, char *argv[]) {
+-    exit(1);
+-}
+\ No newline at end of file
++
++    proj1::Server server("data/q3.in", "data/q3.in", true, true, true);
++
++    proj1::Instructions instructions = proj1::read_instructrions("data/q3_instruction.tsv");
++
++    {
++        proj1::AutoTimer timer("q3");  // using this to print out timing of the block
++        // Run all the instructions
++        
++        std::vector<std::thread*> threads;
++
++        for (proj1::Instruction inst: instructions) {
++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
++            threads.push_back(t);
++        }
++        for (auto t: threads) {
++            t->join();
++            delete t;
++        }
++    }
++
++    // Write the result
++    server.write_to_stdout();
++
++    return 0;
++}
+diff --git a/Thread-1/q4.cc b/Thread-1/q4.cc
+new file mode 100644
+index 0000000..ab2ac15
+--- /dev/null
++++ b/Thread-1/q4.cc
+@@ -0,0 +1,36 @@
++#include <vector>
++#include <tuple>
++
++#include <string>   // string
++#include <chrono>   // timer
++#include <thread>
++#include <vector>
++
++#include "lib/utils.h"
++#include "lib/server.h"
++#include "lib/instruction.h"
++
++int main(int argc, char *argv[]) {
++
++    proj1::Server server("data/q4.in", "data/q4.in", true, true, true);
++
++    proj1::Instructions instructions = proj1::read_instructrions("data/q4_instruction.tsv");
++
++    {
++        proj1::AutoTimer timer("q4");  // using this to print out timing of the block
++        // Run all the instructions
++        
++        std::vector<std::thread*> threads;
++
++        for (proj1::Instruction inst: instructions) {
++            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
++            threads.push_back(t);
++        }
++        for (auto t: threads) {
++            t->join();
++            delete t;
++        }
++    }
++
++    return 0;
++}
diff --git a/Thread-1/BUILD b/Thread-1/BUILD
index 28f4114..02118cd 100644
--- a/Thread-1/BUILD
+++ b/Thread-1/BUILD
@@ -1,5 +1,21 @@
 ##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
 
+cc_binary(
+    name = "q0_my",
+    srcs = [
+        "q0_my.cc"
+            ],
+    deps = [
+        "//lib:instruction_lib",
+        "//lib:utils_lib",
+        "//lib:server_lib"
+    ],
+    copts = [
+        "-std=c++11",
+    ],
+    data = glob(["data/q0*"]),
+)
+
 cc_binary(
     name = "q0",
     srcs = [
@@ -29,6 +45,16 @@ cc_binary(
     srcs = [
         "q1.cc"
             ],
+    deps = [
+        "//lib:instruction_lib",
+        "//lib:utils_lib",
+        "//lib:server_lib"
+    ],
+    copts = [
+        "-std=c++11",
+    ],
+    linkopts = ["-lpthread"],
+    data = glob(["data/q1*"]),
 )
 
 cc_binary(
@@ -36,6 +62,16 @@ cc_binary(
     srcs = [
         "q2.cc"
             ],
+    deps = [
+        "//lib:instruction_lib",
+        "//lib:utils_lib",
+        "//lib:server_lib"
+    ],
+    copts = [
+        "-std=c++11",
+    ],
+    linkopts = ["-lpthread"],
+    data = glob(["data/q2*"]),
 )
 
 cc_binary(
@@ -43,6 +79,50 @@ cc_binary(
     srcs = [
         "q3.cc"
             ],
+    deps = [
+        "//lib:instruction_lib",
+        "//lib:utils_lib",
+        "//lib:server_lib"
+    ],
+    copts = [
+        "-std=c++11",
+    ],
+    linkopts = ["-lpthread"],
+    data = glob(["data/q3*"]),
+)
+
+cc_binary(
+    name = "q4",
+    srcs = [
+        "q4.cc"
+            ],
+    deps = [
+        "//lib:instruction_lib",
+        "//lib:utils_lib",
+        "//lib:server_lib"
+    ],
+    copts = [
+        "-std=c++11",
+    ],
+    linkopts = ["-lpthread"],
+    data = glob(["data/q4*"]),
+)
+
+cc_binary(
+    name = "q5",
+    srcs = [
+        "q5.cc"
+            ],
+    deps = [
+        "//lib:instruction_lib",
+        "//lib:utils_lib",
+        "//lib:server_lib"
+    ],
+    copts = [
+        "-std=c++11",
+    ],
+    linkopts = ["-lpthread"],
+    data = glob(["data/q4*"]),
 )
 
 cc_test(
diff --git a/Thread-1/README.md b/Thread-1/README.md
index a53ec7b..0fb82c9 100644
--- a/Thread-1/README.md
+++ b/Thread-1/README.md
@@ -1,28 +1,16 @@
 # Project 1: Multi-thread Programming
 
-This project uses a (oversimplified) machine learning inference system to allow
-you to put some basic OS concepts into practice and learn how system-level
-optimizations help improve performance. 
-
-Suppose you are hired by a company to improve the efficiency of the optimization
-process of a recommender system. This recommender system represents the users
-and items (i.e. goods offered by the E-commerce platform) as vectors, and uses
-these embedding vectors to calculate the semantic similarities between
-user-user, user-item and item-item pairs. Since you are a system expert, the
-company hopes you can improve the efficiency of the embedding maintenance of
-the recommender system.
+This project uses a (oversimplified) machine learning inference system to allow you to put some basic OS concepts into practice and learn how system-level optimizations help improve performance.
+
+Suppose you are hired by a company to improve the efficiency of the optimization  process of a recommender system. This recommender system represents the users and items (i.e. goods offered by the E-commerce platform) as vectors, and uses these embedding vectors to calculate the semantic similarities between user-user, user-item and item-item pairs. Since you are a system expert, the company hopes you can improve the efficiency of the embedding maintenance of the recommender system.
 
 ## Introduction
 
-The AI algorithm engineers of the company explain the basics of the setup to
-you, as follows.
+The AI algorithm engineers of the company explain the basics of the setup to you, as follows.
 
 ### Embedding Vectors
 
-Embedding vectors represent the entities (either a user or an item). These
-vectors are stored as rows in an embedding matrix. These embedding vectors have
-a property that the product of two embedding vectors (maybe after some
-processing) indicates the similarity of the two corresponding entities.
+Embedding vectors represent the entities (either a user or an item). These vectors are stored as rows in an embedding matrix. These embedding vectors have a property that the product of two embedding vectors (maybe after some processing) indicates the similarity of the two corresponding entities.
 
 ```bash
 ...
@@ -39,23 +27,13 @@ Three important operations on the embedding vectors are
 2. Updating the vectors after observing user activities (`update`).
 3. Recommend an item to a user from a list of items.
 
-The embedding initialization is difficult, as there is few information about a
-new entity. For a new user, a simple method is to randomly initialize the
-embedding and run some cold start procedure (e.g. recommending some popular
-item) to probe the user's interest. For a new item, we may expose them to highly
-active users.
+The embedding initialization is difficult, as there is few information about a new entity. For a new user, a simple method is to randomly initialize the embedding and run some cold start procedure (e.g. recommending some popular item) to probe the user's interest. For a new item, we may expose them to highly active users.
 
-After observing some user activities, we gather information about the users'
-interest and items' popularity. To encode this information into the embeddings,
-we need to update the embedding vectors with some optimization method (e.g.
-gradient descent) where we pull in the distance between similar entities and
-push away those dissimilar entities.
+After observing some user activities, we gather information about the users' interest and items' popularity. To encode this information into the embeddings, we need to update the embedding vectors with some optimization method (e.g. gradient descent) where we pull in the distance between similar entities and push away those dissimilar entities.
 
 ## Embedding Holder
 
-In this project, we utilize `EmbeddingHolder` (a collection of embeddings) as the database to store 
-and update the company's data. Initially, we read data from `*.in` to create two basic `EmbeddingHolder` for **users**
-and **items** respectively; our task is to update this database according to the incoming `Instruction`s.
+In this project, we utilize `EmbeddingHolder` (a collection of embeddings) as the database to store and update the company's data. Initially, we read data from `*.in` to create two basic `EmbeddingHolder` for **users** and **items** respectively; our task is to update this database according to the incoming `Instruction`s.
 
 ### Codebase
 
@@ -88,35 +66,21 @@ The project directory looks like this:
 
 ```
 
-The source files in `lib/` implements the basic interfaces of the system. The
-`lib/embedding.h` contains the main interface of the embedding matrix data
-holder. The mentioned operations on the embedding matrix are implemented in
-`lib/model.h`. `Instruction` is in `lib/instruction.h`. The utilities are in `lib/utils.h`.
-You find these files belongs to the AI team and you should not 
-modify them, and do your optimization all from the system level. 
+The source files in `lib/` implements the basic interfaces of the system. The `lib/embedding.h` contains the main interface of the embedding matrix data holder. The mentioned operations on the embedding matrix are implemented in `lib/model.h`. `Instruction` is in `lib/instruction.h`. The utilities are in `lib/utils.h`. You find these files belongs to the AI team and you should not modify them, and do your optimization all from the system level.
 
-The entrance of the program is in `q*.cc`.
-You can modify everything in this project, except those tests in `lib`.
-You should ensure that after your modification, it still passes the tests in `lib`.
+The entrance of the program is in `q*.cc`. You can modify everything in this project, except those tests in `lib`. You should ensure that after your modification, it still passes the tests in `lib`.
 
-The project builds with the bazel build system, as we discussed in the
-discussion session. You should install bazel following the online documents and
-read the BUILD and WORKSPACE files carefully to understand the dependencies and
-code structure. 
+The project builds with the bazel build system, as we discussed in the discussion session. You should install bazel following the online documents and read the BUILD and WORKSPACE files carefully to understand the dependencies and code structure.
 
 ### Unit testing
 
-Writing unit tests is an essential way to build and optimize system programs
-and thus we would require that you include unit tests for all major functions
-you write for your code. 
+Writing unit tests is an essential way to build and optimize system programs and thus we would require that you include unit tests for all major functions you write for your code.
 
-We have provided test cases in the libraries for you as examples. Please do not
-modify these unit tests.  You can modify library code, and add your own test cases
-to the library test, but make sure that after your modification, our provided test cases still pass.
+We have provided test cases in the libraries for you as examples. Please do not modify these unit tests.  You can modify library code, and add your own test cases to the library test, but make sure that after your modification, our provided test cases still pass.
 
 ### Format Checking
 
- In this project we test the standard output stream for final grading, so make sure that you output the correct answer as you expect. We provide a format checking script in `format.cc`. You can modify it to test all output results of your submission. Run the format checking script after building it like this:
+In this project we test the standard output stream for final grading, so make sure that you output the correct answer as you expect. We provide a format checking script in `format.cc`. You can modify it to test all output results of your submission. Run the format checking script after building it like this:
 
 ```bash
 bazel-bin/q0 |grep [OUTPUT] > format.out && bazel-bin/format
@@ -124,25 +88,13 @@ bazel-bin/q0 |grep [OUTPUT] > format.out && bazel-bin/format
 
 ### Instruction Files
 
-The workload of the company comes as `Instruction`s with `order` and `payload`
-fields. Both fields are integers. In this project, the `Instruction.order` is
-either 0, 1 or 2, indicating the task of "init", "update" or "recommend". The workflow
-of different task types are different as described bellow.
-
-- For **“init”**, you should first create a new embedding. The payload is a
-  list of existing embedding indeces in the input matrix (`EmbeddingHolder`) that
-  are used for cold  start (downstream applications may use them for interest
-  probing). You should add this new  embedding into the `EmbeddingHolder` using
-  `append`. Then you need to call `cold_start`  for each of the embedding
-  indeces. Note that after `cold_start`, **only user embeddings are updated**
-  (see `q0.cc` for example).
-
-- For **“update”**, the payload is `[user_idx, item_idx, label, (iter_idx)]`. You should invoke
-  the `calc_gradient` on these two embedding vectors from `lib/model.h` and then
-  call `update_embedding` from `lib/embedding.h` **on both the user and the items**
-  (see`project/embedding.cc:run_q0` for example). The `iter_idx` indicates the
-  epoch number of current update, see Task-3 for information.
-- For **"recommend"**, the the payload is `[user_idx, iter_idx, item_idx1, item_idx2, item_idx3, item_idx4, ...]`. You should invoke the `recommend` on these embedding vectors from `lib/model.h` and then output the result. 
+The workload of the company comes as `Instruction`s with `order` and `payload` fields. Both fields are integers. In this project, the `Instruction.order` is either 0, 1 or 2, indicating the task of "init", "update" or "recommend". The workflow of different task types are different as described bellow.
+
+- For **“init”**, you should first create a new embedding. The payload is a list of existing embedding indices in the input matrix (`EmbeddingHolder`) that are used for cold  start (downstream applications may use them for interest probing). You should add this new  embedding into the `EmbeddingHolder` using `append`. Then you need to call `cold_start`  for each of the embedding indices. Note that after `cold_start`, **only user embeddings are updated** (see `q0.cc` for example).
+
+- For **“update”**, the payload is `[user_idx, item_idx, label, (iter_idx)]`. You should invoke the `calc_gradient` on these two embedding vectors from `lib/model.h` and then call `update_embedding` from `lib/embedding.h` **on both the user and the items** (see`project/embedding.cc:run_q0` for example). The `iter_idx` indicates the epoch number of current update, see Task-3 for information.
+
+- For **"recommend"**, the the payload is `[user_idx, iter_idx, item_idx1, item_idx2, item_idx3, item_idx4, ...]`. You should invoke the `recommend` on these embedding vectors from `lib/model.h` and then output the result.
 
 Note that NO provided functions are thread safe on their own.
 
@@ -150,70 +102,51 @@ Note that NO provided functions are thread safe on their own.
 
 For the following tasks, you should minimize duplicate code.  If there are code sharing among the following tasks, you should extract as much shared code as possible into separate `.h` and `.cc` library files, but not put everything into a single `.cc` file.  You should create your own `_test.cc` file for your library code.  20% of this project grade are reserved for good coding style (including the completeness of your own test cases).  
 
-We recommend you to use the standard C++11 Threading to implement multi-threading.  However, please feel free to use any other
-C++ threading library (such as `pthread`, or Intel's TBB to do the following task).  If you need external libraries, please include them in the `WORKSPACE` file and make them to install and build automatically.  The TAs are not obliged to manually install any libraries on the grading machine. 
+We recommend you to use the standard C++11 Threading to implement multi-threading.  However, please feel free to use any other C++ threading library (such as `pthread`, or Intel's TBB to do the following task).  If you need external libraries, please include them in the `WORKSPACE` file and make them to install and build automatically.  The TAs are not obliged to manually install any libraries on the grading machine.
 
 ## Submission instructions
 
 You should create a `.diff` file of your latest commit from the latest commit of the main project on learn.tsinghua, as follows:
 
 ```bash
-git diff MAIN_REPO_COMMIT_SHA 1YOUR_COMMIT_SHA1 > ${STUDENT_ID_1}_${STUDENT_ID_2}.diff
+git diff MAIN_REPO_COMMIT_SHA1 YOUR_COMMIT_SHA1 > ${STUDENT_ID_1}_${STUDENT_ID_2}.diff
 ```
 
 To test whether your `.diff` works, clone a new repo and call `git apply ${STUDENT_ID_1}_${STUDENT_ID_2}.diff` and see if your code still works.
 
 ## Task-0: Play with bazel build, the code and sanity check
 
-In this task, you need to understand the project structure, read the `q0.cc` code and 
-the `project/BUILD` files, install bazel, build and run the provided sample program and tests. 
-This task is not included for grading.  Just provided as an example for you to read.  If you need more information
-on the Bazel build system, please refer to
-https://docs.bazel.build/versions/main/tutorial/cpp.html
+In this task, you need to understand the project structure, read the `q0.cc` code and the `project/BUILD` files, install bazel, build and run the provided sample program and tests. This task is not included for grading.  Just provided as an example for you to read.  If you need more information on the Bazel build system, please refer to [https://docs.bazel.build/versions/main/tutorial/cpp.html]()
 
-
-> **_NOTE:_** You can take this task's code as an example and benchmark for following tasks, 
-but do not copy and paste this unoptimized code! Otherwise you will get penalized. Task-0 is not included in the final grading.
+> **_NOTE:_** You can take this task's code as an example and benchmark for following tasks, but do not copy and paste this unoptimized code! Otherwise you will get penalized. Task-0 is not included in the final grading.
 
 > **_NOTE:_** Your code is not required to output exactly the same answer as `q0.cc`. You just need to guarantee your code is thread-safe.
 
 ## Task-1: Supporting concurrent users
 
-At the beginning, the recommender system is new and has very few items or users.
-Fortunately, the company attracts more and more users.  Thus, we need to modify the system
-so that when multiple users come in at the same time, and send `Instruction`s concurrently
-the system could behave correctly and efficiently. 
+At the beginning, the recommender system is new and has very few items or users. Fortunately, the company attracts more and more users.  Thus, we need to modify the system so that when multiple users come in at the same time, and send `Instruction`s concurrently the system could behave correctly and efficiently.
 
 **ToDo:**
 
-In this task, your job is to process an `Instruction` set of "init" and "update". Considering that 
-`cal_gradient`  is time-consuming (10s of seconds running time, mostly waiting for I/O), 
-you should think of handling multiple `Instruction`s concurrently. Design 
-a synchronization mechanism using locks to guarantee that your codes are thread-safe.  Output your final 
-`EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()`.
+In this task, your job is to process an `Instruction` set of "init" and "update". Considering that `cal_gradient`  is time-consuming (10s of seconds running time, mostly waiting for I/O), you should think of handling multiple `Instruction`s concurrently. Design a synchronization mechanism using locks to guarantee that your codes are thread-safe.  Output your final `EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()`.
 
-Again, note that NO provided functions are thread safe on their own. Feel free to modify these functions
-in the `lib/` directory, but do not modify existing test cases there (you can add your own test cases).
+Again, note that NO provided functions are thread safe on their own. Feel free to modify these functions in the `lib/` directory, but do not modify existing test cases there (you can add your own test cases).
 
 **Grading:**
 
-You will be graded by both the correctness and efficiency of your calculation 
-under heavy and arbitrary mixtures of incoming `Instruction`s.
+You will be graded by both the correctness and efficiency of your calculation under heavy and arbitrary mixtures of incoming `Instruction`s.
 
-> **_NOTE:_** In this task, a single `Instruction` only runs in a single thread (i.e. no internal parallelism within an `Instruction`). 
+> **_NOTE:_** In this task, a single `Instruction` only runs in a single thread (i.e. no internal parallelism within an `Instruction`).
 
 > **_NOTE:_** The correctness means thread-safety. We allow any order of updates, as long as it is thread-safe.
 
 ## Task-2: Accelerate "Init" task through concurrency
 
-Now the engineers find that it is still too slow to conduct each "init" task, as each of the task need to read multiple 
-embeddings to perform the init.  
-They hope to read and use these embeddings concurrently so shorten the time required to call a single "init".
-We can further speed up the process by building an internally-concurrent "init" function.
+Now the engineers find that it is still too slow to conduct each "init" task, as each of the task need to read multiple embeddings to perform the init. They hope to read and use these embeddings concurrently so shorten the time required to call a single "init". We can further speed up the process by building an internally-concurrent "init" function.
 
 **ToDo:**
 
-In this task, your job is to process an `Instruction` set of "init" and "update". You can start with your codes in Task-1. Try to conduct multiple `cold_start`  in parallel and update the newly initialized embedding collectively without violating **thread-safety**.  Output your final `EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()` function.  Note that you still need to support multiple concurrent users. 
+In this task, your job is to process an `Instruction` set of "init" and "update". You can start with your codes in Task-1. Try to conduct multiple `cold_start`  in parallel and update the newly initialized embedding collectively without violating **thread-safety**.  Output your final `EmbeddingHolder` of **1) users and 2) items** using the provided `EmbeddingHolder::write_to_stdout()` function.  Note that you still need to support multiple concurrent users.
 
 **Grading:**
 
@@ -221,11 +154,7 @@ You will be graded by the correctness and efficiency of your calculation.
 
 ## Task-3: Supporting incremental embedding updates
 
-Now the recommender system has many users and items. Everyday, the system
-observes user activities and use them to update the embedding matrix for better
-recommendation performance. In this task, you will need to implement the
-updating process of the embedding matrix. The algorithm engineers of the company come up with a "genius" optimization
-algorithm. This algorithm requires the optimizer to update the embeddings iteratively, and they call each iteration an *epoch*. This innovative epoch-based optimization differs from existing methods in that the calculation of later epochs depends on the results of earlier epochs. In this task, your job is to support this epoch-based update.
+Now the recommender system has many users and items. Everyday, the system observes user activities and use them to update the embedding matrix for better recommendation performance. In this task, you will need to implement the updating process of the embedding matrix. The algorithm engineers of the company come up with a "genius" optimization algorithm. This algorithm requires the optimizer to update the embeddings iteratively, and they call each iteration an *epoch*. This innovative epoch-based optimization differs from existing methods in that the calculation of later epochs depends on the results of earlier epochs. In this task, your job is to support this epoch-based update.
 
 **ToDo:**
 
@@ -237,12 +166,7 @@ You will be graded by the correctness and efficiency of your calculation.
 
 ## Task-4: Doing recommendation while updating the embedding
 
-Except the maintenance of the recommender system, the company also needs  to generate recommendations for each user using the 
-existing database. The recommendation should depend on the current version of data and not disturb the maintenance of the 
-recommender system.  Note that when an embedding update is going on, you can not at the same time read the embedding, as the 
-embedding update is not an atomic operation.  As the embedding update can take a long time, and can be quite frequent, 
-you need to figure out a way to allow recommendation to execute without getting blocked by the updates, and at the same time
-allowing the update to happen, and being able to use some quite recent updated embedding values for recommendation.  
+Except the maintenance of the recommender system, the company also needs  to generate recommendations for each user using the existing database. The recommendation should depend on the current version of data and not disturb the maintenance of the recommender system.  Note that when an embedding update is going on, you can not at the same time read the embedding, as the embedding update is not an atomic operation.  As the embedding update can take a long time, and can be quite frequent, you need to figure out a way to allow recommendation to execute without getting blocked by the updates, and at the same time allowing the update to happen, and being able to use some quite recent updated embedding values for recommendation.  
 
 **ToDo:**
 
@@ -255,19 +179,3 @@ In this task, the input `Instruction`  set contains all three types of tasks: "i
 **Grading:**
 
 You will be graded by the correctness and delay of your recommendation (from the programs' start to recommend result output), as well as being able to read the updated embedding after a relatively short period of time.
-
-## Task-5: Inplace recommendation and update
-
-The goal of this task is the same as Task-4, except that you need to implement in-place updates and recommendations.
-That is, you should not copy embeddings and then do the calculation on the copies.
-Other instructions stay the same as Task-4. If your implementations are already an in-place version in Task-4,
-you should implement a version that copies the embeddings from the embedding holder (this
-one should be faster, as it trades space for time).
-
-**ToDo:**
-
-Similar with Task-4, you should output the recommend result as soon as you get it by calling the provided `Embedding::write_to_stdout()` (we accept all possible order of correct outputs). The delay of recommender response will impact your final score.  There is no need to output the final `EmbeddingHolder` in this tasks.
-
-**Grading:**
-
-You will be graded by the correctness and delay of your recommendation (from the programs' start to recommend result output), as well as being able to read the updated embedding after a relatively short period of time.
diff --git a/Thread-1/README.pdf b/Thread-1/README.pdf
new file mode 100644
index 0000000000000000000000000000000000000000..f66b59f5b6128e41604cb8afa7d1d7a442270be6
GIT binary patch
literal 104260
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
U9(S38@(YRy3lVd2DrqbK7axsRApigX

literal 0
HcmV?d00001

diff --git a/Thread-1/WORKSPACE b/Thread-1/WORKSPACE
index 6760453..6d24ab2 100644
--- a/Thread-1/WORKSPACE
+++ b/Thread-1/WORKSPACE
@@ -1,15 +1,15 @@
-load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
-
-## google test dependency
-http_archive(
-  name = "gtest",
-  urls = ["https://github.com.cnpmjs.org/google/googletest/archive/refs/tags/release-1.11.0.zip"],
-  strip_prefix = "googletest-release-1.11.0",
-)
-## google benchmark dependency
-http_archive(
-  name = "gbench",
-  urls = ["https://github.com.cnpmjs.org/google/benchmark/archive/refs/tags/v1.6.0.zip"],
-  strip_prefix = "benchmark-1.6.0",
-  sha256 = "3da225763533aa179af8438e994842be5ca72e4a7fed4d7976dc66c8c4502f58"
-)
+load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
+
+## google test dependency
+http_archive(
+  name = "gtest",
+  urls = ["https://github.com.cnpmjs.org/google/googletest/archive/refs/tags/release-1.11.0.zip"],
+  strip_prefix = "googletest-release-1.11.0",
+)
+## google benchmark dependency
+http_archive(
+  name = "gbench",
+  urls = ["https://github.com.cnpmjs.org/google/benchmark/archive/refs/tags/v1.6.0.zip"],
+  strip_prefix = "benchmark-1.6.0",
+  sha256 = "3da225763533aa179af8438e994842be5ca72e4a7fed4d7976dc66c8c4502f58"
+)
diff --git a/Thread-1/benchmark.cc b/Thread-1/benchmark.cc
index 43b1f43..2c5fc84 100644
--- a/Thread-1/benchmark.cc
+++ b/Thread-1/benchmark.cc
@@ -1,23 +1,23 @@
-/*
- * This file provides an example of how to do automatic benchmark.  Feel free
- * to modify and use this tool.
- */
-
-#include <benchmark/benchmark.h>
-
-static void BM_StringCreation(benchmark::State& state) {
-  for (auto _ : state)
-    std::string empty_string;
-}
-// Register the function as a benchmark
-BENCHMARK(BM_StringCreation);
-
-// Define another benchmark
-static void BM_StringCopy(benchmark::State& state) {
-  std::string x = "hello";
-  for (auto _ : state)
-    std::string copy(x);
-}
-BENCHMARK(BM_StringCopy);
-
+/*
+ * This file provides an example of how to do automatic benchmark.  Feel free
+ * to modify and use this tool.
+ */
+
+#include <benchmark/benchmark.h>
+
+static void BM_StringCreation(benchmark::State& state) {
+  for (auto _ : state)
+    std::string empty_string;
+}
+// Register the function as a benchmark
+BENCHMARK(BM_StringCreation);
+
+// Define another benchmark
+static void BM_StringCopy(benchmark::State& state) {
+  std::string x = "hello";
+  for (auto _ : state)
+    std::string copy(x);
+}
+BENCHMARK(BM_StringCopy);
+
 BENCHMARK_MAIN();
\ No newline at end of file
diff --git a/Thread-1/data/q0.in b/Thread-1/data/q0.in
index a7e4563..f9a8604 100644
--- a/Thread-1/data/q0.in
+++ b/Thread-1/data/q0.in
@@ -1,20 +1,20 @@
--0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
-0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
--0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
-0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
--0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
-0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
--0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
--0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
-0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
-0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
-0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
-0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
-0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
-0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
-0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
-0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
--0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
-0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
-0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
--0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
+-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
+0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
+-0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
+0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
+-0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
+0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
+-0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
+-0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
+0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
+0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
+0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
+0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
+0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
+0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
+0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
+0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
+-0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
+0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
+0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
+-0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
diff --git a/Thread-1/data/q0_instruction.tsv b/Thread-1/data/q0_instruction.tsv
index 7447456..65e950a 100644
--- a/Thread-1/data/q0_instruction.tsv
+++ b/Thread-1/data/q0_instruction.tsv
@@ -1,20 +1,20 @@
-1 3 5 1
-1 1 2 0
-1 7 5 0
-1 2 9 1
-0 0 1 2 3 4 5 6 7 8
-0 7 3 5 9
-1 1 2 0
-1 0 6 1
-2 7 -1 1 5 6
-1 4 5 0
-1 3 8 1
-0 5 6 2 9
-0 1 2 3 5 7 8 9
-1 3 7 1
-1 8 9 0
-2 8 -1 3 2 4 6
-2 3 -1 1 7 8 9
-1 1 3 1
-1 2 4 0
+1 3 5 1
+1 1 2 0
+1 7 5 0
+1 2 9 1
+0 0 1 2 3 4 5 6 7 8
+0 7 3 5 9
+1 1 2 0
+1 0 6 1
+2 7 -1 1 5 6
+1 4 5 0
+1 3 8 1
+0 5 6 2 9
+0 1 2 3 5 7 8 9
+1 3 7 1
+1 8 9 0
+2 8 -1 3 2 4 6
+2 3 -1 1 7 8 9
+1 1 3 1
+1 2 4 0
 2 2 -1 4 5 6 3 7 9
\ No newline at end of file
diff --git a/Thread-1/data/q1.in b/Thread-1/data/q1.in
index a7e4563..f9a8604 100644
--- a/Thread-1/data/q1.in
+++ b/Thread-1/data/q1.in
@@ -1,20 +1,20 @@
--0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
-0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
--0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
-0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
--0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
-0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
--0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
--0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
-0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
-0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
-0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
-0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
-0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
-0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
-0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
-0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
--0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
-0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
-0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
--0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
+-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
+0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
+-0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
+0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
+-0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
+0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
+-0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
+-0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
+0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
+0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
+0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
+0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
+0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
+0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
+0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
+0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
+-0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
+0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
+0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
+-0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
diff --git a/Thread-1/data/q1_instruction.tsv b/Thread-1/data/q1_instruction.tsv
index c1f5312..8caae94 100644
--- a/Thread-1/data/q1_instruction.tsv
+++ b/Thread-1/data/q1_instruction.tsv
@@ -1,11 +1,11 @@
-0 0 1 2 3 4 5 6 7 8
-0 7 3 5 9
-1 1 3 0
-0 8 4 2 0
-1 7 3 1
-1 4 5 1
-1 3 6 0
-1 9 7 0
-0 5 6 2 9
-0 1 2 3 5 7 8 9
+0 0 1 2 3 4 5 6 7 8
+0 7 3 5 9
+1 1 3 0
+0 8 4 2 0
+1 7 3 1
+1 4 5 1
+1 3 6 0
+1 9 7 0
+0 5 6 2 9
+0 1 2 3 5 7 8 9
 1 7 8 1
\ No newline at end of file
diff --git a/Thread-1/data/q2.in b/Thread-1/data/q2.in
index a7e4563..f9a8604 100644
--- a/Thread-1/data/q2.in
+++ b/Thread-1/data/q2.in
@@ -1,20 +1,20 @@
--0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
-0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
--0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
-0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
--0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
-0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
--0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
--0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
-0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
-0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
-0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
-0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
-0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
-0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
-0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
-0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
--0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
-0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
-0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
--0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
+-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
+0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
+-0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
+0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
+-0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
+0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
+-0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
+-0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
+0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
+0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
+0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
+0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
+0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
+0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
+0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
+0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
+-0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
+0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
+0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
+-0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
diff --git a/Thread-1/data/q2_instruction.tsv b/Thread-1/data/q2_instruction.tsv
index c1f5312..8caae94 100644
--- a/Thread-1/data/q2_instruction.tsv
+++ b/Thread-1/data/q2_instruction.tsv
@@ -1,11 +1,11 @@
-0 0 1 2 3 4 5 6 7 8
-0 7 3 5 9
-1 1 3 0
-0 8 4 2 0
-1 7 3 1
-1 4 5 1
-1 3 6 0
-1 9 7 0
-0 5 6 2 9
-0 1 2 3 5 7 8 9
+0 0 1 2 3 4 5 6 7 8
+0 7 3 5 9
+1 1 3 0
+0 8 4 2 0
+1 7 3 1
+1 4 5 1
+1 3 6 0
+1 9 7 0
+0 5 6 2 9
+0 1 2 3 5 7 8 9
 1 7 8 1
\ No newline at end of file
diff --git a/Thread-1/data/q3.in b/Thread-1/data/q3.in
index a7e4563..f9a8604 100644
--- a/Thread-1/data/q3.in
+++ b/Thread-1/data/q3.in
@@ -1,20 +1,20 @@
--0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
-0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
--0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
-0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
--0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
-0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
--0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
--0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
-0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
-0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
-0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
-0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
-0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
-0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
-0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
-0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
--0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
-0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
-0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
--0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
+-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
+0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
+-0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
+0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
+-0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
+0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
+-0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
+-0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
+0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
+0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
+0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
+0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
+0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
+0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
+0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
+0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
+-0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
+0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
+0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
+-0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
diff --git a/Thread-1/data/q3_instruction.tsv b/Thread-1/data/q3_instruction.tsv
index b2fcc3e..ba24d97 100644
--- a/Thread-1/data/q3_instruction.tsv
+++ b/Thread-1/data/q3_instruction.tsv
@@ -1,16 +1,16 @@
-1 3 5 1 0
-1 1 2 0 0
-1 7 5 0 0
-0 0 1 2 3 4 5 6 7 8
-0 7 3 5 9
-1 2 9 1 0
-1 1 2 0 1
-1 0 6 1 1
-0 5 6 2 9
-0 1 2 3 5 7 8 9
-1 4 5 0 1
-1 3 8 1 1
-1 3 7 1 2
-1 8 9 0 2
-1 1 3 1 2
+1 3 5 1 0
+1 1 2 0 0
+1 7 5 0 0
+0 0 1 2 3 4 5 6 7 8
+0 7 3 5 9
+1 2 9 1 0
+1 1 2 0 1
+1 0 6 1 1
+0 5 6 2 9
+0 1 2 3 5 7 8 9
+1 4 5 0 1
+1 3 8 1 1
+1 3 7 1 2
+1 8 9 0 2
+1 1 3 1 2
 1 2 4 0 2
\ No newline at end of file
diff --git a/Thread-1/data/q4.in b/Thread-1/data/q4.in
index a7e4563..f9a8604 100644
--- a/Thread-1/data/q4.in
+++ b/Thread-1/data/q4.in
@@ -1,20 +1,20 @@
--0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
-0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
--0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
-0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
--0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
-0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
--0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
--0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
-0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
-0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
-0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
-0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
-0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
-0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
-0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
-0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
--0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
-0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
-0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
--0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
+-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923
+0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552
+-0.5965568413505009,0.09650184318674637,0.6008404234282114,-0.36476902674868983,-0.010850908242431956,0.764068687448312,0.07574350440340671,0.17571450752937356,-0.8171966361630094,0.9651584811421219,-0.3418701780268467,0.9853471761319244,-0.12550940725520165,0.4589100006311786,0.43815748442548386,0.9705357673477955
+0.993889214450193,-0.8189165981690414,0.04917164289121412,-0.7530365630876577,-0.5538830208217513,0.7583652630943165,0.5543977049957343,-0.6234411607408261,-0.2594219505869344,0.0167988118252671,-0.9217323318156883,-0.375213018259823,0.14784668217470842,-0.4692513166767862,0.46235112775477427,0.12296988932525932
+-0.8793341414217637,-0.6402283188497377,0.8392493288060314,0.023482332116210758,-0.5409383253499991,0.8026327950872136,-0.6065373556670386,0.6888084300076232,-0.6283940592555368,0.10147943389628145,0.4827634350786061,-0.13302981763357224,-0.8807152975057908,-0.6541439052369178,-0.7731928918072759,0.6164384986356892
+0.9848390793791464,0.2336479492878787,-0.03581470862613423,-0.8796023192670523,0.5757823579359684,0.4491579106812056,-0.43149525961566915,0.14167627382710624,0.34228128171791594,-0.2656195346653807,0.7945511727589767,-0.7664247140996134,-0.5167707200070257,0.6757407501481238,-0.5685784054255085,-0.3597641456495462
+-0.013661589999800272,-0.3281489497763481,0.6389047534972294,0.1308792365227054,0.6332312852857147,-0.389048890374591,-0.3305466717642904,-0.5076957991101425,-0.15749182415532226,0.06288417881265196,0.253734952831729,0.8002038247377463,0.7459378274158079,0.14471765507189738,-0.23974711356596567,0.7190494207848193
+-0.6587322596474383,0.8188365658683667,0.42662072473113843,0.5901480016293985,0.6997960743722469,-0.5835849054098734,-0.0546100350906209,0.5148383481529748,-0.12147445994822359,-0.8878647172685175,0.1736021960155516,-0.9482031277658456,-0.6706006901814101,0.02039879794445243,0.17722047160627552,-0.5494459255600357
+0.9944516034519038,-0.3667188868126192,0.8558822460007307,-0.11788994189674207,0.4133418160765052,0.6792171996618557,-0.39354826424460554,-0.6382183058167172,-0.01935460173085035,0.6440893996546722,0.3983825520058324,0.32435721973088016,0.8086605772838129,-0.9865423205310249,0.7685581047510504,0.3649709247610369
+0.9645480139613929,0.007196954322446603,0.3849464304311927,-0.41534968585835896,0.6183302711548755,0.7512952065856064,0.977605872321677,-0.5219496942098161,-0.6065793782427835,0.6395091775321222,-0.7753491496848779,-0.31947902475201295,0.8310764785432989,-0.24086418179731117,0.6548171271848247,-0.7181518576226569
+0.10392572926221488,-0.9960228458666913,0.24329774396832815,-0.007218902680639516,-0.46195227850059095,-0.22775292095809907,0.5170986426079844,-0.7688755830562746,0.6197879642909672,-0.717524054421105,-0.6467295750993614,-0.40342368981638144,-0.7557089006225057,-0.9128424548604341,0.06240545314310686,0.920623279292037
+0.5322136506908903,0.23456943299825506,0.18432121230114462,-0.7046448159652592,0.023340437548953652,0.786530595546846,0.5679613131398791,-0.28283023164734433,-0.3681440982708415,-0.9011465943870665,0.473634360349672,-0.2639152637035911,-0.43369123809007704,-0.6889606734993332,-0.815371507078462,-0.9454666540836327
+0.7652343420138252,-0.2013918947613924,-0.0005331899975180576,0.7748728133468059,0.458158934313285,-0.7951029735775395,-0.0008126921912403606,0.686312638422669,-0.3770741710608334,-0.5294596394231117,-0.005926822002298104,0.24279879316979835,0.9164519844007226,-0.5078482312789123,-0.36721418512784276,0.9432087887762335
+0.7222771339189791,-0.005454696303068385,-0.2915134501204564,-0.7750734383650992,0.11723817845525897,0.5938360682630202,-0.010768256677477828,0.707408394316926,-0.5112327016133762,-0.7811099248727826,0.009951608581912241,-0.9732203623144933,0.5584545603101057,0.1105202142888062,-0.5694403298492954,-0.5994379771008778
+0.16162361494760624,-0.38704335280463753,-0.24854788977398545,0.30634162979715196,-0.9589719891404087,-0.28267606687891167,0.3221538699420512,-0.14910428273091658,0.9826883395419368,0.8508936334056303,0.6357584934988769,-0.5769135998104313,0.09376796925103226,-0.7821970510219409,-0.4663891893964558,-0.831632538112201
+0.6781753267827875,0.33905137367641647,0.8568353804544486,-0.8044271187219234,0.8877682037516639,-0.42203276645299903,0.3018591966647832,0.4258736457862886,0.2516337015828114,-0.07738276731259952,0.27310534966390354,0.7807176102748643,0.898884317161128,0.6441762343991813,0.6359073989739275,-0.11625956839410301
+-0.07355380841233794,-0.5991475894981364,0.48881631753298627,0.8946664818555352,-0.371995389237056,-0.8401918579894088,-0.591993878817975,0.15712232369874823,0.450549308287469,-0.8996673112741782,-0.8791981995418927,-0.03761206035791265,-0.5700742657864488,-0.9387493444567108,-0.8726216475381954,-0.7551117821103108
+0.735759638534258,0.5266432943362018,-0.8262895940291652,0.6882150373152043,-0.7506471583585688,-0.04982341472396001,-0.7949918517940822,-0.44235127186122525,-0.9882223934879146,-0.4441028983344111,0.5519251325075518,0.6516444941449673,-0.3163693937495182,0.6633576579373552,-0.14305762257033017,-0.917498174903457
+0.689026547247694,0.8862140749559642,-0.45937080150886866,-0.13100395155291333,0.3676584062185373,0.2613141202862099,-0.12666968197987072,-0.41039307001428993,0.5753567913599895,-0.5411831823678792,0.7960685297548984,-0.16290877512290147,-0.12264052078463594,0.8722752925535249,-0.5794202635727537,-0.5970693001492524
+-0.02170263409045292,0.697648704435414,-0.11226839738443095,-0.8622529689920502,0.7835929345134811,0.1860181129625269,0.4094767632543719,0.44077211442817377,-0.695785490796218,-0.6610229471283056,0.38672965984834384,-0.1503230719293971,0.09955025998329337,0.895028592696677,0.7080541552493977,-0.30929665194905875
diff --git a/Thread-1/data/q4_instruction.tsv b/Thread-1/data/q4_instruction.tsv
index 57d9916..2dc12d6 100644
--- a/Thread-1/data/q4_instruction.tsv
+++ b/Thread-1/data/q4_instruction.tsv
@@ -1,20 +1,20 @@
-1 3 5 1 0
-1 1 2 0 0
-1 7 5 0 0
-1 2 9 1 0
-0 0 1 2 3 4 5 6 7 8
-0 7 3 5 9
-1 1 2 0 1
-1 0 6 1 1
-2 7 0 0 1 5 6
-1 4 5 0 1
-1 3 8 1 1
-0 5 6 2 9
-0 1 2 3 5 7 8 9
-1 3 7 1 2
-1 8 9 0 2
-2 8 1 0 3 2 4 6
-2 3 2 1 7 8 9
-1 1 3 1 2
-1 2 4 0 2
+1 3 5 1 0
+1 1 2 0 0
+1 7 5 0 0
+1 2 9 1 0
+0 0 1 2 3 4 5 6 7 8
+0 7 3 5 9
+1 1 2 0 1
+1 0 6 1 1
+2 7 0 0 1 5 6
+1 4 5 0 1
+1 3 8 1 1
+0 5 6 2 9
+0 1 2 3 5 7 8 9
+1 3 7 1 2
+1 8 9 0 2
+2 8 1 0 3 2 4 6
+2 3 2 1 7 8 9
+1 1 3 1 2
+1 2 4 0 2
 2 2 -1 4 5 6 3 7 9
\ No newline at end of file
diff --git a/Thread-1/lib/BUILD b/Thread-1/lib/BUILD
index 07eb930..c264255 100644
--- a/Thread-1/lib/BUILD
+++ b/Thread-1/lib/BUILD
@@ -1,100 +1,130 @@
-##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
-
-cc_library(
-    name = "utils_lib",
-    srcs = [
-        "utils.cc",
-        ],
-    hdrs = [
-        "utils.h",
-        ],
-	visibility = [
-		"//visibility:public",
-	],
-)
-
-cc_test(
-  name = "utils_lib_test",
-  size = "small",
-  srcs = ["util_test.cc"],
-  deps = [
-      "@gtest//:gtest_main",
-	  ":utils_lib",
-      ],
-)
-
-cc_library(
-    name = "embedding_lib",
-    srcs = [
-        "embedding.cc",
-        ],
-    hdrs = [
-        "embedding.h",
-        ],
-	deps = [
-        ":utils_lib"
-    ],
-	visibility = [
-		"//visibility:public",
-	],
-)
-
-cc_test(
-  name = "embedding_lib_test",
-  size = "small",
-  srcs = ["embedding_test.cc"],
-  deps = [
-      "@gtest//:gtest_main",
-	  ":embedding_lib",
-      ],
-)
-
-cc_library(
-    name = "instruction_lib",
-    srcs = [
-        "instruction.cc",
-        ],
-    hdrs = [
-        "instruction.h",
-        ],
-	visibility = [
-		"//visibility:public",
-	],
-)
-
-cc_test(
-  name = "instruction_lib_test",
-  size = "small",
-  srcs = ["instruction_test.cc"],
-  deps = [
-      "@gtest//:gtest_main",
-	  ":instruction_lib",
-      ],
-)
-
-cc_library(
-    name = "model_lib",
-    srcs = [
-        "model.cc",
-        ],
-    hdrs = [
-        "model.h",
-        ],
-	deps = [
-        ":embedding_lib",
-		":utils_lib",
-    ],
-	visibility = [
-		"//visibility:public",
-	],
-)
-
-cc_test(
-  name = "model_lib_test",
-  size = "large",
-  srcs = ["model_test.cc"],
-  deps = [
-      "@gtest//:gtest_main",
-	  ":model_lib",
-      ],
+##load("@rules_cc//cc:defs.bzl", "cc_test")  #load the test target
+
+cc_library(
+    name = "server_lib",
+    srcs = [
+        "server.cc",
+        ],
+    hdrs = [
+        "server.h",
+        ],
+    deps = [
+        ":embedding_lib",
+		":instruction_lib",
+        ":model_lib",
+        ":utils_lib",
+    ],
+	visibility = [
+		"//visibility:public",
+	],
+)
+
+cc_test(
+  name = "server_lib_test",
+  size = "small",
+  srcs = ["server_test.cc"],
+  deps = [
+      "@gtest//:gtest_main",
+	  ":server_lib",
+      ":embedding_lib",
+      ],
+)
+
+cc_library(
+    name = "utils_lib",
+    srcs = [
+        "utils.cc",
+        ],
+    hdrs = [
+        "utils.h",
+        ],
+	visibility = [
+		"//visibility:public",
+	],
+)
+
+cc_test(
+  name = "utils_lib_test",
+  size = "small",
+  srcs = ["util_test.cc"],
+  deps = [
+      "@gtest//:gtest_main",
+	  ":utils_lib",
+      ],
+)
+
+cc_library(
+    name = "embedding_lib",
+    srcs = [
+        "embedding.cc",
+        ],
+    hdrs = [
+        "embedding.h",
+        ],
+	deps = [
+        ":utils_lib"
+    ],
+	visibility = [
+		"//visibility:public",
+	],
+)
+
+cc_test(
+  name = "embedding_lib_test",
+  size = "small",
+  srcs = ["embedding_test.cc"],
+  deps = [
+      "@gtest//:gtest_main",
+	  ":embedding_lib",
+      ],
+)
+
+cc_library(
+    name = "instruction_lib",
+    srcs = [
+        "instruction.cc",
+        ],
+    hdrs = [
+        "instruction.h",
+        ],
+	visibility = [
+		"//visibility:public",
+	],
+)
+
+cc_test(
+  name = "instruction_lib_test",
+  size = "small",
+  srcs = ["instruction_test.cc"],
+  deps = [
+      "@gtest//:gtest_main",
+	  ":instruction_lib",
+      ],
+)
+
+cc_library(
+    name = "model_lib",
+    srcs = [
+        "model.cc",
+        ],
+    hdrs = [
+        "model.h",
+        ],
+	deps = [
+        ":embedding_lib",
+		":utils_lib",
+    ],
+	visibility = [
+		"//visibility:public",
+	],
+)
+
+cc_test(
+  name = "model_lib_test",
+  size = "large",
+  srcs = ["model_test.cc"],
+  deps = [
+      "@gtest//:gtest_main",
+	  ":model_lib",
+      ],
 )
\ No newline at end of file
diff --git a/Thread-1/lib/embedding.cc b/Thread-1/lib/embedding.cc
index 966a76d..2e833e7 100644
--- a/Thread-1/lib/embedding.cc
+++ b/Thread-1/lib/embedding.cc
@@ -1,7 +1,9 @@
+
 #include <fstream>
 #include <iostream>
 #include <sstream>
 #include <cmath>
+#include <mutex>
 
 #include "utils.h"
 #include "embedding.h"
@@ -23,11 +25,23 @@ Embedding::Embedding(int length, double* data) {
 }
 
 Embedding::Embedding(Embedding* origin) {
+    std::lock_guard<std::mutex> lock(origin->mux);
 	int length = origin->get_length();
     embbedingAssert(length > 0, "Non-positive length encountered!", NON_POSITIVE_LEN);
     double* oldData = origin->get_data();
     double* newData = new double[length];
-    for(int i = 0; i<length; i++)newData[i] = oldData[i];
+    for(int i = 0; i<length; i++) newData[i] = oldData[i];
+    this->length = length;
+    this->data = newData;
+}
+
+Embedding::Embedding(Embedding const& origin) {
+    std::lock_guard<std::mutex> lock(origin.mux);
+	int length = origin.length;
+    embbedingAssert(length > 0, "Non-positive length encountered!", NON_POSITIVE_LEN);
+    double* oldData = origin.data;
+    double* newData = new double[length];
+    for(int i = 0; i<length; i++) newData[i] = oldData[i];
     this->length = length;
     this->data = newData;
 }
@@ -58,6 +72,8 @@ void Embedding::update(Embedding* gradient, double stepsize) {
 }
 
 std::string Embedding::to_string() {
+    std::lock_guard<std::mutex> lock(this->mux);
+
     std::string res;
     for (int i = 0; i < this->length; ++i) {
         if (i > 0) res += ',';
@@ -71,7 +87,7 @@ void Embedding::write_to_stdout() {
     std::cout << prefix << this->to_string() << '\n';
 }
 
-Embedding Embedding::operator+(const Embedding &another) {
+Embedding Embedding::operator+(Embedding &another) {
     double* data = new double[this->length];
     for (int i = 0; i < this->length; ++i) {
         data[i] = this->data[i] + another.data[i];
@@ -87,7 +103,7 @@ Embedding Embedding::operator+(const double value) {
     return Embedding(this->length, data);
 }
 
-Embedding Embedding::operator-(const Embedding &another) {
+Embedding Embedding::operator-(Embedding &another) {
     double* data = new double[this->length];
     for (int i = 0; i < this->length; ++i) {
         data[i] = this->data[i] - another.data[i];
@@ -103,7 +119,7 @@ Embedding Embedding::operator-(const double value) {
     return Embedding(this->length, data);
 }
 
-Embedding Embedding::operator*(const Embedding &another) {
+Embedding Embedding::operator*(Embedding &another) {
     double* data = new double[this->length];
     for (int i = 0; i < this->length; ++i) {
         data[i] = this->data[i] * another.data[i];
@@ -119,7 +135,7 @@ Embedding Embedding::operator*(const double value) {
     return Embedding(this->length, data);
 }
 
-Embedding Embedding::operator/(const Embedding &another) {
+Embedding Embedding::operator/(Embedding &another) {
     double* data = new double[this->length];
     for (int i = 0; i < this->length; ++i) {
         data[i] = this->data[i] / another.data[i];
@@ -135,7 +151,7 @@ Embedding Embedding::operator/(const double value) {
     return Embedding(this->length, data);
 }
 
-bool Embedding::operator==(const Embedding &another) {
+bool Embedding::operator==(Embedding &another) {
     for (int i = 0; i < this->length; ++i) {
         if(fabs(this->data[i]-another.data[i])>1.0e-6)return false;
     }
@@ -174,20 +190,26 @@ EmbeddingMatrix EmbeddingHolder::read(std::string filename) {
 }
 
 int EmbeddingHolder::append(Embedding* data) {
+    std::lock_guard<std::mutex> lock(this->mux);
+
     int indx = this->emb_matx.size();
     embbedingAssert(
-        data->get_length() == this->emb_matx[0]->get_length(),
+        indx == 0 | data->get_length() == this->emb_matx[0]->get_length(),
         "Embedding to append has a different length!", LEN_MISMATCH
     );
     this->emb_matx.push_back(data);
+
+    this->cv.notify_all();
     return indx;
 }
 
 void EmbeddingHolder::write(std::string filename) {
+    std::lock_guard<std::mutex> lock(this->mux);
+
     std::ofstream ofs(filename);
     if (ofs.is_open()) {
         for (Embedding* emb: this->emb_matx) {
-            ofs << emb->to_string() << '\n';
+            ofs << emb->to_string() + '\n';
         }
         ofs.close();
     } else {
@@ -196,9 +218,11 @@ void EmbeddingHolder::write(std::string filename) {
 }
 
 void EmbeddingHolder::write_to_stdout() {
+    std::lock_guard<std::mutex> lock(this->mux);
+
     std::string prefix("[OUTPUT]");
     for (Embedding* emb: this->emb_matx) {
-        std::cout << prefix << emb->to_string() << '\n';
+        std::cout << prefix + emb->to_string() + '\n';
     }
 }
 
@@ -208,16 +232,45 @@ EmbeddingHolder::~EmbeddingHolder() {
     }
 }
 
-void EmbeddingHolder::update_embedding(
-        int idx, EmbeddingGradient* gradient, double stepsize) {
-    this->emb_matx[idx]->update(gradient, stepsize);
+void EmbeddingHolder::update_embedding(int idx, EmbeddingGradient* gradient, double stepsize) {
+    Embedding* emb = this->get_embedding(idx);
+    emb->lock();
+    emb->update(gradient, stepsize);
+    emb->unlock();
 }
 
-bool EmbeddingHolder::operator==(const EmbeddingHolder &another) {
-    if (this->get_n_embeddings() != another.emb_matx.size())
+Embedding* EmbeddingHolder::get_embedding(int idx) {
+    std::unique_lock<std::mutex> lock(this->mux);
+
+    while (idx >= this->emb_matx.size()) {
+        this->cv.wait(lock);
+    }
+    return this->emb_matx[idx];
+}
+
+unsigned int EmbeddingHolder::get_n_embeddings() {
+    std::lock_guard<std::mutex> lock(this->mux);
+
+    return this->emb_matx.size();
+}
+
+int EmbeddingHolder::get_emb_length() {
+    std::lock_guard<std::mutex> lock(this->mux);
+
+    return this->emb_matx.empty()? 0: this->emb_matx[0]->get_length();
+}
+
+bool EmbeddingHolder::operator==(EmbeddingHolder &another) {
+    std::lock_guard<std::mutex> lock(this->mux);
+    std::lock_guard<std::mutex> lock1(another.mux);
+
+    if (this->emb_matx.size() != another.emb_matx.size())
         return false;
+
     for (int i = 0; i < (int)this->emb_matx.size(); ++i) {
-        if(!(*(this->emb_matx[i]) == *(another.get_embedding(i)))){
+        std::lock_guard<std::mutex> lock2(this->emb_matx[i]->mux);
+        std::lock_guard<std::mutex> lock3(another.emb_matx[i]->mux);
+        if(!(*(this->emb_matx[i]) == *(another.emb_matx[i]))){
         	return false;
 		}
     }
diff --git a/Thread-1/lib/embedding.h b/Thread-1/lib/embedding.h
index 6e13d14..4a360c8 100644
--- a/Thread-1/lib/embedding.h
+++ b/Thread-1/lib/embedding.h
@@ -1,8 +1,22 @@
 #ifndef THREAD_LIB_EMBEDDING_H_
 #define THREAD_LIB_EMBEDDING_H_
 
+/**
+ * Embedding:
+ * Constructor and output method get lock automatically
+ * get data, operaters will not get lock
+ * 
+ * only when do read-calc-write, should get wmux (then get mux when write),
+ * so that thread only want to read also can read when calc,
+ * thread also want to do read-calc-write cannot read
+ * 
+ * EmbeddingHolder: all methods are safe
+*/
+
 #include <string>
 #include <vector>
+#include <mutex>
+#include <condition_variable>
 
 namespace proj1 {
 
@@ -18,6 +32,7 @@ public:
     Embedding(int, double*);
     Embedding(int, std::string);
     Embedding(Embedding*);
+    Embedding(Embedding const&);
     ~Embedding() { delete []this->data; }
     double* get_data() { return this->data; }
     int get_length() { return this->length; }
@@ -25,15 +40,21 @@ public:
     std::string to_string();
     void write_to_stdout();
     // Operators
-    Embedding operator+(const Embedding&);
+    Embedding operator+(Embedding&);
     Embedding operator+(const double);
-    Embedding operator-(const Embedding&);
+    Embedding operator-(Embedding&);
     Embedding operator-(const double);
-    Embedding operator*(const Embedding&);
+    Embedding operator*(Embedding&);
     Embedding operator*(const double);
-    Embedding operator/(const Embedding&);
+    Embedding operator/(Embedding&);
     Embedding operator/(const double);
-    bool operator==(const Embedding&);
+    bool operator==(Embedding&);
+    //lock&unlock
+    mutable std::mutex wmux;
+    mutable std::mutex mux;
+    void lock() {this->mux.lock();}
+    void unlock() {this->mux.unlock();}
+
 private:
     int length;
     double* data;
@@ -52,14 +73,18 @@ public:
     void write(std::string filename);
     int append(Embedding *data);
     void update_embedding(int, EmbeddingGradient*, double);
-    Embedding* get_embedding(int idx) const { return this->emb_matx[idx]; } 
-    unsigned int get_n_embeddings() { return this->emb_matx.size(); }
-    int get_emb_length() {
-        return this->emb_matx.empty()? 0: this->get_embedding(0)->get_length();
-    }
-    bool operator==(const EmbeddingHolder&);
+    Embedding* get_embedding(int idx);
+    unsigned int get_n_embeddings();
+    int get_emb_length();
+    bool operator==(EmbeddingHolder&);
+
 private:
     EmbeddingMatrix emb_matx;
+    // lock&unlock
+    mutable std::mutex mux;
+    // void lock() {this->mux.lock();}
+    // void unlock() {this->mux.unlock();}
+    mutable std::condition_variable cv;
 };
 
 } // namespace proj1
diff --git a/Thread-1/lib/embedding_test.cc b/Thread-1/lib/embedding_test.cc
index 84fab0d..1f3a763 100644
--- a/Thread-1/lib/embedding_test.cc
+++ b/Thread-1/lib/embedding_test.cc
@@ -1,67 +1,67 @@
-#include <gtest/gtest.h>
-#include <vector>
-#include "embedding.h"
-
-
-double embA[20] = {-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923};
-double embB[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};
-double embC[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};
-
-namespace proj1 {
-namespace testing{
-
-class EmbeddingTest : public ::testing::Test {
- protected:
-  void SetUp() override {
-    
-	//double embC[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};	
-	emb_testA = new Embedding(20, embA);  
-	emb_testB = new Embedding(20, embB);   
-	emb_testC = new Embedding(20, embC);   
-	embhA.push_back(emb_testA);
-	embhB.push_back(emb_testB);
-	embhC.push_back(emb_testC);
-	embh_testA = new EmbeddingHolder(embhA);
-	embh_testB = new EmbeddingHolder(embhB);
-	embh_testC = new EmbeddingHolder(embhC);
-  }
-  Embedding* emb_testA;
-  Embedding* emb_testB;
-  Embedding* emb_testC;
-  std::vector<Embedding*>embhA;
-  std::vector<Embedding*>embhB;
-  std::vector<Embedding*>embhC;
-  EmbeddingHolder* embh_testA;
-  EmbeddingHolder* embh_testB;
-  EmbeddingHolder* embh_testC;
-};
-
-bool compare(Embedding* emb_test, double *data){
-	double * tmp = emb_test->get_data();
-	for(int i = 0; i<20; i++){
-		if(tmp[i]!=data[i])return false;
-	}
-	return true;
-}
-
-TEST_F(EmbeddingTest, test_embdedding){
-	double emb[20] = {-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923};
-	EXPECT_EQ(true, compare(emb_testA, emb));
-	EXPECT_EQ((*emb_testB) == (*emb_testC), true);
-	EXPECT_EQ((*emb_testB) == (*emb_testA), false);
-	EXPECT_EQ((*emb_testC) == (*emb_testA), false);
-}
-
-TEST_F(EmbeddingTest, test_embdeddingHolder){
-	EXPECT_EQ((*embh_testB) == (*embh_testC), true);
-	EXPECT_EQ((*embh_testB) == (*embh_testA), false);
-	EXPECT_EQ((*embh_testC) == (*embh_testA), false);
-}
-
-} // namespace testing
-} // namespace proj1
-
-int main(int argc,char **argv){
-  testing::InitGoogleTest(&argc,argv);
-  return RUN_ALL_TESTS();
-}
+#include <gtest/gtest.h>
+#include <vector>
+#include "embedding.h"
+
+
+double embA[20] = {-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923};
+double embB[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};
+double embC[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};
+
+namespace proj1 {
+namespace testing{
+
+class EmbeddingTest : public ::testing::Test {
+ protected:
+  void SetUp() override {
+    
+	//double embC[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};	
+	emb_testA = new Embedding(20, embA);  
+	emb_testB = new Embedding(20, embB);   
+	emb_testC = new Embedding(20, embC);   
+	embhA.push_back(emb_testA);
+	embhB.push_back(emb_testB);
+	embhC.push_back(emb_testC);
+	embh_testA = new EmbeddingHolder(embhA);
+	embh_testB = new EmbeddingHolder(embhB);
+	embh_testC = new EmbeddingHolder(embhC);
+  }
+  Embedding* emb_testA;
+  Embedding* emb_testB;
+  Embedding* emb_testC;
+  std::vector<Embedding*>embhA;
+  std::vector<Embedding*>embhB;
+  std::vector<Embedding*>embhC;
+  EmbeddingHolder* embh_testA;
+  EmbeddingHolder* embh_testB;
+  EmbeddingHolder* embh_testC;
+};
+
+bool compare(Embedding* emb_test, double *data){
+	double * tmp = emb_test->get_data();
+	for(int i = 0; i<20; i++){
+		if(tmp[i]!=data[i])return false;
+	}
+	return true;
+}
+
+TEST_F(EmbeddingTest, test_embdedding){
+	double emb[20] = {-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923};
+	EXPECT_EQ(true, compare(emb_testA, emb));
+	EXPECT_EQ((*emb_testB) == (*emb_testC), true);
+	EXPECT_EQ((*emb_testB) == (*emb_testA), false);
+	EXPECT_EQ((*emb_testC) == (*emb_testA), false);
+}
+
+TEST_F(EmbeddingTest, test_embdeddingHolder){
+	EXPECT_EQ((*embh_testB) == (*embh_testC), true);
+	EXPECT_EQ((*embh_testB) == (*embh_testA), false);
+	EXPECT_EQ((*embh_testC) == (*embh_testA), false);
+}
+
+} // namespace testing
+} // namespace proj1
+
+int main(int argc,char **argv){
+  testing::InitGoogleTest(&argc,argv);
+  return RUN_ALL_TESTS();
+}
diff --git a/Thread-1/lib/instruction.cc b/Thread-1/lib/instruction.cc
index ddfc532..afddcf5 100644
--- a/Thread-1/lib/instruction.cc
+++ b/Thread-1/lib/instruction.cc
@@ -1,31 +1,31 @@
-#include <string>
-#include <sstream>
-#include <fstream>
-#include "instruction.h"
-
-namespace proj1 {
-
-Instruction::Instruction(std::string line) {
-    std::stringstream ss(line);
-    int data;
-    ss >> data;
-    this->order = (InstructionOrder) data;
-    while (ss >> data) {
-        this->payloads.push_back(data);
-    }
-}
-
-Instructions read_instructrions(std::string filename) {
-    std::ifstream ifs(filename);
-    std::string line;
-    Instructions data;
-    if (ifs.is_open()) {
-        while(std::getline(ifs, line)) {
-            data.push_back(Instruction(line));
-        }
-        ifs.close();
-    }
-    return data;
-}
-
+#include <string>
+#include <sstream>
+#include <fstream>
+#include "instruction.h"
+
+namespace proj1 {
+
+Instruction::Instruction(std::string line) {
+    std::stringstream ss(line);
+    int data;
+    ss >> data;
+    this->order = (InstructionOrder) data;
+    while (ss >> data) {
+        this->payloads.push_back(data);
+    }
+}
+
+Instructions read_instructrions(std::string filename) {
+    std::ifstream ifs(filename);
+    std::string line;
+    Instructions data;
+    if (ifs.is_open()) {
+        while(std::getline(ifs, line)) {
+            data.push_back(Instruction(line));
+        }
+        ifs.close();
+    }
+    return data;
+}
+
 } // namespace proj1
\ No newline at end of file
diff --git a/Thread-1/lib/instruction.h b/Thread-1/lib/instruction.h
index 4aa34ea..f2058a8 100644
--- a/Thread-1/lib/instruction.h
+++ b/Thread-1/lib/instruction.h
@@ -1,26 +1,26 @@
-#ifndef THREAD_LIB_INSTRUCTION_H_
-#define THREAD_LIB_INSTRUCTION_H_
-
-#include <string>
-#include <vector>
-
-namespace proj1 {
-
-enum InstructionOrder {
-    INIT_EMB = 0,
-    UPDATE_EMB,
-    RECOMMEND
-};
-
-struct Instruction {
-    Instruction(std::string);
-    InstructionOrder order;
-    std::vector<int> payloads;
-};
-
-using Instructions = std::vector<Instruction>;
-
-Instructions read_instructrions(std::string);
-
-} // namespace proj1
+#ifndef THREAD_LIB_INSTRUCTION_H_
+#define THREAD_LIB_INSTRUCTION_H_
+
+#include <string>
+#include <vector>
+
+namespace proj1 {
+
+enum InstructionOrder {
+    INIT_EMB = 0,
+    UPDATE_EMB,
+    RECOMMEND
+};
+
+struct Instruction {
+    Instruction(std::string);
+    InstructionOrder order;
+    std::vector<int> payloads;
+};
+
+using Instructions = std::vector<Instruction>;
+
+Instructions read_instructrions(std::string);
+
+} // namespace proj1
 #endif  // THREAD_LIB_INSTRUCTION_H_
\ No newline at end of file
diff --git a/Thread-1/lib/model_test.cc b/Thread-1/lib/model_test.cc
index e1f9c8b..20f0e73 100644
--- a/Thread-1/lib/model_test.cc
+++ b/Thread-1/lib/model_test.cc
@@ -1,42 +1,42 @@
-#include <gtest/gtest.h>
-#include <chrono>
-#include "model.h"
-
-namespace proj1 {
-namespace testing{
-
-class ModelTest : public ::testing::Test {
- protected:
-  void SetUp() override {
-    double embA[20] = {-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923};
-    double embB[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};
-	emb_testA = new Embedding(20, embA);  
-	emb_testB = new Embedding(20, embB);   
-  }
-  Embedding* emb_testA;
-  Embedding* emb_testB;
-};
-
-TEST_F(ModelTest, test_calc_gradient){
-	auto start = std::chrono::high_resolution_clock::now();
-	calc_gradient(emb_testA, emb_testB, 1);
-    auto end = std::chrono::high_resolution_clock::now();
-    auto time_ellapsed = end - start;
-	EXPECT_LT(10*1000, time_ellapsed.count());
-}
-
-TEST_F(ModelTest, test_cold_start){
-	auto start = std::chrono::high_resolution_clock::now();
-	cold_start(emb_testA, emb_testB);
-    auto end = std::chrono::high_resolution_clock::now();
-    auto time_ellapsed = end - start;
-	EXPECT_LT(20*1000, time_ellapsed.count());
-}
-
-} // namespace testing
-} // namespace proj1
-
-int main(int argc,char **argv){
-  testing::InitGoogleTest(&argc,argv);
-  return RUN_ALL_TESTS();
-}
+#include <gtest/gtest.h>
+#include <chrono>
+#include "model.h"
+
+namespace proj1 {
+namespace testing{
+
+class ModelTest : public ::testing::Test {
+ protected:
+  void SetUp() override {
+    double embA[20] = {-0.9166718150866153,0.43829227278389205,-0.6129205231425989,0.7738693110376684,-0.04456069156634124,0.8807831166061564,-0.8206278700342509,0.5013513447020947,0.8570578529268591,0.3906799520892723,0.6558968505921785,0.0011654760044317314,0.3008835791217257,-0.15983430198414705,-0.0693333837225647,-0.6526558237637923};
+    double embB[20] = {0.9210598583969818,0.42579710374854174,0.4036360259825613,0.030714658443632636,-0.885772459758438,-0.24727514094877123,0.7355606108008894,0.10546495518591437,-0.8023562184533268,-0.49625645997262624,-0.9207327565798142,-0.5815206606673406,0.9351907452001367,0.3172382122419557,0.003001769800845988,-0.922981014248552};
+	emb_testA = new Embedding(20, embA);  
+	emb_testB = new Embedding(20, embB);   
+  }
+  Embedding* emb_testA;
+  Embedding* emb_testB;
+};
+
+TEST_F(ModelTest, test_calc_gradient){
+	auto start = std::chrono::high_resolution_clock::now();
+	calc_gradient(emb_testA, emb_testB, 1);
+    auto end = std::chrono::high_resolution_clock::now();
+    auto time_ellapsed = end - start;
+	EXPECT_LT(10*1000, time_ellapsed.count());
+}
+
+TEST_F(ModelTest, test_cold_start){
+	auto start = std::chrono::high_resolution_clock::now();
+	cold_start(emb_testA, emb_testB);
+    auto end = std::chrono::high_resolution_clock::now();
+    auto time_ellapsed = end - start;
+	EXPECT_LT(20*1000, time_ellapsed.count());
+}
+
+} // namespace testing
+} // namespace proj1
+
+int main(int argc,char **argv){
+  testing::InitGoogleTest(&argc,argv);
+  return RUN_ALL_TESTS();
+}
diff --git a/Thread-1/lib/server.cc b/Thread-1/lib/server.cc
new file mode 100644
index 0000000..cdc3234
--- /dev/null
+++ b/Thread-1/lib/server.cc
@@ -0,0 +1,364 @@
+
+#include <vector>
+#include <thread>
+#include <iostream>
+#include <mutex>
+
+#include "server.h"
+#include "model.h"
+#include "utils.h"
+
+#define TIMER(s) // proj1::AutoTimer timer(s)
+
+namespace proj1 {
+
+void Server::write_to_stdout() {
+    users.write_to_stdout();
+    items.write_to_stdout();
+}
+
+void Server::do_instruction(Instruction inst) {
+    switch(inst.order) {
+        case INIT_EMB: {
+            if (!useLock) {
+                do_init(inst);
+            } else if (!initParall) {
+                do_init_safe(inst);
+            } else {
+                do_init_parall(inst);
+            }
+            break;
+        }
+        case UPDATE_EMB: {
+            if (!useLock) {
+                do_update(inst);
+            } else if (!useEpoch) {
+                do_update_safe(inst);
+            } else {
+                if (!changeInplace) {
+                    do_update_epoch(inst);
+                } else {
+                    do_update_inplace(inst);
+                }
+            }
+            break;
+        }
+        case RECOMMEND: {
+            if (!useLock) {
+                Embedding* emb = do_recommend(inst);
+                emb->write_to_stdout();
+            } else if (!useEpoch) {
+                Embedding* emb = do_recommend_safe(inst);
+                emb->write_to_stdout();
+            } else {
+                if (!changeInplace) {
+                    Embedding* emb = do_recommend_epoch(inst);
+                    emb->write_to_stdout();
+                } else {
+                    Embedding* emb = do_recommend_non_inplace(inst);
+                    emb->write_to_stdout();
+                }
+            }
+        }
+    }
+}
+
+void Server::do_init(Instruction inst) {
+    TIMER("do_init");
+
+    int length = users.get_emb_length();
+    Embedding* new_user = new Embedding(length);
+    int user_idx = users.append(new_user);
+
+    for (int item_index: inst.payloads) {
+        Embedding* item_emb = items.get_embedding(item_index);
+
+        EmbeddingGradient* gradient = cold_start(new_user, item_emb);
+        users.update_embedding(user_idx, gradient, 0.01);
+        delete gradient;
+    }
+}
+
+void Server::do_init_safe(Instruction inst) {
+    TIMER("do_init_safe");
+
+    int length = users.get_emb_length();
+    Embedding* new_user = new Embedding(length);
+    int user_idx = users.append(new_user);
+
+    for (int item_index: inst.payloads) {
+        Embedding* item_emb = items.get_embedding(item_index);
+
+        Embedding* user = new Embedding(new_user);
+        Embedding* item = new Embedding(item_emb);
+        EmbeddingGradient* gradient = cold_start(user, item);
+        delete user, item;
+
+        users.update_embedding(user_idx, gradient, 0.01);
+        delete gradient;
+    }
+}
+
+void Server::do_init_parall(Instruction inst) {
+    TIMER("do_init_parall");
+
+    int length = users.get_emb_length();
+    Embedding* new_user = new Embedding(length);
+    int user_idx = users.append(new_user);
+
+    std::vector<std::thread*> threads;
+    for (int item_index: inst.payloads) {
+        std::thread* t = new std::thread(
+            [&, item_index]() {
+                Embedding* item_emb = items.get_embedding(item_index);
+
+                Embedding* user = new Embedding(new_user);
+                Embedding* item = new Embedding(item_emb);
+                EmbeddingGradient* gradient = cold_start(user, item);
+                delete user, item;
+
+                users.update_embedding(user_idx, gradient, 0.01);
+                delete gradient;
+            }
+        );
+        threads.push_back(t);
+    }
+    for (std::thread* t: threads) {
+        t->join();
+        delete t;
+    }
+}
+
+void Server::do_update(Instruction inst) {
+    TIMER("do_update");
+
+    std::cout << "do_update" << std::endl;
+    int user_idx = inst.payloads[0];
+    int item_idx = inst.payloads[1];
+    int label = inst.payloads[2];
+
+    Embedding* user_emb = users.get_embedding(user_idx);
+    Embedding* item_emb = items.get_embedding(item_idx);
+
+    EmbeddingGradient* gradient = calc_gradient(user_emb, item_emb, label);
+    users.update_embedding(user_idx, gradient, 0.01);
+    delete gradient;
+
+    gradient = calc_gradient(item_emb, user_emb, label);
+    items.update_embedding(item_idx, gradient, 0.001);
+    delete gradient;
+}
+
+void Server::do_update_safe(Instruction inst) {
+    TIMER("do_update_safe");
+
+    int user_idx = inst.payloads[0];
+    int item_idx = inst.payloads[1];
+    int label = inst.payloads[2];
+
+    Embedding* user_emb = users.get_embedding(user_idx);
+    Embedding* item_emb = items.get_embedding(item_idx);
+
+    auto user = new Embedding(user_emb);
+    auto item = new Embedding(item_emb);
+    EmbeddingGradient* gradient = calc_gradient(user, item, label);
+    delete user, item;
+
+    users.update_embedding(user_idx, gradient, 0.01);
+    delete gradient;
+
+    user = new Embedding(user_emb);
+    item = new Embedding(item_emb);
+    gradient = calc_gradient(item, user, label);
+    delete user, item;
+
+    items.update_embedding(item_idx, gradient, 0.001);
+    delete gradient;
+}
+
+void Server::do_update_epoch(Instruction inst) {
+    int iter_idx = inst.payloads[3];
+{
+    std::unique_lock<std::mutex> lock(this->mux);
+    while (!(this->epoch >= iter_idx || (this->epoch == iter_idx - 1 && this->num_threads == 0))) {
+        this->cv.wait(lock);
+    }
+    if (this->epoch == iter_idx - 1 && this->num_threads == 0) {
+        this->epoch = iter_idx;
+    }
+    this->num_threads++;
+}
+
+    TIMER("do_update_epoch");
+
+    int user_idx = inst.payloads[0];
+    int item_idx = inst.payloads[1];
+    int label = inst.payloads[2];
+
+    Embedding* user_emb = users.get_embedding(user_idx);
+    Embedding* item_emb = items.get_embedding(item_idx);
+
+    auto user = new Embedding(user_emb);
+    auto item = new Embedding(item_emb);
+    EmbeddingGradient* gradient = calc_gradient(user, item, label);
+    delete user, item;
+
+    users.update_embedding(user_idx, gradient, 0.01);
+    delete gradient;
+
+    user = new Embedding(user_emb);
+    item = new Embedding(item_emb);
+    gradient = calc_gradient(item, user, label);
+    delete user, item;
+
+    items.update_embedding(item_idx, gradient, 0.001);
+    delete gradient;
+
+{
+    std::unique_lock<std::mutex> lock(this->mux);
+    this->num_threads--;
+    this->cv.notify_all();
+}
+}
+
+void Server::do_update_inplace(Instruction inst) {
+    int iter_idx = inst.payloads[3];
+{
+    std::unique_lock<std::mutex> lock(this->mux);
+    while (!(this->epoch >= iter_idx || (this->epoch == iter_idx - 1 && this->num_threads == 0))) {
+        this->cv.wait(lock);
+    }
+    if (this->epoch == iter_idx - 1 && this->num_threads == 0) {
+        this->epoch = iter_idx;
+    }
+    this->num_threads++;
+}
+
+    TIMER("do_update_inplace");
+
+    int user_idx = inst.payloads[0];
+    int item_idx = inst.payloads[1];
+    int label = inst.payloads[2];
+
+    Embedding* user_emb = users.get_embedding(user_idx);
+    Embedding* item_emb = items.get_embedding(item_idx);
+
+{
+    std::lock_guard<std::mutex> userlock(user_emb->wmux);
+    std::lock_guard<std::mutex> itemlock(item_emb->wmux);
+    EmbeddingGradient* gradient = calc_gradient(user_emb, item_emb, label);
+    users.update_embedding(user_idx, gradient, 0.01);
+    delete gradient;
+
+    gradient = calc_gradient(item_emb, user_emb, label);
+    items.update_embedding(item_idx, gradient, 0.001);
+    delete gradient;
+}
+
+{
+    std::unique_lock<std::mutex> lock(this->mux);
+    this->num_threads--;
+    this->cv.notify_all();
+}
+}
+
+Embedding* Server::do_recommend(Instruction inst) {
+    TIMER("do_recommend");
+
+    int user_idx = inst.payloads[0];
+    Embedding* user = users.get_embedding(user_idx);
+
+    std::vector<Embedding*> item_pool;
+    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
+        int item_idx = inst.payloads[i];
+        item_pool.push_back(items.get_embedding(item_idx));
+    }
+
+    Embedding* recommendation = recommend(user, item_pool);
+    return recommendation;
+}
+
+Embedding* Server::do_recommend_safe(Instruction inst) {
+    TIMER("do_recommend_safe");
+
+    int user_idx = inst.payloads[0];
+    Embedding* user = users.get_embedding(user_idx);
+    std::lock_guard<std::mutex> lock(user->mux);
+
+    std::vector<Embedding*> item_pool;
+    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
+        int item_idx = inst.payloads[i];
+        Embedding* item = items.get_embedding(item_idx);
+        std::lock_guard<std::mutex> lock(item->mux);
+        item_pool.push_back(item);
+    }
+
+    Embedding* recommendation = recommend(user, item_pool);
+    return recommendation;
+}
+
+Embedding* Server::do_recommend_epoch(Instruction inst) {
+    int iter_idx = inst.payloads[1];
+{
+    std::unique_lock<std::mutex> lock(this->mux);
+    while (!(this->epoch > iter_idx | (this->epoch == iter_idx && this->num_threads == 0))) {
+        this->cv.wait(lock);
+    }
+}
+
+    TIMER("do_recommend_epoch");
+
+    int user_idx = inst.payloads[0];
+    Embedding* user = users.get_embedding(user_idx);
+    std::lock_guard<std::mutex> lock(user->mux);
+
+    std::vector<Embedding*> item_pool;
+    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
+        int item_idx = inst.payloads[i];
+        Embedding* item = items.get_embedding(item_idx);
+        std::lock_guard<std::mutex> lock(item->mux);
+        item_pool.push_back(item);
+    }
+
+    Embedding* recommendation = recommend(user, item_pool);
+    return recommendation;
+}
+
+Embedding* Server::do_recommend_non_inplace(Instruction inst) {
+    int iter_idx = inst.payloads[1];
+{
+    std::unique_lock<std::mutex> lock(this->mux);
+    while (!(this->epoch > iter_idx | (this->epoch == iter_idx && this->num_threads == 0))) {
+        this->cv.wait(lock);
+    }
+}
+
+    TIMER("do_recommend_non_inplace");
+
+    int user_idx = inst.payloads[0];
+    Embedding* user_emb = users.get_embedding(user_idx);
+    Embedding* user = new Embedding(user_emb);
+
+    std::vector<Embedding*> item_pool;
+    for (unsigned int i = 2; i < inst.payloads.size(); i++) {
+        int item_idx = inst.payloads[i];
+        Embedding* item_emb = items.get_embedding(item_idx);
+        Embedding* item = new Embedding(item_emb);
+        item_pool.push_back(item);
+    }
+
+    Embedding* recommendation = recommend(user, item_pool);
+
+    delete user;
+    for(auto item : item_pool) {
+        delete item;
+    }
+
+    return recommendation;
+}
+
+bool Server::operator==(Server& svr) {
+    return this->users == svr.users && this->items == svr.items;
+}
+
+} // namespace proj1
diff --git a/Thread-1/lib/server.h b/Thread-1/lib/server.h
new file mode 100644
index 0000000..3c7f309
--- /dev/null
+++ b/Thread-1/lib/server.h
@@ -0,0 +1,51 @@
+#ifndef THREAD_LIB_SERVER_H_
+#define THREAD_LIB_SERVER_H_
+
+#include <mutex>
+#include <condition_variable>
+#include "instruction.h"
+#include "embedding.h"
+
+namespace proj1 {
+
+class Server {
+public:
+    Server(std::string user_filename, std::string item_filename) : users(user_filename), items(item_filename) {}
+    Server(std::string user_filename, std::string item_filename, bool initParall, bool useLock, bool useEpoch, bool changeInplace)
+        : users(user_filename), items(item_filename), initParall(initParall), useLock(useLock), useEpoch(useEpoch), changeInplace(changeInplace) {}
+    void do_instruction(Instruction);
+    void write_to_stdout();
+
+    void do_init(Instruction);
+    void do_init_safe(Instruction);
+    void do_init_parall(Instruction);
+
+    void do_update(Instruction);
+    void do_update_safe(Instruction);
+    void do_update_epoch(Instruction);
+    void do_update_inplace(Instruction);
+
+    Embedding* do_recommend(Instruction);
+    Embedding* do_recommend_safe(Instruction);
+    Embedding* do_recommend_epoch(Instruction);
+    Embedding* do_recommend_non_inplace(Instruction);
+
+    bool operator==(Server&);
+
+private:
+    bool initParall = false;
+    bool useLock = false;
+    bool useEpoch = false;
+    bool changeInplace = false;
+
+    int epoch = -1;
+    int num_threads = 0; // number of update threads running in this epoch
+    std::mutex mux;
+    std::condition_variable cv;
+
+    EmbeddingHolder users;
+    EmbeddingHolder items;
+};
+
+} // namespace proj1
+#endif // THREAD_LIB_SERVER_H_
diff --git a/Thread-1/lib/server_test.cc b/Thread-1/lib/server_test.cc
new file mode 100644
index 0000000..036212b
--- /dev/null
+++ b/Thread-1/lib/server_test.cc
@@ -0,0 +1,53 @@
+#include <gtest/gtest.h>
+#include <vector>
+
+#include "server.h"
+#include "embedding.h"
+
+namespace proj1 {
+namespace testing {
+
+class ServerTest : public ::testing::Test {
+protected:
+    void SetUp() {
+        server1 = new Server("data/q4.in", "data/q4.in");
+        server2 = new Server("data/q4.in", "data/q4.in");
+        server3 = new Server("data/q4.in", "data/q4.in");
+
+        inst_init = new Instruction("0 0 1 2 3 4 5 6 7 8");
+        inst_update = new Instruction("1 7 5 0 0");
+        inst_recommend = new Instruction("2 2 -1 4 5 6 3 7 9");
+    }
+    Server *server1, *server2, *server3;
+    Instruction *inst_init, *inst_update, *inst_recommend;
+};
+
+TEST_F(ServerTest, test_init) {
+    server1->do_init(*inst_init);
+    server2->do_init_safe(*inst_init);
+    EXPECT_EQ((*server1) == (*server2), true);
+}
+
+TEST_F(ServerTest, test_update) {
+    server1->do_update(*inst_update);
+    server2->do_update_safe(*inst_update);
+    server3->do_update_epoch(*inst_update);
+    EXPECT_EQ((*server1) == (*server2), true);
+    EXPECT_EQ((*server2) == (*server3), true);
+}
+
+TEST_F(ServerTest, test_recommend) {
+    Embedding* emb1 = server1->do_recommend(*inst_recommend);
+    Embedding* emb2 = server2->do_recommend_safe(*inst_recommend);
+    Embedding* emb3 = server3->do_recommend_epoch(*inst_recommend);
+    EXPECT_EQ((*emb1) == (*emb2), true);
+    EXPECT_EQ((*emb2) == (*emb3), true);
+}
+    
+} // namespace testing
+} // namespace proj1
+
+int main(int argc, char** argv) {
+    testing::InitGoogleTest(&argc, argv);
+    return RUN_ALL_TESTS();
+}
diff --git a/Thread-1/lib/util_test.cc b/Thread-1/lib/util_test.cc
index 77e08a7..f23579b 100644
--- a/Thread-1/lib/util_test.cc
+++ b/Thread-1/lib/util_test.cc
@@ -1,22 +1,22 @@
-#include <gtest/gtest.h>
-#include "utils.h"
-
-namespace proj1 {
-namespace testing{
-
-
-TEST(UtilTest, test_sigmoid) {
-    EXPECT_NEAR(0.731059, sigmoid(1.0), 0.0001);   
-}
-
-TEST(UtilTest, test_sigmoid_backward) {
-    EXPECT_NEAR(0.196612, sigmoid_backward(1.0), 0.0001);   
-}
-
-} // namespace testing
-} // namespace proj1
-
-int main(int argc,char **argv){
-  testing::InitGoogleTest(&argc,argv);
-  return RUN_ALL_TESTS();
-}
+#include <gtest/gtest.h>
+#include "utils.h"
+
+namespace proj1 {
+namespace testing{
+
+
+TEST(UtilTest, test_sigmoid) {
+    EXPECT_NEAR(0.731059, sigmoid(1.0), 0.0001);   
+}
+
+TEST(UtilTest, test_sigmoid_backward) {
+    EXPECT_NEAR(0.196612, sigmoid_backward(1.0), 0.0001);   
+}
+
+} // namespace testing
+} // namespace proj1
+
+int main(int argc,char **argv){
+  testing::InitGoogleTest(&argc,argv);
+  return RUN_ALL_TESTS();
+}
diff --git a/Thread-1/lib/utils.cc b/Thread-1/lib/utils.cc
index 3427314..465e117 100644
--- a/Thread-1/lib/utils.cc
+++ b/Thread-1/lib/utils.cc
@@ -1,45 +1,47 @@
-#include <cmath>
-#include <string>
-#include <iostream>
-#include <chrono>
-#include <thread>
-#include "utils.h"
-
-namespace proj1 {
-
-void a_slow_function(int seconds) {
-    //std::this_thread::sleep_for(std::chrono::seconds(seconds));
-}
-
-double sigmoid(double x) {
-    return 1.0 / (1.0 + exp(-x));
-}
-
-double sigmoid_backward(double x) {
-    double y = sigmoid(x);
-    return y * (1.0 - y);
-}
-
-double binary_cross_entropy(double y_true, double y_pred) {
-    double eps = 1e-8;
-    return y_true * log(eps + y_pred) \
-        + (1.0 - y_true) * log(1.0 - y_pred + eps);
-}
-
-double binary_cross_entropy_backward(double y_true, double y_pred) {
-    double eps = 1e-8;
-    return (y_true - y_pred) / (eps + (1.0 - y_pred) * y_pred);
-}
-
-AutoTimer::AutoTimer(std::string name) : 
-        m_name(std::move(name)),
-        m_beg(std::chrono::high_resolution_clock::now()) { 
-    }
-
-AutoTimer::~AutoTimer() {
-    auto end = std::chrono::high_resolution_clock::now();
-    auto dur = std::chrono::duration_cast<std::chrono::microseconds>(end - m_beg);
-    std::cout << m_name << " : " << dur.count() << " usec\n";
-}
-
-} // namespace proj1
+#include <cmath>
+#include <string>
+#include <iostream>
+#include <chrono>
+#include <thread>
+#include "utils.h"
+
+namespace proj1 {
+
+void a_slow_function(int seconds) {
+    if (slow_function) {
+        std::this_thread::sleep_for(std::chrono::timescale(seconds));
+    }
+}
+
+double sigmoid(double x) {
+    return 1.0 / (1.0 + exp(-x));
+}
+
+double sigmoid_backward(double x) {
+    double y = sigmoid(x);
+    return y * (1.0 - y);
+}
+
+double binary_cross_entropy(double y_true, double y_pred) {
+    double eps = 1e-8;
+    return y_true * log(eps + y_pred) \
+        + (1.0 - y_true) * log(1.0 - y_pred + eps);
+}
+
+double binary_cross_entropy_backward(double y_true, double y_pred) {
+    double eps = 1e-8;
+    return (y_true - y_pred) / (eps + (1.0 - y_pred) * y_pred);
+}
+
+AutoTimer::AutoTimer(std::string name) : 
+        m_name(std::move(name)),
+        m_beg(std::chrono::high_resolution_clock::now()) { 
+    }
+
+AutoTimer::~AutoTimer() {
+    auto end = std::chrono::high_resolution_clock::now();
+    auto dur = std::chrono::duration_cast<std::chrono::microseconds>(end - m_beg);
+    std::cout << m_name + " : " + std::to_string(dur.count()) + " usec\n";
+}
+
+} // namespace proj1
diff --git a/Thread-1/lib/utils.h b/Thread-1/lib/utils.h
index 9f85001..55486c9 100644
--- a/Thread-1/lib/utils.h
+++ b/Thread-1/lib/utils.h
@@ -1,64 +1,68 @@
-#ifndef THREAD_LIB_UTILS_H_
-#define THREAD_LIB_UTILS_H_
-
-#include <string>
-#include <vector>
-#include <iostream>
-#include <chrono>  // for AutoTimer function
-
-// For colored outputs in terminal
-#define RST  "\x1B[0m"
-#define KRED  "\x1B[31m"
-#define KGRN  "\x1B[32m"
-#define KYEL  "\x1B[33m"
-#define KBLU  "\x1B[34m"
-#define KMAG  "\x1B[35m"
-#define KCYN  "\x1B[36m"
-#define KWHT  "\x1B[37m"
-
-#define FRED(x) KRED x RST
-#define FGRN(x) KGRN x RST
-#define FYEL(x) KYEL x RST
-#define FBLU(x) KBLU x RST
-#define FMAG(x) KMAG x RST
-#define FCYN(x) KCYN x RST
-#define FWHT(x) KWHT x RST
-
-#define BOLD(x) "\x1B[1m" x RST
-#define UNDL(x) "\x1B[4m" x RST
-
-namespace proj1 {
-
-// TODO(xuw): better to define this as a enum type
-static const int kOrderInit = 0;
-static const int kOrderUpdate = 1;
-
-template <class T>
-inline void embbedingAssert(bool condition, char const *msg, T error) {
-    if (!condition) {
-        std::cerr << msg << std::endl;
-        throw error;
-    }
-}
-
-void a_slow_function(int seconds);
-
-double sigmoid(double x);
-
-double sigmoid_backward(double x);
-
-double binary_cross_entropy(double y_true, double y_pred);
-
-double binary_cross_entropy_backward(double y_true, double y_pred);
-
-class AutoTimer {
- public:
-  AutoTimer(std::string name);
-  ~AutoTimer(); 
- private:
-  std::string m_name;
-  std::chrono::time_point<std::chrono::high_resolution_clock> m_beg;
-};
-
-} // namespace proj1
-#endif // THREAD_LIB_UTILS_H_
+#ifndef THREAD_LIB_UTILS_H_
+#define THREAD_LIB_UTILS_H_
+
+#include <string>
+#include <vector>
+#include <iostream>
+#include <chrono>  // for AutoTimer function
+
+// slow_function
+#define slow_function true
+#define timescale seconds
+
+// For colored outputs in terminal
+#define RST  "\x1B[0m"
+#define KRED  "\x1B[31m"
+#define KGRN  "\x1B[32m"
+#define KYEL  "\x1B[33m"
+#define KBLU  "\x1B[34m"
+#define KMAG  "\x1B[35m"
+#define KCYN  "\x1B[36m"
+#define KWHT  "\x1B[37m"
+
+#define FRED(x) KRED x RST
+#define FGRN(x) KGRN x RST
+#define FYEL(x) KYEL x RST
+#define FBLU(x) KBLU x RST
+#define FMAG(x) KMAG x RST
+#define FCYN(x) KCYN x RST
+#define FWHT(x) KWHT x RST
+
+#define BOLD(x) "\x1B[1m" x RST
+#define UNDL(x) "\x1B[4m" x RST
+
+namespace proj1 {
+
+// TODO(xuw): better to define this as a enum type
+static const int kOrderInit = 0;
+static const int kOrderUpdate = 1;
+
+template <class T>
+inline void embbedingAssert(bool condition, char const *msg, T error) {
+    if (!condition) {
+        std::cerr << msg << std::endl;
+        throw error;
+    }
+}
+
+void a_slow_function(int seconds);
+
+double sigmoid(double x);
+
+double sigmoid_backward(double x);
+
+double binary_cross_entropy(double y_true, double y_pred);
+
+double binary_cross_entropy_backward(double y_true, double y_pred);
+
+class AutoTimer {
+ public:
+  AutoTimer(std::string name);
+  ~AutoTimer(); 
+ private:
+  std::string m_name;
+  std::chrono::time_point<std::chrono::high_resolution_clock> m_beg;
+};
+
+} // namespace proj1
+#endif // THREAD_LIB_UTILS_H_
diff --git a/Thread-1/q0.cc b/Thread-1/q0.cc
index 7e51849..77525f5 100644
--- a/Thread-1/q0.cc
+++ b/Thread-1/q0.cc
@@ -1,92 +1,92 @@
-#include <vector>
-#include <tuple>
-
-#include <string>   // string
-#include <chrono>   // timer
-#include <iostream> // cout, endl
-
-#include "lib/utils.h"
-#include "lib/model.h" 
-#include "lib/embedding.h" 
-#include "lib/instruction.h"
-
-namespace proj1 {
-
-void run_one_instruction(Instruction inst, EmbeddingHolder* users, EmbeddingHolder* items) {
-    switch(inst.order) {
-        case INIT_EMB: {
-            // We need to init the embedding
-            int length = users->get_emb_length();
-            Embedding* new_user = new Embedding(length);
-            int user_idx = users->append(new_user);
-            for (int item_index: inst.payloads) {
-                Embedding* item_emb = items->get_embedding(item_index);
-                // Call cold start for downstream applications, slow
-                EmbeddingGradient* gradient = cold_start(new_user, item_emb);
-                users->update_embedding(user_idx, gradient, 0.01);
-                delete gradient;
-            }
-            break;
-        }
-        case UPDATE_EMB: {
-            int user_idx = inst.payloads[0];
-            int item_idx = inst.payloads[1];
-            int label = inst.payloads[2];
-            // You might need to add this state in other questions.
-            // Here we just show you this as an example
-            // int epoch = -1;
-            //if (inst.payloads.size() > 3) {
-            //    epoch = inst.payloads[3];
-            //}
-            Embedding* user = users->get_embedding(user_idx);
-            Embedding* item = items->get_embedding(item_idx);
-            EmbeddingGradient* gradient = calc_gradient(user, item, label);
-            users->update_embedding(user_idx, gradient, 0.01);
-            delete gradient;
-            gradient = calc_gradient(item, user, label);
-            items->update_embedding(item_idx, gradient, 0.001);
-            delete gradient;
-            break;
-        }
-        case RECOMMEND: {
-            int user_idx = inst.payloads[0];
-            Embedding* user = users->get_embedding(user_idx);
-            std::vector<Embedding*> item_pool;
-            int iter_idx = inst.payloads[1];
-            for (unsigned int i = 2; i < inst.payloads.size(); ++i) {
-                int item_idx = inst.payloads[i];
-                item_pool.push_back(items->get_embedding(item_idx));
-            }
-            Embedding* recommendation = recommend(user, item_pool);
-            recommendation->write_to_stdout();
-            break;
-        }
-    }
-
-}
-} // namespace proj1
-
-int main(int argc, char *argv[]) {
-
-    proj1::EmbeddingHolder* users = new proj1::EmbeddingHolder("data/q0.in");
-    proj1::EmbeddingHolder* items = new proj1::EmbeddingHolder("data/q0.in");
-    proj1::Instructions instructions = proj1::read_instructrions("data/q0_instruction.tsv");
-    {
-    proj1::AutoTimer timer("q0");  // using this to print out timing of the block
-    // Run all the instructions
-    for (proj1::Instruction inst: instructions) {
-        proj1::run_one_instruction(inst, users, items);
-    }
-    }
-
-    // Write the result
-    users->write_to_stdout();
-    items->write_to_stdout();
-
-    // We only need to delete the embedding holders, as the pointers are all
-    // pointing at the emb_matx of the holders.
-    delete users;
-    delete items;
-
-    return 0;
-}
+#include <vector>
+#include <tuple>
+
+#include <string>   // string
+#include <chrono>   // timer
+#include <iostream> // cout, endl
+
+#include "lib/utils.h"
+#include "lib/model.h" 
+#include "lib/embedding.h" 
+#include "lib/instruction.h"
+
+namespace proj1 {
+
+void run_one_instruction(Instruction inst, EmbeddingHolder* users, EmbeddingHolder* items) {
+    switch(inst.order) {
+        case INIT_EMB: {
+            // We need to init the embedding
+            int length = users->get_emb_length();
+            Embedding* new_user = new Embedding(length);
+            int user_idx = users->append(new_user);
+            for (int item_index: inst.payloads) {
+                Embedding* item_emb = items->get_embedding(item_index);
+                // Call cold start for downstream applications, slow
+                EmbeddingGradient* gradient = cold_start(new_user, item_emb);
+                users->update_embedding(user_idx, gradient, 0.01);
+                delete gradient;
+            }
+            break;
+        }
+        case UPDATE_EMB: {
+            int user_idx = inst.payloads[0];
+            int item_idx = inst.payloads[1];
+            int label = inst.payloads[2];
+            // You might need to add this state in other questions.
+            // Here we just show you this as an example
+            // int epoch = -1;
+            //if (inst.payloads.size() > 3) {
+            //    epoch = inst.payloads[3];
+            //}
+            Embedding* user = users->get_embedding(user_idx);
+            Embedding* item = items->get_embedding(item_idx);
+            EmbeddingGradient* gradient = calc_gradient(user, item, label);
+            users->update_embedding(user_idx, gradient, 0.01);
+            delete gradient;
+            gradient = calc_gradient(item, user, label);
+            items->update_embedding(item_idx, gradient, 0.001);
+            delete gradient;
+            break;
+        }
+        case RECOMMEND: {
+            int user_idx = inst.payloads[0];
+            Embedding* user = users->get_embedding(user_idx);
+            std::vector<Embedding*> item_pool;
+            int iter_idx = inst.payloads[1];
+            for (unsigned int i = 2; i < inst.payloads.size(); ++i) {
+                int item_idx = inst.payloads[i];
+                item_pool.push_back(items->get_embedding(item_idx));
+            }
+            Embedding* recommendation = recommend(user, item_pool);
+            recommendation->write_to_stdout();
+            break;
+        }
+    }
+
+}
+} // namespace proj1
+
+int main(int argc, char *argv[]) {
+
+    proj1::EmbeddingHolder* users = new proj1::EmbeddingHolder("data/q0.in");
+    proj1::EmbeddingHolder* items = new proj1::EmbeddingHolder("data/q0.in");
+    proj1::Instructions instructions = proj1::read_instructrions("data/q0_instruction.tsv");
+    {
+    proj1::AutoTimer timer("q0");  // using this to print out timing of the block
+    // Run all the instructions
+    for (proj1::Instruction inst: instructions) {
+        proj1::run_one_instruction(inst, users, items);
+    }
+    }
+
+    // Write the result
+    users->write_to_stdout();
+    items->write_to_stdout();
+
+    // We only need to delete the embedding holders, as the pointers are all
+    // pointing at the emb_matx of the holders.
+    delete users;
+    delete items;
+
+    return 0;
+}
diff --git a/Thread-1/q0_my.cc b/Thread-1/q0_my.cc
new file mode 100644
index 0000000..f7f992a
--- /dev/null
+++ b/Thread-1/q0_my.cc
@@ -0,0 +1,29 @@
+#include <vector>
+#include <tuple>
+
+#include <string>   // string
+#include <chrono>   // timer
+
+#include "lib/utils.h"
+#include "lib/server.h"
+#include "lib/instruction.h"
+
+int main(int argc, char *argv[]) {
+
+    proj1::Server server("data/q0.in", "data/q0.in");
+
+    proj1::Instructions instructions = proj1::read_instructrions("data/q0_instruction.tsv");
+
+    {
+        proj1::AutoTimer timer("q0");  // using this to print out timing of the block
+        // Run all the instructions
+        for (proj1::Instruction inst: instructions) {
+            server.do_instruction(inst);
+        }
+    }
+
+    // Write the result
+    server.write_to_stdout();
+
+    return 0;
+}
diff --git a/Thread-1/q1.cc b/Thread-1/q1.cc
index 974ad23..4476ad3 100644
--- a/Thread-1/q1.cc
+++ b/Thread-1/q1.cc
@@ -1,5 +1,39 @@
-#include <iostream> // cout, endl
-int main(int argc, char *argv[]) {
-    std::cout << "please implement this function\n";
-    exit(1);
-}
\ No newline at end of file
+#include <vector>
+#include <tuple>
+
+#include <string>   // string
+#include <chrono>   // timer
+#include <thread>
+#include <vector>
+
+#include "lib/utils.h"
+#include "lib/server.h"
+#include "lib/instruction.h"
+
+int main(int argc, char *argv[]) {
+
+    proj1::Server server("data/q1.in", "data/q1.in", false, true, false, false);
+
+    proj1::Instructions instructions = proj1::read_instructrions("data/q1_instruction.tsv");
+
+    {
+        proj1::AutoTimer timer("q1");  // using this to print out timing of the block
+        // Run all the instructions
+
+        std::vector<std::thread*> threads;
+
+        for (proj1::Instruction inst: instructions) {
+            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
+            threads.push_back(t);
+        }
+        for (auto t: threads) {
+            t->join();
+            delete t;
+        }
+    }
+
+    // Write the result
+    server.write_to_stdout();
+
+    return 0;
+}
diff --git a/Thread-1/q2.cc b/Thread-1/q2.cc
index c4b7413..d4b0483 100644
--- a/Thread-1/q2.cc
+++ b/Thread-1/q2.cc
@@ -1,4 +1,39 @@
-#include <iostream> // cout, endl
-int main(int argc, char *argv[]) {
-    exit(1);
-}
\ No newline at end of file
+#include <vector>
+#include <tuple>
+
+#include <string>   // string
+#include <chrono>   // timer
+#include <thread>
+#include <vector>
+
+#include "lib/utils.h"
+#include "lib/server.h"
+#include "lib/instruction.h"
+
+int main(int argc, char *argv[]) {
+
+    proj1::Server server("data/q2.in", "data/q2.in", true, true, false, false);
+
+    proj1::Instructions instructions = proj1::read_instructrions("data/q2_instruction.tsv");
+
+    {
+        proj1::AutoTimer timer("q2");  // using this to print out timing of the block
+        // Run all the instructions
+        
+        std::vector<std::thread*> threads;
+
+        for (proj1::Instruction inst: instructions) {
+            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
+            threads.push_back(t);
+        }
+        for (auto t: threads) {
+            t->join();
+            delete t;
+        }
+    }
+
+    // Write the result
+    server.write_to_stdout();
+
+    return 0;
+}
diff --git a/Thread-1/q3.cc b/Thread-1/q3.cc
index c4b7413..f4ae4dd 100644
--- a/Thread-1/q3.cc
+++ b/Thread-1/q3.cc
@@ -1,4 +1,39 @@
-#include <iostream> // cout, endl
-int main(int argc, char *argv[]) {
-    exit(1);
-}
\ No newline at end of file
+#include <vector>
+#include <tuple>
+
+#include <string>   // string
+#include <chrono>   // timer
+#include <thread>
+#include <vector>
+
+#include "lib/utils.h"
+#include "lib/server.h"
+#include "lib/instruction.h"
+
+int main(int argc, char *argv[]) {
+
+    proj1::Server server("data/q3.in", "data/q3.in", true, true, true, false);
+
+    proj1::Instructions instructions = proj1::read_instructrions("data/q3_instruction.tsv");
+
+    {
+        proj1::AutoTimer timer("q3");  // using this to print out timing of the block
+        // Run all the instructions
+        
+        std::vector<std::thread*> threads;
+
+        for (proj1::Instruction inst: instructions) {
+            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
+            threads.push_back(t);
+        }
+        for (auto t: threads) {
+            t->join();
+            delete t;
+        }
+    }
+
+    // Write the result
+    server.write_to_stdout();
+
+    return 0;
+}
diff --git a/Thread-1/q4.cc b/Thread-1/q4.cc
new file mode 100644
index 0000000..b9d6909
--- /dev/null
+++ b/Thread-1/q4.cc
@@ -0,0 +1,36 @@
+#include <vector>
+#include <tuple>
+
+#include <string>   // string
+#include <chrono>   // timer
+#include <thread>
+#include <vector>
+
+#include "lib/utils.h"
+#include "lib/server.h"
+#include "lib/instruction.h"
+
+int main(int argc, char *argv[]) {
+
+    proj1::Server server("data/q4.in", "data/q4.in", true, true, true, false);
+
+    proj1::Instructions instructions = proj1::read_instructrions("data/q4_instruction.tsv");
+
+    {
+        proj1::AutoTimer timer("q4");  // using this to print out timing of the block
+        // Run all the instructions
+        
+        std::vector<std::thread*> threads;
+
+        for (proj1::Instruction inst: instructions) {
+            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
+            threads.push_back(t);
+        }
+        for (auto t: threads) {
+            t->join();
+            delete t;
+        }
+    }
+
+    return 0;
+}
diff --git a/Thread-1/q5.cc b/Thread-1/q5.cc
index c4b7413..a55958e 100644
--- a/Thread-1/q5.cc
+++ b/Thread-1/q5.cc
@@ -1,4 +1,36 @@
-#include <iostream> // cout, endl
+#include <vector>
+#include <tuple>
+
+#include <string>   // string
+#include <chrono>   // timer
+#include <thread>
+#include <vector>
+
+#include "lib/utils.h"
+#include "lib/server.h"
+#include "lib/instruction.h"
+
 int main(int argc, char *argv[]) {
-    exit(1);
-}
\ No newline at end of file
+
+    proj1::Server server("data/q4.in", "data/q4.in", true, true, true, true);
+
+    proj1::Instructions instructions = proj1::read_instructrions("data/q4_instruction.tsv");
+
+    {
+        proj1::AutoTimer timer("q5");  // using this to print out timing of the block
+        // Run all the instructions
+        
+        std::vector<std::thread*> threads;
+
+        for (proj1::Instruction inst: instructions) {
+            auto t = new std::thread([&server, inst](){server.do_instruction(inst);});
+            threads.push_back(t);
+        }
+        for (auto t: threads) {
+            t->join();
+            delete t;
+        }
+    }
+
+    return 0;
+}
diff --git a/Thread-2/boat/.gitignore b/Thread-2/boat/.gitignore
new file mode 100644
index 0000000..f16988d
--- /dev/null
+++ b/Thread-2/boat/.gitignore
@@ -0,0 +1,3 @@
+bazel-*
+.idea
+.vscode
\ No newline at end of file
diff --git a/Thread-2/boat/BUILD b/Thread-2/boat/BUILD
index a213add..4114431 100644
--- a/Thread-2/boat/BUILD
+++ b/Thread-2/boat/BUILD
@@ -8,6 +8,12 @@ cc_library(
     hdrs = [
         "boatGrader.h",
         ],
+    copts = [
+        # "/std:c++20",
+        # "/03",
+        "-std=c++2a",
+        "-O3"
+    ],
 	visibility = [
 		"//visibility:public",
 	],
@@ -23,6 +29,12 @@ cc_library(
         ],
 	deps = [
         ":boatGrader_lib"
+    ],
+    copts = [
+        # "/std:c++20",
+        # "/03",
+        "-std=c++2a",
+        "-O3"
     ],
 	visibility = [
 		"//visibility:public",
@@ -38,9 +50,11 @@ cc_binary(
         ":boatGrader_lib",
 		":boat_lib"
     ],
-	copts = [
-        "-O3",
-        "-std=c++11",
+    copts = [
+        # "/std:c++20",
+        # "/03",
+        "-std=c++2a",
+        "-O3"
     ],
 	linkopts = [
         "-pthread",
diff --git a/Thread-2/boat/README.pdf b/Thread-2/boat/README.pdf
new file mode 100644
index 0000000000000000000000000000000000000000..fc65db6a86bfdaff078cd1a2309acd9f68d15f4f
GIT binary patch
literal 24762
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
buJ7t*>f+|*^7r5X9v%Tc6goO-Rhj<*zj4BX

literal 0
HcmV?d00001

diff --git a/Thread-2/boat/boat.cc b/Thread-2/boat/boat.cc
index 7acb29b..9292d1b 100644
--- a/Thread-2/boat/boat.cc
+++ b/Thread-2/boat/boat.cc
@@ -1,14 +1,93 @@
 #include <thread>
 #include <vector>
+#include <semaphore>
 #include <unistd.h>
 
 #include "boat.h"
 
 namespace proj2{
+int Oahu_child_counter = 0, Molokai_child_counter = 0, Oahu_adult_counter = 0;
+bool isPilot = true;
+bool isEnd = false;
+
+std::binary_semaphore ThreadStart(0);
+std::binary_semaphore ChildToMolokai(0);
+std::binary_semaphore AdultToMolokai(0);
+std::binary_semaphore ChildToOahu(0);
+std::binary_semaphore End(0);
 	
 Boat::Boat(){
 }
 
-void Boat:: begin(int a, int b, BoatGrader *bg){
+void Boat:: ChildThread(BoatGrader* bg){
+    Oahu_child_counter++;
+    bg->initializeChild();
+    ThreadStart.release();
+
+    while(true){
+        ChildToMolokai.acquire();
+
+        Oahu_child_counter--;
+
+        if(isPilot){
+            isPilot = false;
+            bg->ChildRowToMolokai();
+            ChildToMolokai.release();
+        } else {
+            if (Oahu_child_counter == 0 && Oahu_adult_counter == 0) isEnd = true;
+
+            isPilot = true;
+            bg->ChildRideToMolokai();
+            Molokai_child_counter += 2;
+
+            if (isEnd) {
+                End.release();
+            } else {
+                ChildToOahu.release();
+            }
+        }
+
+        ChildToOahu.acquire();
+        Molokai_child_counter--;
+        bg->ChildRowToOahu();
+        Oahu_child_counter++;
+        
+        if (Oahu_child_counter >= 2) {
+            ChildToMolokai.release();
+        } else {
+            AdultToMolokai.release();
+        }
+    }
+}
+
+void Boat:: AdultThread(BoatGrader* bg){
+    Oahu_adult_counter++;
+    bg->initializeAdult();
+    ThreadStart.release();
+
+    AdultToMolokai.acquire();
+    Oahu_adult_counter--;
+    bg->AdultRowToMolokai();
+    ChildToOahu.release();
+}
+
+void Boat:: begin(int adults, int children, BoatGrader *bg){
+    std::vector<std::thread> threadList;
+    for (int i = 0; i < adults; i++) {
+        threadList.push_back(std::thread(proj2::Boat::AdultThread, bg));
+        ThreadStart.acquire();
+    }
+    for (int i = 0; i < children; i++) {
+        threadList.push_back(std::thread(proj2::Boat::ChildThread, bg));
+        ThreadStart.acquire();
+    }
+
+    ChildToMolokai.release();
+    // ChildToMolokai.release();
+    End.acquire();
+
+    for (int i = 0; i < threadList.size(); i++) {
+        threadList[i].detach();
+    }
 } 
 }
\ No newline at end of file
diff --git a/Thread-2/boat/boat.h b/Thread-2/boat/boat.h
index efa1462..980296d 100644
--- a/Thread-2/boat/boat.h
+++ b/Thread-2/boat/boat.h
@@ -4,6 +4,7 @@
 #include<stdio.h>
 #include <thread>
 #include <mutex>
+#include <semaphore>
 #include <unistd.h>
 
 #include "boatGrader.h"
@@ -14,6 +15,8 @@ public:
 	Boat();
     ~Boat(){};
 	void begin(int, int, BoatGrader*);
+	static void ChildThread(BoatGrader*);
+	static void AdultThread(BoatGrader*);
 };
 }
 
diff --git a/Thread-2/boat/main.cc b/Thread-2/boat/main.cc
index e049b73..f083114 100644
--- a/Thread-2/boat/main.cc
+++ b/Thread-2/boat/main.cc
@@ -9,7 +9,7 @@ int main(int argc, char *argv[]){
         printf("\nUsage %s [adult num] [children num] \n", argv[0]);
         exit(1);
     }
-    int adults = atoi(argv[1]);
+    int adults = atoi(argv[1]); // from string to int
     int children = atoi(argv[2]);
 	proj2::BoatGrader* bg = new proj2::BoatGrader(adults,children); 
 	proj2::Boat* boat = new proj2::Boat();
diff --git a/Thread-2/deadlock/.gitignore b/Thread-2/deadlock/.gitignore
new file mode 100644
index 0000000..f16988d
--- /dev/null
+++ b/Thread-2/deadlock/.gitignore
@@ -0,0 +1,3 @@
+bazel-*
+.idea
+.vscode
\ No newline at end of file
diff --git a/Thread-2/deadlock/README.md b/Thread-2/deadlock/README.md
index 474559c..2fc5bd7 100644
--- a/Thread-2/deadlock/README.md
+++ b/Thread-2/deadlock/README.md
@@ -1,83 +1,32 @@
 # Deadlock Prevention/Recovery
 
-Real-world computation tasks usually require different resources to run, e.g.
-GPUs, disk spaces for caching dataset, and network bandwidth for communication.
-When multiple user tasks come with different resource requirements, deadlocks may
-happen and thus the program makes no progress.
-In this experiment, you should simulate a deadlock situation and either prevent
-it or detect and recover from it (we give you an deadlock example in `data/example.in`).
+Real-world computation tasks usually require different resources to run, e.g. GPUs, disk spaces for caching dataset, and network bandwidth for communication. When multiple user tasks come with different resource requirements, deadlocks may happen and thus the program makes no progress. In this experiment, you should simulate a deadlock situation and either prevent it or detect and recover from it (we give you an deadlock example in `data/example.in`).
 
 ## Codebase Introduction
 
-We consider four types of resources: GPU, Network, Memory, Disk.
-We provide a basic thread-safe implementation of a _resource manager_
-`lib/resource_manager.h`, which holds a certain number of instances of each
-resource type. The resource manager assigns the resources to each user task
-(a thread with specified workload), and blocks the thread if it is in short
-of that type of resource. A user task, before/after any resource use, should
-call the resource manager with the `request` and `release` methods to access
-the resource. Other than the resource requests that might cause a deadlock, 
-these tasks are independent, and you do not need to consider other
-synchronization among these tasks. (Of course, the resource manager itself
-should be thread-safe).
+We consider four types of resources: GPU, Network, Memory, Disk. We provide a basic thread-safe implementation of a _resource manager_ `lib/resource_manager.h`, which holds a certain number of instances of each resource type. The resource manager assigns the resources to each user task (a thread with specified workload), and blocks the thread if it is in short of that type of resource. A user task, before/after any resource use, should call the resource manager with the `request` and `release` methods to access the resource. Other than the resource requests that might cause a deadlock,  these tasks are independent, and you do not need to consider other synchronization among these tasks. (Of course, the resource manager itself should be thread-safe).
 
-We also provide a simple implementation of a _thread manager_ in
-`lib/thread_manager.h`, with which you are able to create, kill, and restart
-the threads that have been killed. You can add any information you needed to
-the thread manager (see the hints in the code). Note that you should carefully
-account for the resources held by the thread after you kill it.
+We also provide a simple implementation of a _thread manager_ in `lib/thread_manager.h`, with which you are able to create, kill, and restart the threads that have been killed. You can add any information you needed to the thread manager (see the hints in the code). Note that you should carefully account for the resources held by the thread after you kill it.
 
-In `lib/workload.h`, we provide an example user task that requests two resource
-types. Each user task requests two types of resources and uses them for an
-extended time period. In this experiment, you should not rely on this `workload`
-function, as we may adopt different implementation during testing. However, for
-any workload type, the worker thread will call `ResourceManager::budget_claim`
-to claim all resources it is going to use. The worker threads will eventually
-use all the resources they claim. It may also release some resources during
-processing. You are encouraged to add your own workload functions to test the
-correctness of your implementation under different circumstances.
+In `lib/workload.h`, we provide an example user task that requests two resource types. Each user task requests two types of resources and uses them for an extended time period. In this experiment, you should not rely on this `workload` function, as we may adopt different implementation during testing. However, for any workload type, the worker thread will call `ResourceManager::budget_claim` to claim all resources it is going to use. The worker threads will eventually use all the resources they claim. It may also release some resources during processing. You are encouraged to add your own workload functions to test the correctness of your implementation under different circumstances.
 
-In the example `main.cc` and `workload.h`, we provide a deadlock case example.
-Each user task is represented as a sequence of integers (i.e., workload
-arguments, see `main.cc` and `workload.h` for details). The order of different
-tasks are arbitrary -- you can start them simultaneously or sequentially,
-as long as they are thread-safe.
+In the example `main.cc` and `workload.h`, we provide a deadlock case example. Each user task is represented as a sequence of integers (i.e., workload arguments, see `main.cc` and `workload.h` for details). The order of different tasks are arbitrary -- you can start them simultaneously or sequentially, as long as they are thread-safe.
 
 ## TODO
 
-Given the initial number of instances of each resource type and the definition
-of each user task, your job is to run these tasks concurrently without deadlocks.
-To do this, you may prevent the deadlock from happening or recover from
-deadlocked threads by implementing a smart `ResourceManager`. Note that your
-implementation of the resource manager should not rely on the implementation of
-the workload.
+Given the initial number of instances of each resource type and the definition of each user task, your job is to run these tasks concurrently without deadlocks. To do this, you may prevent the deadlock from happening or recover from deadlocked threads by implementing a smart `ResourceManager`. Note that your implementation of the resource manager should not rely on the implementation of the workload.
 
-If you use a prevention method, in cases where two tasks cannot run
-concurrently, the resource manager should deny requests to a task, and the task
-that does not get the resource should wait until it gets the requested resource.  
+If you use a prevention method, in cases where two tasks cannot run concurrently, the resource manager should deny requests to a task, and the task that does not get the resource should wait until it gets the requested resource.  
 
-If you use a detect-and-recover scheme, the resource manager should detect
-deadlocks and recover by killing a thread. You can assume that all the threads
-are recoverable, as long as you correctly reclaim all resources managed by the
-resource manager.
+If you use a detect-and-recover scheme, the resource manager should detect deadlocks and recover by killing a thread. You can assume that all the threads are recoverable, as long as you correctly reclaim all resources managed by the resource manager.
 
-Your method should maximize the concurrency level to shorten the overall
-execution time and increase system utilization.  That is, you should do your
-best to allow all possible concurrently executable threads to run concurrently.
+Your method should maximize the concurrency level to shorten the overall execution time and increase system utilization.  That is, you should do your best to allow all possible concurrently executable threads to run concurrently.
 
-You do not need to consider failure cases (i.e., a task fails in the middle
-because of user logic errors). I.e., you can safely assume that all tasks, if
-not deadlocked, will finish correctly and return the resource to the resource
-manager.
+You do not need to consider failure cases (i.e., a task fails in the middle because of user logic errors). I.e., you can safely assume that all tasks, if not deadlocked, will finish correctly and return the resource to the resource manager.
 
 ## Grading
 
-We will use a mixture of user tasks to test your scheduler for the following
-two requirements:
+We will use a mixture of user tasks to test your scheduler for the following two requirements:
 
 1. Correctness: all the tasks should eventually finish without deadlocks;
-2. Performance: we will consider the time it takes for all the tasks. It should
-    be significantly faster than running all tasks sequentially - and quite
-    close to the theoretically best performance (i.e., an offline schedule that
-    knows all the task behaviors previously and carefully schedule them so that
-    no deadlock can happen).  
+2. Performance: we will consider the time it takes for all the tasks. It should be significantly faster than running all tasks sequentially - and quite close to the theoretically best performance (i.e., an offline schedule that knows all the task behaviors previously and carefully schedule them so that no deadlock can happen).  
diff --git a/Thread-2/deadlock/README.pdf b/Thread-2/deadlock/README.pdf
new file mode 100644
index 0000000000000000000000000000000000000000..eb541f2f52f38a57147f52943c5c786fe74e89a3
GIT binary patch
literal 36862
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

literal 0
HcmV?d00001

diff --git a/Thread-2/deadlock/data/example0.in b/Thread-2/deadlock/data/example0.in
new file mode 100644
index 0000000..06f7e0a
--- /dev/null
+++ b/Thread-2/deadlock/data/example0.in
@@ -0,0 +1,5 @@
+10 10 10 10
+0 1 4 4 2 2 0
+0 1 4 4 2 2 0
+0 1 4 4 2 2 1
+0 1 4 4 2 2 1
\ No newline at end of file
diff --git a/Thread-2/deadlock/lib/resource_manager.cc b/Thread-2/deadlock/lib/resource_manager.cc
index 2231181..914d7ee 100644
--- a/Thread-2/deadlock/lib/resource_manager.cc
+++ b/Thread-2/deadlock/lib/resource_manager.cc
@@ -1,3 +1,4 @@
+#include <stdio.h>
 #include <mutex>
 #include <thread>
 #include <chrono>
@@ -7,42 +8,150 @@
 namespace proj2 {
 
 int ResourceManager::request(RESOURCE r, int amount) {
-    if (amount <= 0)  return 1;
 
-    std::unique_lock<std::mutex> lk(this->resource_mutex[r]);
+    //改成总共只需要一个锁！
+
+
+    std::thread::id this_id = std::this_thread::get_id();
+    printf("%7d request %d : %d\n", debug_thread_id[this_id], r, amount);
+
+    if (amount <= 0)  {
+        printf("%7d request with WRONG parameter.\n",debug_thread_id[this_id]);
+        return 1;
+    }
+    
+    // std::unique_lock<std::mutex> lk(this->resource_mutex[r]);
+    std::unique_lock<std::mutex> lk(data_lock);
     while (true) {
-        if (this->resource_cv[r].wait_for(
-            lk, std::chrono::milliseconds(100),
-            [this, r, amount] { return this->resource_amount[r] >= amount; }
+        if (this->resource_cv[r].wait_for( lk,  std::chrono::milliseconds(100), 
+            // [this, r, amount] { return this->resource_amount[r] >= amount; }
+            [this, r, amount]{return this->check_security(r, amount);}
         )) {
             break;
         } else {
             auto this_id = std::this_thread::get_id();
-            /* HINT: If you choose to detect the deadlock and recover,
-                     implement your code here to kill and restart threads.
-                     Note that you should release this thread's resources
-                     properly.
-             */
+            /* HINT: If you choose to detect the deadlock and recover, implement your code here to kill and restart threads. Note that you should release this thread's resources properly. */
             if (tmgr->is_killed(this_id)) {
                 return -1;
             }
         }
     }
+    printf("%7d get %d : %d\n", debug_thread_id[this_id], r, amount);
     this->resource_amount[r] -= amount;
-    this->resource_mutex[r].unlock();
+    this->allocation[this_id][r] += amount;
+    // this->available[r] -= amount;
+    // this->resource_mutex[r].unlock();
+    this->data_lock.unlock();
     return 0;
 }
 
+
 void ResourceManager::release(RESOURCE r, int amount) {
+    std::thread::id this_id = std::this_thread::get_id();
+    printf("%7d release %d : %d\n", debug_thread_id[this_id], r, amount);
     if (amount <= 0)  return;
-    std::unique_lock<std::mutex> lk(this->resource_mutex[r]);
+    // std::unique_lock<std::mutex> lk(this->resource_mutex[r]);
+    std::unique_lock<std::mutex> lk(data_lock);
     this->resource_amount[r] += amount;
+    this->allocation[this_id][r] -= amount;
     this->resource_cv[r].notify_all();
 }
 
+bool ResourceManager::check_security(RESOURCE r, int amount) {
+
+    std::map<RESOURCE, int> available;
+    std::map<std::thread::id, int*> cur_allocation;
+    available = resource_amount;
+    cur_allocation = allocation;
+
+    std::thread::id this_id = std::this_thread::get_id();
+    // printf("%7d check %d : %d (now available %d %d %d %d)\n", debug_thread_id[this_id], r, amount, available[GPU], available[MEMORY], available[DISK], available[NETWORK]);
+    // for (int n = 0; n < threadList.size(); n++) {
+    //     printf("%7d check (cur_alloc %d : %d %d %d %d)\n", (*(uint32_t*)&this_id), (*(uint32_t*)&threadList[n]), allocation[threadList[n]][GPU], allocation[threadList[n]][MEMORY], allocation[threadList[n]][DISK], allocation[threadList[n]][NETWORK]);
+    // }
+
+    if (available[r] < amount) {
+        // printf("FAILED more than available\n");
+        return false;
+    }
+    if (cur_allocation[this_id][r] + amount > max[this_id][r]) {
+        // printf("FAILED more than max\n");
+        return false;
+    }
+    // printf("\n");
+
+    available[r] -= amount;
+    cur_allocation[this_id][r] += amount;
+
+
+    for (int i = 0; i < threadList.size(); i++)
+        unfinished[threadList[i]] = true;
+
+    bool done = false;
+    while(!done){
+        done = true;
+        for (int n = 0; n < threadList.size(); n++) {
+            if (!unfinished[threadList[n]]) continue;
+            bool is_available = true;
+            for (int i = 0; i < 4; i++) {
+                // printf("%7d check (%d,%d) : max:%d, alloc:%d, avail:%d\n", (*(uint32_t*)&this_id), (*(uint32_t*)&threadList[n]), i, max[threadList[n]][i], allocation[threadList[n]][i], available[(proj2::RESOURCE)i]);
+                if (max[threadList[n]][i] - cur_allocation[threadList[n]][i] > available[(proj2::RESOURCE)i]) {
+                    is_available = false;
+                    break;
+                }
+            }
+            // printf("%7d check %d : %s\n", (*(uint32_t*)&this_id), (*(uint32_t*)&threadList[n]), is_available?"True":"False");
+            if (is_available) {
+                done = false;
+                for (int i = 0; i < 4; i++) {
+                    available[(proj2::RESOURCE)i] += cur_allocation[threadList[n]][i];
+                }
+                unfinished[threadList[n]] = false;
+            }
+        }
+    }
+
+    available[r] += amount;
+    cur_allocation[this_id][r] -= amount;
+
+    for (int n = 0; n < threadList.size(); n++) {
+        if (unfinished[threadList[n]]) {
+            // printf("%7d check FAILED\n", (*(uint32_t*)&this_id));
+            return false;
+        }
+    }
+
+    // printf("%7d check PASS\n", debug_thread_id[this_id]);
+    return true;
+}
+
+
+
 void ResourceManager::budget_claim(std::map<RESOURCE, int> budget) {
     // This function is called when some workload starts.
-    // The workload will eventually consume all resources it claims
+    // The workload will eventually consume all resources it claimss
+    std::thread::id this_id = std::this_thread::get_id();
+
+    std::unique_lock<std::mutex> lk(data_lock);
+    this->total_thread++;
+    debug_thread_id[this_id] = total_thread;
+    printf("%7d Total thread: %d\n",debug_thread_id[this_id], this->total_thread);
+
+    this->threadList.push_back(this_id);
+
+    this->max[this_id] = new int [4];
+    this->allocation[this_id] = new int [4];
+
+    for (int i = 0; i < 4; i++) {
+        this->max[this_id][i] = 0;
+        this->allocation[this_id][i] = 0;
+    }
+
+    std::map<RESOURCE, int>::iterator iter;
+    for (iter = budget.begin(); iter != budget.end(); iter++) {
+        this->max[this_id][iter->first] = iter->second;
+        // printf("%7d claim %d : %d\n", debug_thread_id[this_id], iter->first, iter->second);
+    }
 }
 
 } // namespace: proj2
diff --git a/Thread-2/deadlock/lib/resource_manager.h b/Thread-2/deadlock/lib/resource_manager.h
index 54b45a6..d284013 100644
--- a/Thread-2/deadlock/lib/resource_manager.h
+++ b/Thread-2/deadlock/lib/resource_manager.h
@@ -2,6 +2,7 @@
 #define DEADLOCK_LIB_RESOURCE_MANAGER_H_
 
 #include <map>
+#include <vector>
 #include <mutex>
 #include <thread>
 #include <condition_variable>
@@ -19,15 +20,32 @@ enum RESOURCE {
 class ResourceManager {
 public:
     ResourceManager(ThreadManager *t, std::map<RESOURCE, int> init_count): \
-        resource_amount(init_count), tmgr(t) {}
+        resource_amount(init_count), tmgr(t), total_thread(0) {
+            std::map<RESOURCE, int>::iterator iter;
+            for (iter = resource_amount.begin(); iter != resource_amount.end(); iter++)
+                printf("Resource %d: %d\n", iter->first, iter->second);
+    }
     void budget_claim(std::map<RESOURCE, int> budget);
     int request(RESOURCE, int amount);
     void release(RESOURCE, int amount);
 private:
+    bool check_security(RESOURCE, int amount);
+
+    std::vector<std::thread::id> threadList;
+    std::map<std::thread::id, bool> unfinished;
     std::map<RESOURCE, int> resource_amount;
     std::map<RESOURCE, std::mutex> resource_mutex;
     std::map<RESOURCE, std::condition_variable> resource_cv;
     ThreadManager *tmgr;
+
+    std::mutex data_lock;
+    std::map<std::thread::id, int*> max;
+    // std::map<RESOURCE, int> available;
+    std::map<std::thread::id, int*> allocation;
+
+    std::map<std::thread::id, int> debug_thread_id;
+
+    int total_thread;
 };
 
 }  // namespce: proj2
